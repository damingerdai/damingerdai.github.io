<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 Spring WebFlux 中实现文件上传到本地</title>
      <link href="/2025/09/08/back-end/upload-file-into-local-in-spring-webflux/"/>
      <url>/2025/09/08/back-end/upload-file-into-local-in-spring-webflux/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Spring-WebFlux-中实现文件上传到本地"><a href="#在-Spring-WebFlux-中实现文件上传到本地" class="headerlink" title="在 Spring WebFlux 中实现文件上传到本地"></a>在 Spring WebFlux 中实现文件上传到本地</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文旨在介绍如何在 Spring WebFlux 框架下，实现将文件上传至本地服务器的功能。虽然目前的代码示例侧重于本地存储，但其设计思路也为未来扩展至对象存储服务（如 MinIO）奠定了基础。通过本文的学习，您将掌握在响应式编程模型下处理文件上传的关键技术。</p><hr><h2 id="具体实现过程"><a href="#具体实现过程" class="headerlink" title="具体实现过程"></a>具体实现过程</h2><h2 id="1-项目搭建与依赖引入"><a href="#1-项目搭建与依赖引入" class="headerlink" title="1. 项目搭建与依赖引入"></a>1. 项目搭建与依赖引入</h2><p>首先，您需要一个基于 Spring Boot 3.5.0 的项目。如果您使用 Gradle 作为构建工具，可以在 <code>build.gradle</code> 文件中添加以下依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ... 其他 Spring Boot 依赖</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-webflux&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;io.projectreactor:reactor-core&#x27;</span></span><br><span class="line">    <span class="comment">// Swagger UI 依赖</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springdoc:springdoc-openapi-starter-webfluxui:2.5.0&#x27;</span> <span class="comment">// 请检查最新版本</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-webflux</code> 提供了构建响应式 Web 应用所需的核心功能，而 <code>reactor-core</code> 则是 Project Reactor 的核心库，为响应式编程提供支持。<code>springdoc-openapi-starter-webfluxui</code> 则是集成 Swagger UI 所需的依赖。</p><h2 id="2-编写-Controller"><a href="#2-编写-Controller" class="headerlink" title="2. 编写 Controller"></a>2. 编写 Controller</h2><p>接下来，我们将编写 <code>FileController</code> 来处理文件上传请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBufferUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.codec.multipart.FilePart;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestPart;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> Mono&lt;FilePart&gt; filePartMono)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filePartMono.flatMap(filePart -&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取用户目录</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">userDir</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">            <span class="comment">// 构建文件保存路径，这里假设保存在项目根目录下的 nfs 文件夹中</span></span><br><span class="line">            <span class="comment">// 您可以根据实际需求修改路径</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(userDir, <span class="string">&quot;nfs&quot;</span>, filePart.filename());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 确保 nfs 目录存在，如果不存在则创建</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.nio.file.Files.createDirectories(path.getParent());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to create upload directory&quot;</span>, e));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 transferTo 将文件内容写入到指定路径</span></span><br><span class="line">            <span class="comment">// transferTo 方法返回一个 Mono&lt;Void&gt;，表示操作的完成</span></span><br><span class="line">            <span class="keyword">return</span> filePart.transferTo(path)</span><br><span class="line">                    <span class="comment">// then 方法用于在前一个 Mono 完成后执行下一个操作</span></span><br><span class="line">                    <span class="comment">// 这里我们返回一个包含成功消息的 Mono&lt;String&gt;</span></span><br><span class="line">                    .then(Mono.just(<span class="string">&quot;File uploaded successfully: &quot;</span> + filePart.filename()));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键点解析：</strong></p><ul><li><strong><code>@RestController</code></strong>: 这是一个组合注解，等同于 <code>@Controller</code> 和 <code>@ResponseBody</code>，表明此类中的方法将返回数据而不是视图名称。</li><li><strong><code>@PostMapping(&quot;/upload&quot;)</code></strong>: 指定该方法处理 HTTP POST 请求到 <code>/upload</code> 路径。</li><li><strong><code>@RequestPart(&quot;file&quot;) Mono&lt;FilePart&gt; filePartMono</code></strong>:<ul><li><code>@RequestPart</code> 注解用于接收 <code>multipart/form-data</code> 请求中的部分。这里的 <code>&quot;file&quot;</code> 对应 HTML form 表单中 <code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code> 的 <code>name</code> 属性。</li><li><code>Mono&lt;FilePart&gt;</code> 表示这是一个异步的、最多包含一个元素的发布者，代表上传的文件。Spring WebFlux 使用 Reactor 库进行响应式编程，<code>Mono</code> 是其核心组件之一。</li></ul></li><li><strong><code>filePart.transferTo(path)</code></strong>:<ul><li>这是 Spring WebFlux 提供的用于将上传的文件内容 <strong>直接传输</strong> 到指定 <code>Path</code> 的方法。</li><li>它返回一个 <code>Mono&lt;Void&gt;</code>，表示文件传输操作的完成，但不会返回任何数据。在响应式流中，<code>Void</code> 表示一个操作的完成信号。</li></ul></li><li><strong><code>.then(...)</code></strong>:<ul><li><code>then()</code> 操作符用于在源 <code>Mono</code>（在这里是 <code>filePart.transferTo(path)</code>）完成（发出完成信号）后，执行另一个 <code>Mono</code>。</li><li><code>Mono.just(&quot;File uploaded successfully: &quot; + filePart.filename())</code> 创建了一个新的 <code>Mono</code>，它会发出一个包含成功消息的字符串。</li><li>因此，<code>.then(...)</code> 确保了文件传输完成后，再发出成功上传的消息。</li></ul></li></ul><h2 id="3-使用-cURL-调用"><a href="#3-使用-cURL-调用" class="headerlink" title="3. 使用 cURL 调用"></a>3. 使用 cURL 调用</h2><p>您可以使用 <code>curl</code> 命令来测试这个上传接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -F <span class="string">&quot;file=@/path/to/your/local/file.txt&quot;</span> http://localhost:8080/upload</span><br></pre></td></tr></table></figure><p>请将 <code>/path/to/your/local/file.txt</code> 替换为您本地实际文件的路径。</p><hr><h2 id="Swagger-UI-支持"><a href="#Swagger-UI-支持" class="headerlink" title="Swagger UI 支持"></a>Swagger UI 支持</h2><p>为了方便 API 的可视化和测试，我们可以为其添加 Swagger UI 支持。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>如前所述，在 <code>build.gradle</code> 中添加 <code>springdoc-openapi-starter-webfluxui</code> 依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springdoc:springdoc-openapi-starter-webfluxui:2.5.0&#x27;</span> <span class="comment">// 请检查最新版本</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-配置-Controller-注解"><a href="#2-配置-Controller-注解" class="headerlink" title="2. 配置 Controller 注解"></a>2. 配置 Controller 注解</h2><p><code>springdoc-openapi</code> 库会自动扫描带有 Spring MVC 或 Spring WebFlux 注解的 Controller。您只需要确保您的 Controller 和方法使用了标准的 Spring WebFlux 注解（如 <code>@RestController</code>, <code>@PostMapping</code>, <code>@RequestPart</code> 等），<code>springdoc-openapi</code> 就会自动为您生成 OpenAPI 文档，并在启动后通过访问 <code>/swagger-ui.html</code> （或其他默认路径，具体取决于版本和配置）来查看。</p><p>在上面的 <code>FileController</code> 示例中，已经使用了 <code>@RestController</code> 和 <code>@PostMapping</code> 等注解，因此无需额外的配置即可支持 Swagger UI。</p><p>在项目启动后，访问 <code>http://localhost:8080/swagger-ui.html</code> （假设您的应用运行在 8080 端口），您就可以看到文件上传接口的 Swagger UI 界面了。</p><hr><p>通过以上步骤，您就成功地在 Spring WebFlux 中实现了一个文件上传到本地的功能，并为其添加了 Swagger UI 支持。您可以基于此进一步扩展，例如添加文件类型校验、大小限制，以及将文件存储目标切换为 MinIO 等对象存储服务。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> spring boot </tag>
            
            <tag> spring webflux </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 强制使用指定版本的 Spring Web JAR</title>
      <link href="/2025/09/01/back-end/gradle-force-specific-version-of-spring-web-jar/"/>
      <url>/2025/09/01/back-end/gradle-force-specific-version-of-spring-web-jar/</url>
      
        <content type="html"><![CDATA[<h1 id="Gradle-强制使用指定版本的-Spring-Web-JAR"><a href="#Gradle-强制使用指定版本的-Spring-Web-JAR" class="headerlink" title="Gradle 强制使用指定版本的 Spring Web JAR"></a>Gradle 强制使用指定版本的 Spring Web JAR</h1><h2 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h2><p>由于公司Artifactory已禁止下载Spring Web 5.x相关依赖，必须通过本地JAR包spring-web-5.3.31.jar，强制让所有依赖Spring Web的其他库使用这个指定版本。</p><h2 id="方法一：使用强制版本解析"><a href="#方法一：使用强制版本解析" class="headerlink" title="方法一：使用强制版本解析"></a>方法一：使用强制版本解析</h2><p>这种方法通过 Gradle 的强制版本功能，强制所有依赖使用指定版本。</p><h3 id="Gradle-配置"><a href="#Gradle-配置" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h3><p>在 <code>build.gradle</code> 文件中添加以下配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    <span class="comment">// 强制所有 spring-web 依赖使用 5.3.31 版本</span></span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        force <span class="string">&#x27;org.springframework:spring-web:5.3.31&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 添加本地 JAR 文件</span></span><br><span class="line">    implementation files(<span class="string">&#x27;libs/spring-web-5.3.31.jar&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他依赖...</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:2.7.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.security:spring-security-web:5.7.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖解析过程"><a href="#依赖解析过程" class="headerlink" title="依赖解析过程"></a>依赖解析过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-web:2.7.0</span><br><span class="line">└── spring-web:5.3.18 (原始依赖)</span><br><span class="line">└── spring-web:5.3.31 (强制使用)</span><br><span class="line"></span><br><span class="line">spring-security-web:5.7.1</span><br><span class="line">└── spring-web:5.3.20 (原始依赖)</span><br><span class="line">└── spring-web:5.3.31 (强制使用)</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>配置简单，一行代码解决问题</li><li>适用于所有配置（implementation, testImplementation等）</li><li>Gradle 自动处理版本冲突</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>如果本地 JAR 与强制版本不匹配，可能会导致运行时错误</li><li>需要确保所有依赖与强制版本兼容</li></ul><h2 id="方法二：使用依赖替换"><a href="#方法二：使用依赖替换" class="headerlink" title="方法二：使用依赖替换"></a>方法二：使用依赖替换</h2><p>这种方法使用 Gradle 的依赖替换功能，将远程依赖替换为本地 JAR 文件。</p><h3 id="Gradle-配置-1"><a href="#Gradle-配置-1" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h3><p>在 <code>build.gradle</code> 文件中添加以下配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.dependencySubstitution &#123;</span><br><span class="line">        <span class="comment">// 将所有 spring-web 依赖替换为本地文件</span></span><br><span class="line">        substitute module(<span class="string">&#x27;org.springframework:spring-web&#x27;</span>) </span><br><span class="line">            using files(<span class="string">&#x27;libs/spring-web-5.3.31.jar&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 其他依赖...</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:2.7.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.security:spring-security-web:5.7.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖解析过程-1"><a href="#依赖解析过程-1" class="headerlink" title="依赖解析过程"></a>依赖解析过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-web:2.7.0</span><br><span class="line">└── spring-web:5.3.18 (原始依赖)</span><br><span class="line">└── libs/spring-web-5.3.31.jar (替换为本地文件)</span><br><span class="line"></span><br><span class="line">spring-security-web:5.7.1</span><br><span class="line">└── spring-web:5.3.20 (原始依赖)</span><br><span class="line">└── libs/spring-web-5.3.31.jar (替换为本地文件)</span><br></pre></td></tr></table></figure><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>精确控制依赖来源</li><li>可以针对特定依赖进行替换</li><li>适用于复杂的依赖关系</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>配置相对复杂</li><li>需要确保替换的依赖接口兼容</li></ul><h2 id="方法三：排除并显式引入"><a href="#方法三：排除并显式引入" class="headerlink" title="方法三：排除并显式引入"></a>方法三：排除并显式引入</h2><p>这种方法从所有依赖中排除 Spring Web，然后显式引入本地 JAR 文件。</p><h3 id="Gradle-配置-2"><a href="#Gradle-配置-2" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h3><p>在 <code>build.gradle</code> 文件中添加以下配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    <span class="comment">// 全局排除所有 spring-web 依赖</span></span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;spring-web&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 添加本地 JAR 文件</span></span><br><span class="line">    implementation files(<span class="string">&#x27;libs/spring-web-5.3.31.jar&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他依赖，使用 exclude 确保不传递 spring-web</span></span><br><span class="line">    implementation (<span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:2.7.0&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;spring-web&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    implementation (<span class="string">&#x27;org.springframework.security:spring-security-web:5.7.1&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;spring-web&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖解析过程-2"><a href="#依赖解析过程-2" class="headerlink" title="依赖解析过程"></a>依赖解析过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-web:2.7.0</span><br><span class="line">└── spring-web:5.3.18 (已被排除)</span><br><span class="line"></span><br><span class="line">spring-security-web:5.7.1</span><br><span class="line">└── spring-web:5.3.20 (已被排除)</span><br><span class="line"></span><br><span class="line">本地引入: libs/spring-web-5.3.31.jar</span><br></pre></td></tr></table></figure><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>完全控制依赖树</li><li>确保只使用本地 JAR</li><li>避免任何版本冲突</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>配置最复杂，需要为每个依赖添加排除规则</li><li>维护成本较高</li></ul><h2 id="推荐使用方法"><a href="#推荐使用方法" class="headerlink" title="推荐使用方法"></a>推荐使用方法</h2><p><strong>推荐使用方法一</strong>：强制版本解析是最简单有效的方法，适用于大多数场景。只需确保您的本地 JAR 文件确实是 5.3.31 版本。</p><h2 id="验证配置是否生效"><a href="#验证配置是否生效" class="headerlink" title="验证配置是否生效"></a>验证配置是否生效</h2><p>添加以下任务到 <code>build.gradle</code> 来验证依赖解析结果：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task checkDependencies &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each &#123; artifact -&gt;</span><br><span class="line">            println <span class="string">&quot;依赖: $&#123;artifact.moduleVersion.id&#125; -&gt; 文件: $&#123;artifact.file.name&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 特别检查 spring-web</span></span><br><span class="line">        <span class="keyword">def</span> springWebDeps = configurations.compileClasspath.incoming.dependencies</span><br><span class="line">            .findAll &#123; it.name == <span class="string">&#x27;spring-web&#x27;</span> &#125;</span><br><span class="line">        </span><br><span class="line">        println <span class="string">&quot;Spring Web 依赖:&quot;</span></span><br><span class="line">        springWebDeps.each &#123; dep -&gt;</span><br><span class="line">            println <span class="string">&quot;  - $&#123;dep.group&#125;:$&#123;dep.name&#125;:$&#123;dep.version&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>./gradlew checkDependencies</code> 查看所有依赖及其解析结果。</p><h2 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h2><ul><li><strong>方法一（强制版本解析）</strong>是最简单直接的方法，推荐大多数场景使用</li><li><strong>方法二（依赖替换）</strong>提供了更精确的控制，适用于复杂场景</li><li><strong>方法三（排除并显式引入）</strong>是最彻底的方法，但配置和维护成本较高</li><li>无论使用哪种方法，都需要确保本地JAR与项目其他依赖兼容</li></ul><hr><p><strong>项目结构参考</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">项目目录/</span><br><span class="line">├── libs/</span><br><span class="line">│   ├── spring-web-5.3.31.jar</span><br><span class="line">│   └── 其他库文件.jar</span><br><span class="line">├── build.gradle</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src/</span><br></pre></td></tr></table></figure><p>通过以上配置，您可以确保所有依赖 Spring Web 的库都使用您指定的 5.3.31 版本本地 JAR 文件。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在内网 Kubernetes 集群上使用 Helm 安装 Rancher 并支持域名访问</title>
      <link href="/2025/08/17/software/deploying-rancher-via-helm-in-rrivate-kubernetes-with-custom-domain-configuration/"/>
      <url>/2025/08/17/software/deploying-rancher-via-helm-in-rrivate-kubernetes-with-custom-domain-configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本指南将帮助您在 192.168.31.222 的内网服务器上，使用 Helm 安装 Rancher，并通过域名 rancher.damingerdaiinternal.com 访问。  </p><h2 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1. 前提条件"></a>1. 前提条件</h2><p>✅ 已部署 Kubernetes 集群（单节点或多节点均可）<br>✅ 已安装 kubectl 和 Helm 3<br>✅ 已配置 DNS 或 Hosts 解析（确保 rancher.damingerdaiinternal.com 指向 192.168.31.222）<br>✅ 服务器开放 80 和 443 端口  </p><h2 id="2-安装-cert-manager（用于证书管理）"><a href="#2-安装-cert-manager（用于证书管理）" class="headerlink" title="2. 安装 cert-manager（用于证书管理）"></a>2. 安装 cert-manager（用于证书管理）</h2><p>Rancher 依赖 cert-manager 管理 TLS 证书。</p><h3 id="2-1-安装-cert-manager-CRD"><a href="#2-1-安装-cert-manager-CRD" class="headerlink" title="2.1 安装 cert-manager CRD"></a>2.1 安装 cert-manager CRD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml</span><br></pre></td></tr></table></figure><h3 id="2-2-添加-Helm-仓库并安装-cert-manager"><a href="#2-2-添加-Helm-仓库并安装-cert-manager" class="headerlink" title="2.2 添加 Helm 仓库并安装 cert-manager"></a>2.2 添加 Helm 仓库并安装 cert-manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line">helm repo update</span><br><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --version v1.11.0</span><br></pre></td></tr></table></figure><h3 id="2-3-验证-cert-manager-是否运行"><a href="#2-3-验证-cert-manager-是否运行" class="headerlink" title="2.3 验证 cert-manager 是否运行"></a>2.3 验证 cert-manager 是否运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n cert-manager get pods</span><br><span class="line"></span><br><span class="line">预期输出：</span><br><span class="line"></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-7dd5554b4-abc12               1/1     Running   0          1m</span><br><span class="line">cert-manager-cainjector-64dc9f6bff-xyz45   1/1     Running   0          1m</span><br><span class="line">cert-manager-webhook-5f4d8b7b8d-pqr78      1/1     Running   0          1m</span><br></pre></td></tr></table></figure><h2 id="3-生成自签名证书（适用于内网）"><a href="#3-生成自签名证书（适用于内网）" class="headerlink" title="3. 生成自签名证书（适用于内网）"></a>3. 生成自签名证书（适用于内网）</h2><p>由于是内网环境，我们使用自签名证书。</p><h3 id="3-1-生成-CA-根证书"><a href="#3-1-生成-CA-根证书" class="headerlink" title="3.1 生成 CA 根证书"></a>3.1 生成 CA 根证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes \</span><br><span class="line">  -keyout ca.key -out ca.crt -subj <span class="string">&quot;/CN=damingerdaiinternal.com CA&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-生成服务器证书"><a href="#3-2-生成服务器证书" class="headerlink" title="3.2 生成服务器证书"></a>3.2 生成服务器证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:4096 -sha256 -nodes \</span><br><span class="line">  -keyout tls.key -out tls.csr -subj <span class="string">&quot;/CN=rancher.damingerdaiinternal.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-使用-CA-签名服务器证书"><a href="#3-3-使用-CA-签名服务器证书" class="headerlink" title="3.3 使用 CA 签名服务器证书"></a>3.3 使用 CA 签名服务器证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -sha256 -days 3650 \</span><br><span class="line">  -<span class="keyword">in</span> tls.csr -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">  -out tls.crt -extfile &lt;(<span class="built_in">echo</span> <span class="string">&quot;subjectAltName=DNS:rancher.damingerdaiinternal.com&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-安装-Rancher"><a href="#4-安装-Rancher" class="headerlink" title="4. 安装 Rancher"></a>4. 安装 Rancher</h2><h3 id="4-1-创建命名空间"><a href="#4-1-创建命名空间" class="headerlink" title="4.1 创建命名空间"></a>4.1 创建命名空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace cattle-system</span><br></pre></td></tr></table></figure><h3 id="4-2-创建-Kubernetes-Secret-存储证书"><a href="#4-2-创建-Kubernetes-Secret-存储证书" class="headerlink" title="4.2 创建 Kubernetes Secret 存储证书"></a>4.2 创建 Kubernetes Secret 存储证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n cattle-system create secret tls tls-rancher-ingress \</span><br><span class="line">  --cert=tls.crt --key=tls.key</span><br><span class="line">kubectl -n cattle-system create secret generic tls-ca \</span><br><span class="line">  --from-file=ca.crt</span><br></pre></td></tr></table></figure><h3 id="4-3-添加-Rancher-Helm-仓库"><a href="#4-3-添加-Rancher-Helm-仓库" class="headerlink" title="4.3 添加 Rancher Helm 仓库"></a>4.3 添加 Rancher Helm 仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo add rancher-stable https://releases.rancher.com/server-charts/stable</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><h3 id="4-4-使用-Helm-安装-Rancher"><a href="#4-4-使用-Helm-安装-Rancher" class="headerlink" title="4.4 使用 Helm 安装 Rancher"></a>4.4 使用 Helm 安装 Rancher</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">helm install rancher rancher-stable/rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --<span class="built_in">set</span> hostname=rancher.damingerdaiinternal.com \</span><br><span class="line">  --<span class="built_in">set</span> bootstrapPassword=admin \</span><br><span class="line">  --<span class="built_in">set</span> ingress.tls.source=secret \</span><br><span class="line">  --<span class="built_in">set</span> privateCA=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">set</span> replicas=1</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">NAME: rancher</span><br><span class="line">LAST DEPLOYED: Sun Aug 17 14:37:32 2025</span><br><span class="line">NAMESPACE: cattle-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">Rancher Server has been installed.</span><br><span class="line"></span><br><span class="line">NOTE: Rancher may take several minutes to fully initialize. Please standby <span class="keyword">while</span> Certificates are being issued, Containers are started and the Ingress rule comes up.</span><br><span class="line"></span><br><span class="line">Check out our docs at https://rancher.com/docs/</span><br><span class="line"></span><br><span class="line">If you provided your own bootstrap password during installation, browse to https://rancher.damingerdaiinternal.com to get started.</span><br><span class="line"></span><br><span class="line">If this is the first time you installed Rancher, get started by running this <span class="built_in">command</span> and clicking the URL it generates:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> https://rancher.damingerdaiinternal.com/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">To get just the bootstrap password on its own, run:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123; &quot;\n&quot; &#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-配置-DNS-Hosts-解析"><a href="#5-配置-DNS-Hosts-解析" class="headerlink" title="5. 配置 DNS &#x2F; Hosts 解析"></a>5. 配置 DNS &#x2F; Hosts 解析</h2><h3 id="5-1-方案-A：内网-DNS-服务器"><a href="#5-1-方案-A：内网-DNS-服务器" class="headerlink" title="5.1 方案 A：内网 DNS 服务器"></a>5.1 方案 A：内网 DNS 服务器</h3><p>在 DNS 服务器（如 Bind、Windows DNS）中添加：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rancher.damingerdaiinternal.com. IN A 192.168.31.222</span><br></pre></td></tr></table></figure><h3 id="5-2-方案-B：客户端-Hosts-文件"><a href="#5-2-方案-B：客户端-Hosts-文件" class="headerlink" title="5.2 方案 B：客户端 Hosts 文件"></a>5.2 方案 B：客户端 Hosts 文件</h3><p>在需要访问的电脑上修改 &#x2F;etc&#x2F;hosts（Linux&#x2F;macOS）或 C:\Windows\System32\drivers\etc\hosts（Windows）：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.31.222 rancher.damingerdaiinternal.com</span><br></pre></td></tr></table></figure><h2 id="6-验证安装"><a href="#6-验证安装" class="headerlink" title="6. 验证安装"></a>6. 验证安装</h2><h3 id="6-1-检查-Rancher-Pod-状态"><a href="#6-1-检查-Rancher-Pod-状态" class="headerlink" title="6.1 检查 Rancher Pod 状态"></a>6.1 检查 Rancher Pod 状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n cattle-system get pods -l app=rancher</span><br><span class="line"></span><br><span class="line">预期输出：</span><br><span class="line"></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">rancher-5d8f6c9b8-abc12   1/1     Running   0          2m</span><br></pre></td></tr></table></figure><h3 id="6-2-查看-Ingress-配置"><a href="#6-2-查看-Ingress-配置" class="headerlink" title="6.2 查看 Ingress 配置"></a>6.2 查看 Ingress 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n cattle-system get ingress</span><br><span class="line"></span><br><span class="line">预期输出：</span><br><span class="line"></span><br><span class="line">NAME      HOSTS                              ADDRESS        PORTS</span><br><span class="line">rancher   rancher.damingerdaiinternal.com    192.168.31.222 80, 443</span><br></pre></td></tr></table></figure><h3 id="6-3-访问-Rancher-UI"><a href="#6-3-访问-Rancher-UI" class="headerlink" title="6.3 访问 Rancher UI"></a>6.3 访问 Rancher UI</h3><p>在浏览器打开：</p><p><a href="https://rancher.damingerdaiinternal.com/">https://rancher.damingerdaiinternal.com</a></p><p>• 首次登录：用户名 admin，密码 admin  </p><p>• 证书警告：由于是自签名证书，浏览器会提示不安全，手动信任即可  </p><h2 id="7-卸载-Rancher"><a href="#7-卸载-Rancher" class="headerlink" title="7. 卸载 Rancher"></a>7. 卸载 Rancher</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall rancher -n cattle-system</span><br><span class="line">kubectl delete namespace cattle-system</span><br><span class="line">kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml</span><br></pre></td></tr></table></figure><h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8. 常见问题"></a>8. 常见问题</h2><h3 id="Q1-访问时提示-“证书不受信任”"><a href="#Q1-访问时提示-“证书不受信任”" class="headerlink" title="Q1: 访问时提示 “证书不受信任”"></a>Q1: 访问时提示 “证书不受信任”</h3><p>✅ 解决方案：<br>• Windows：双击 ca.crt 并安装到 “受信任的根证书颁发机构”  </p><p>• Linux&#x2F;macOS：<br>  sudo cp ca.crt &#x2F;usr&#x2F;local&#x2F;share&#x2F;ca-certificates&#x2F;<br>  sudo update-ca-certificates</p><h3 id="Q2-Rancher-Pod-无法启动"><a href="#Q2-Rancher-Pod-无法启动" class="headerlink" title="Q2: Rancher Pod 无法启动"></a>Q2: Rancher Pod 无法启动</h3><p>✅ 检查日志：<br>kubectl -n cattle-system logs -f deployment&#x2F;rancher</p><p>✅ 检查资源是否足够（Rancher 至少需要 2GB 内存）：<br>kubectl describe nodes</p><h3 id="Q3-外网无法访问"><a href="#Q3-外网无法访问" class="headerlink" title="Q3: 外网无法访问"></a>Q3: 外网无法访问</h3><p>✅ 检查防火墙：<br>sudo ufw allow 80&#x2F;tcp<br>sudo ufw allow 443&#x2F;tcp</p><p>✅ 如果是云服务器，检查安全组规则  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>✅ 已完成：<br>• 使用 Helm 安装 Rancher  </p><p>• 配置自签名证书  </p><p>• 支持域名 rancher.damingerdaiinternal.com 访问  </p><p>• 验证 HTTPS 安全性  </p><p>现在，您可以通过 <a href="https://rancher.damingerdaiinternal.com/">https://rancher.damingerdaiinternal.com</a> 访问 Rancher 管理 Kubernetes 集群！ 🎉</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Helm </tag>
            
            <tag> Rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用中国手机号码验证mailgun账号</title>
      <link href="/2025/08/13/software/how-register-mailgun-with-china-mobile-number/"/>
      <url>/2025/08/13/software/how-register-mailgun-with-china-mobile-number/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Mailgun 是一个专为开发者设计的邮件发送平台，支持通过 API 高效、稳定地发送和接收邮件。它广泛用于用户通知、营销邮件、自动化开发信等场景。每个月可免费发送10000封邮件，可以添加1000个域名，每封邮件都有跟踪日志，简单明了的管理界面。</p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>点 mailgun.com 右上角的“start for free“进去是不会给免费版选项的，只有 free trial，而 <a href="https://www.mailgun.com/pricing/">https://www.mailgun.com/pricing/</a> 页面则有免费 plan，常规注册即可，无需填写信用卡.</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>mailgun会发送邮件要求验证号码。在验证页面会要求用户提供手机号验证。但是对中国手机号码来说，可能存在收不到验证码的可能。</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/mailgun-validate-error.png" alt="mailgun验证码失败"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在mailgun后台，点击右上角的问号❓，点击“Support”按钮。提交一个工单，点击左下方“Open a ticket”的开工单按钮。在开工单页面下拉选择“Account Management”类别，然后输入问题标题和具体内容。</p><p>这是我总结的模版：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Subject: Unable to Verify Email Due to Excessive Verification</span><br><span class="line"></span><br><span class="line">Content:</span><br><span class="line">I am unable to complete email verification because I encountered an issue after entering my mobile phone number (+86 xxxxxxxxxxx) and requesting a verification code. The system notified me that I have exceeded the allowed number of attempts, along with other unspecified reminders.</span><br></pre></td></tr></table></figure><p>然后大概在24小时内就能解决。(我是40分钟就解决了)。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>别相信咸鱼上那帮所谓提供海外手机号码验证服务的那帮垃圾。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://www.jiadingqiang.com/31941.html">Mailgun账号注册、域名配置、API开通教程</a></li><li><a href="https://mailgun-china.com/">Mailgun China</a></li><li><a href="https://zhuanlan.zhihu.com/p/685968877">国外Mailgun邮件服务账号验证不成功怎么办</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mailgun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>podman登录非https的私有仓库</title>
      <link href="/2025/08/11/back-end/podman-login-nohttps-private-registery/"/>
      <url>/2025/08/11/back-end/podman-login-nohttps-private-registery/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文的目的是为了解决podman登陆非https的私有仓库。<br>这里使用192.168.31.220:5000威力</p><h1 id="方案1：禁用-TLS-验证（临时解决方案）"><a href="#方案1：禁用-TLS-验证（临时解决方案）" class="headerlink" title="方案1：禁用 TLS 验证（临时解决方案）"></a>方案1：禁用 TLS 验证（临时解决方案）</h1><p>对于测试环境或内部信任的网络，可以临时禁用 TLS 验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman login --tls-verify=<span class="literal">false</span> 192.168.31.220:5000</span><br></pre></td></tr></table></figure><blockquote><p>注意：生产环境不建议禁用 TLS 验证，这会降低安全性。</p></blockquote><h1 id="方案2-配置仓库为不安全仓库"><a href="#方案2-配置仓库为不安全仓库" class="headerlink" title="方案2: 配置仓库为不安全仓库"></a>方案2: 配置仓库为不安全仓库</h1><p>编辑 &#x2F;etc&#x2F;containers&#x2F;registries.conf文件，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[registry]]</span><br><span class="line">location = <span class="string">&quot;192.168.31.220:5000&quot;</span></span><br><span class="line">insecure = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="方案3：正确配置-HTTPS（生产环境推荐）"><a href="#方案3：正确配置-HTTPS（生产环境推荐）" class="headerlink" title="方案3：正确配置 HTTPS（生产环境推荐）"></a>方案3：正确配置 HTTPS（生产环境推荐）</h1><p>如果这是生产环境，建议为您的私有仓库配置正确的 HTTPS。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> podman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用systemd部署podman的容器</title>
      <link href="/2025/07/20/back-end/use-systemd-to-deploy-podman-build-by-podman/"/>
      <url>/2025/07/20/back-end/use-systemd-to-deploy-podman-build-by-podman/</url>
      
        <content type="html"><![CDATA[<h1 id="podman的问题"><a href="#podman的问题" class="headerlink" title="podman的问题"></a>podman的问题</h1><p>podman是一个容器运行时环境，提供与 Docker 非常相似的功能并不需要在你的系统上运行任何守护进程。没有守护进程就意味着如果你想使用podman部署容器，是没有办法使用类似docker的方式去实现自动重启功能。如果使用k8s部署容器那问题不大，如果就纯容器部署，可以使用podman给出的方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">podman generate systemd --<span class="built_in">help</span></span><br><span class="line">[DEPRECATED] Generate systemd units</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  Generate systemd units <span class="keyword">for</span> a pod or container.</span><br><span class="line">  The generated units can later be controlled via systemctl(1).</span><br><span class="line"></span><br><span class="line">DEPRECATED <span class="built_in">command</span>:</span><br><span class="line">It is recommended to use Quadlets <span class="keyword">for</span> running containers and pods under systemd.</span><br><span class="line"></span><br><span class="line">Please refer to podman-systemd.unit(5) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  podman generate systemd [options] &#123;CONTAINER|POD&#125;</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  podman generate systemd CTR</span><br><span class="line">  podman generate systemd --new --time 10 CTR</span><br><span class="line">  podman generate systemd --files --name POD</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --after stringArray         Add dependencies order to the generated unit file</span><br><span class="line">      --container-prefix string   Systemd unit name prefix <span class="keyword">for</span> containers (default <span class="string">&quot;container&quot;</span>)</span><br><span class="line">  -e, --<span class="built_in">env</span> stringArray           Set environment variables to the systemd unit files</span><br><span class="line">  -f, --files                     Generate .service files instead of printing to stdout</span><br><span class="line">      --format string             Print the created units <span class="keyword">in</span> specified format (json)</span><br><span class="line">  -n, --name                      Use container/pod names instead of IDs</span><br><span class="line">      --new                       Create a new container or pod instead of starting an existing one</span><br><span class="line">      --no-header                 Skip header generation</span><br><span class="line">      --pod-prefix string         Systemd unit name prefix <span class="keyword">for</span> pods (default <span class="string">&quot;pod&quot;</span>)</span><br><span class="line">      --requires stringArray      Similar to wants, but declares stronger requirement dependencies</span><br><span class="line">      --restart-policy string     Systemd restart-policy (default <span class="string">&quot;on-failure&quot;</span>)</span><br><span class="line">      --restart-sec uint          Systemd restart-sec</span><br><span class="line">      --separator string          Systemd unit name separator between name/id and prefix (default <span class="string">&quot;-&quot;</span>)</span><br><span class="line">      --start-timeout uint        Start <span class="built_in">timeout</span> override</span><br><span class="line">      --stop-timeout uint         Stop <span class="built_in">timeout</span> override (default 10)</span><br><span class="line">      --template                  Make it a template file and use %i and %I specifiers. Working only <span class="keyword">for</span> containers</span><br><span class="line">      --wants stringArray         Add (weak) requirement dependencies to the generated unit file</span><br></pre></td></tr></table></figure><h1 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h1><p>systemd是Linux系统的一套基本构建模块。它提供了一个系统和服务管理器，作为PID 1运行并启动系统的其余部分。systemd是在引导期间启动的第一个守护进程，也是在关闭期间终止的最后一个守护进程。利用这个特性，可以使用systemd去监控容器的运行状态</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>这里使用<a href="https://github.com/damingerdai/health-master">health-master</a>作为例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取名为 health-master 的容器 ID</span></span><br><span class="line">CONTAINER_ID=$(podman ps -a --filter <span class="string">&quot;name=health-master&quot;</span> --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$CONTAINER_ID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;未找到名为 health-master 的容器。&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;找到容器 health-master，ID 为 <span class="variable">$CONTAINER_ID</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务文件的存储路径</span></span><br><span class="line">SERVICE_FILE_PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.config/systemd/user&quot;</span></span><br><span class="line"></span><br><span class="line">SERVICE_NAME=<span class="string">&quot;podman-health-master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 podman generate systemd 创建服务文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在生成 systemd 服务文件...&quot;</span></span><br><span class="line">podman generate systemd --name --restart-policy=on-failure -t 10 <span class="string">&quot;<span class="variable">$CONTAINER_ID</span>&quot;</span> &gt;<span class="string">&quot;<span class="variable">$SERVICE_FILE_PATH</span>/<span class="variable">$SERVICE_NAME</span>.service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;错误: 无法生成 <span class="variable">$SERVICE_NAME</span> 服务。&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复 SELinux 上下文（如启用 SELinux）</span></span><br><span class="line">restorecon -RvF <span class="string">&quot;<span class="variable">$SERVICE_FILE_PATH</span>/<span class="variable">$SERVICE_NAME</span>.service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用用户级 systemd 支持（首次需运行）</span></span><br><span class="line">loginctl enable-linger <span class="string">&quot;<span class="variable">$USER</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 systemd 配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;重新加载 systemd 配置...&quot;</span></span><br><span class="line">systemctl --user daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;错误: 无法重新加载 systemd 配置。&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;启用服务 <span class="variable">$SERVICE_NAME</span>...&quot;</span></span><br><span class="line">systemctl --user <span class="built_in">enable</span> --now <span class="string">&quot;<span class="variable">$SERVICE_NAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;错误: 无法启用服务 <span class="variable">$SERVICE_NAME</span>。&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;启动服务 <span class="variable">$SERVICE_NAME</span>...&quot;</span></span><br><span class="line">systemctl --user start <span class="string">&quot;<span class="variable">$SERVICE_NAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;错误: 无法启动服务 <span class="variable">$SERVICE_NAME</span>。&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;服务 <span class="variable">$SERVICE_NAME</span> 已成功创建并启动。&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你现在可以使用以下命令管理服务:&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  systemctl --user status <span class="variable">$SERVICE_NAME</span>  # 查看服务状态&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  systemctl --user stop <span class="variable">$SERVICE_NAME</span>    # 停止服务&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  systemctl --user restart <span class="variable">$SERVICE_NAME</span> # 重启服务&quot;</span></span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>podman generate systemd在podman 4.4的时候就已经弃用了，目前推荐使用<a href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html">Quadlet</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/47706426">使用 Podman 以非 root 用户身份运行 Linux 容器</a></li><li><a href="https://systemd.io/">System and Service Manager</a></li><li><a href="https://segmentfault.com/a/1190000044854265">Linux Systemd基础教程</a></li><li><a href="https://github.com/containers/podman/discussions/20218">How to replace the “podman generate systemd” command since its deprecated</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> podman </tag>
            
            <tag> 容器 </tag>
            
            <tag> systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在spring中使用gmail发送邮件</title>
      <link href="/2025/06/22/back-end/send-mail-with-gmail-and-spring/"/>
      <url>/2025/06/22/back-end/send-mail-with-gmail-and-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="申请gmail的应用专用密码"><a href="#申请gmail的应用专用密码" class="headerlink" title="申请gmail的应用专用密码"></a>申请gmail的应用专用密码</h1><p>首先你需要一个gmail账号，然后才能申请gmail的应用专用密码。</p><p>想要申请应用专用密码必须开启两步验证：</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/back-end/gmail-two-step-vertify.png" alt="开启两步验证页面"></p><p>google似乎默认并不想让用户直接创建应用专用密码，需要通过右上角搜索框输入“应用专用密码”才能进入相关页面。如果使用英文页面则搜索“App Password”。</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/back-end/search-app-password-gmail.png" alt="搜索应用专用密码"></p><p>然后你就可以创建“应用专用密码”</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/back-end/create-app-password-in-gmail.png" alt="创建“应用专用密码”"></p><p>保存密码，gmail仅仅会显示这一次。</p><h1 id="使用spring发送邮件"><a href="#使用spring发送邮件" class="headerlink" title="使用spring发送邮件"></a>使用spring发送邮件</h1><p>这里实际使用的是spring boot。</p><p>导入<em>spring-boot-starter-mail</em>:</p><p>对于maven用户：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于gradle用户：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-mail:$&#123;spring-boot-version&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.gmail.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">587</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">pollardsmithal899@gmail.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;your app password&#x27;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最后可以使用JavaMailSenderImpl发送邮件了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">dvar</span> <span class="variable">message</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line"><span class="type">var</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">helper.setTo(<span class="string">&quot;mingguobin@live.com&quot;</span>);</span><br><span class="line">helper.setSubject(<span class="string">&quot;batcher support&quot;</span>);</span><br><span class="line">helper.setText(<span class="string">&quot;hello, this is batcher&quot;</span>);</span><br><span class="line">javaMailSender.send(message);</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://support.google.com/accounts/answer/185833">使用应用专用密码登录</a></li><li><a href="https://shallowsky.com/blog/tech/email/gmail-app-passwds.html">Gmail with an App Password</a></li><li><a href="https://www.baeldung.com/spring-email">Guide to Spring Email</a></li><li><a href="https://medium.com/tuanhdotnet/tips-for-sending-mail-from-a-spring-boot-application-using-google-as-mail-server-fcf5ab042594">使用 Google 作为邮件服务器从 Spring Boot 应用程序发送邮件的技巧</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>noice.nvim在cmdline中的光标自动滚动到最前面的bug</title>
      <link href="/2025/05/22/software/noice-nvim-cmdline-cursor-auto-scroll-to-front-bug/"/>
      <url>/2025/05/22/software/noice-nvim-cmdline-cursor-auto-scroll-to-front-bug/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最新把 neovim 升级到最新版本<a href="https://github.com/neovim/neovim/releases/tag/v0.11.1">0.11.1</a>,lazyvim 升级到<a href="https://www.lazyvim.org/news#14x">14.x</a>。然后不出意外就挂了好几个 plugin。其中 noice.nvim 是影响比较小的但比较膈应人的。</p><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><video src="https://private-user-images.githubusercontent.com/16384908/443705864-b981f9d2-17c7-452b-8fae-916b5a2dfbf2.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDc5MjM0MzEsIm5iZiI6MTc0NzkyMzEzMSwicGF0aCI6Ii8xNjM4NDkwOC80NDM3MDU4NjQtYjk4MWY5ZDItMTdjNy00NTJiLThmYWUtOTE2YjVhMmRmYmYyLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA1MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNTIyVDE0MTIxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQwZTk2YmRmOTY4MDRhYjk0MDNmMzgyMzI3YjliZGNkMTQ1NmUwYWE0NDc0YTBjODA0MzMwY2ZlYjRjNWNjYTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.lhQ_rFTJKjP7UErvMKu2B4vLRQpXY7j3hYhzJ6AjWfw" data-canonical-src="https://private-user-images.githubusercontent.com/16384908/443705864-b981f9d2-17c7-452b-8fae-916b5a2dfbf2.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDc5MjM0MzEsIm5iZiI6MTc0NzkyMzEzMSwicGF0aCI6Ii8xNjM4NDkwOC80NDM3MDU4NjQtYjk4MWY5ZDItMTdjNy00NTJiLThmYWUtOTE2YjVhMmRmYmYyLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA1MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNTIyVDE0MTIxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQwZTk2YmRmOTY4MDRhYjk0MDNmMzgyMzI3YjliZGNkMTQ1NmUwYWE0NDc0YTBjODA0MzMwY2ZlYjRjNWNjYTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.lhQ_rFTJKjP7UErvMKu2B4vLRQpXY7j3hYhzJ6AjWfw" controls="controls" muted="muted" class="d-block rounded-bottom-2 border-top width-fit" style="max-height:640px; min-height: 200px"></video><p>当在cmdline模式输入命令的时候光标总是会莫名其妙的滚动到最前面。我本来以为是noice.nvim的问题，但是经过测试，发现只有在itermn2的非全屏模式下才会出现，全屏模式或者其他终端模拟器则不会出现类似的问题。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>好在<a href="https://github.com/folke/noice.nvim/issues/923#issuecomment-2898259739">bug: Cursor jumps in cmdline - 4.5.0</a>中有小哥也遇到过类似的问题，他在iTerm2中禁用”由会话触发的窗口调整大小”功能解决了这个问题（设置路径：Settings &gt; Profiles &gt; [我的配置文件] &gt; Terminal &gt; 勾选”Disable session-initiated window resizing”），然后就好了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在<a href="https://superuser.com/questions/113944/how-to-prevent-screen-from-resizing-my-terminal-in-mac-os-x">https://superuser.com/questions/113944/how-to-prevent-screen-from-resizing-my-terminal-in-mac-os-x</a>, 看上去iterm2的这个bug存在挺久的了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> iterm2 </tag>
            
            <tag> nocie.nvim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows系统中如何给rust如何配置字节源</title>
      <link href="/2025/04/30/back-end/rust-bytedance-mirror-windows/"/>
      <url>/2025/04/30/back-end/rust-bytedance-mirror-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="rust中如何配置字节源"><a href="#rust中如何配置字节源" class="headerlink" title="rust中如何配置字节源"></a>rust中如何配置字节源</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文的目的是在windows上安装或更新rust的时候通过配置字节的国内源来提高安装&#x2F;更新速度。非windows系统就可以直接参考<a href="https://rsproxy.cn/">rsproxy</a></p><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>在powershell中设置 Rustup 镜像</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ENV:RUSTUP_DIST_SERVER</span>=<span class="string">&#x27;https://rsproxy.cn&#x27;</span></span><br><span class="line"><span class="variable">$ENV:RUSTUP_UPDATE_ROOT</span>=<span class="string">&#x27;https://rsproxy.cn/rustup&#x27;</span></span><br></pre></td></tr></table></figure><p>安装或者更新Rust</p><p>如果是安装rust，直接点击<code>rust-init.exe</code></p><p>如果是更新rust，直接运行rustup update命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup update</span><br></pre></td></tr></table></figure><h2 id="设置-crates-io-镜像"><a href="#设置-crates-io-镜像" class="headerlink" title="设置 crates.io 镜像"></a>设置 crates.io 镜像</h2><p>在当前用户的主目录（以我本地为例：D:\Users\daming）下的<code>.cargo</code>文件夹中创建<code>config</code>文件。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[source.crates-io]</span></span><br><span class="line"><span class="attr">replace-with</span> = <span class="string">&#x27;rsproxy-sparse&#x27;</span></span><br><span class="line"><span class="section">[source.rsproxy]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;https://rsproxy.cn/crates.io-index&quot;</span></span><br><span class="line"><span class="section">[source.rsproxy-sparse]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;sparse+https://rsproxy.cn/index/&quot;</span></span><br><span class="line"><span class="section">[registries.rsproxy]</span></span><br><span class="line"><span class="attr">index</span> = <span class="string">&quot;https://rsproxy.cn/crates.io-index&quot;</span></span><br><span class="line"><span class="section">[net]</span></span><br><span class="line"><span class="attr">git-fetch-with-cli</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://rsproxy.cn/">rsproxy</a></li><li><a href="https://www.sunzhongwei.com/windows-11-install-rust-with-china-mirror">Windows 11 上通过国内源安装 Rust</a></li><li><a href="https://www.cnblogs.com/manqing321/p/17026725.html">rustup-init.exe 安装失败及其解决方案</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用apache commons-csv读写csv文件</title>
      <link href="/2025/04/07/back-end/use-apache-commons-csv-read-write-files/"/>
      <url>/2025/04/07/back-end/use-apache-commons-csv-read-write-files/</url>
      
        <content type="html"><![CDATA[<h1 id="使用apache-commons-csv读写csv文件"><a href="#使用apache-commons-csv读写csv文件" class="headerlink" title="使用apache commons-csv读写csv文件"></a>使用apache commons-csv读写csv文件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文的目的是使用<a href="https://commons.apache.org/proper/commons-csv/">apache commons-csv</a>读写csv文件。</p><h2 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h2><p>Worker是通过ai随机定义的一个java类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String employeeNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过<a href="https://github.com/DiUS/java-faker">faker</a>随机生成Worker类型的对象。具体实现可以查看下文。</p><h2 id="Apache-Commons-CSV"><a href="#Apache-Commons-CSV" class="headerlink" title="Apache Commons CSV"></a>Apache Commons CSV</h2><p>Commons CSV 能够读写多种变体的逗号分隔值（CSV）格式文件，由Apache负责开发。</p><p>使用maven引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-csv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用groovy gradle引入：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.apache.commons:commons-csv:1.14.0&#x27;</span></span><br></pre></td></tr></table></figure><p>使用kotlin：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.apache.commons:commons-csv:1.14.0&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="写csv文件"><a href="#写csv文件" class="headerlink" title="写csv文件"></a>写csv文件</h3><p>先创建好文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> nfsRootPath + File.separator + <span class="string">&quot;workers_&quot;</span> + DateUtils.getYearMonthDay() + <span class="string">&quot;.csv&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nfsRootPath为<code>$&#123;user.dir&#125;/nfs-root</code>， DateUtils.getYearMonthDay()表示获取当前年月日（yyyy-MM-dd）。</p><p>CSVFormat是<code>apache commons csv</code>中用于指定CSV文件解析及写入的格式规范。</p><p><code>commons csv</code>内置了12种格式的支持：</p><ol><li>DEFAULT: 标准逗号分隔值（CSV）格式，遵循<a href="https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVFormat.html#RFC4180">RFC4180规范</a>，但允许空行存在</li><li>EXCEL: <a href="https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba">微软Excel文件格式</a>（使用逗号作为值分隔符）</li><li>INFORMIX_UNLOAD: <a href="https://www.ibm.com/docs/en/informix-servers/14.10.0?topic=statements-unload-statement">Informix 默认 CSV 导出格式</a>（通过 UNLOAD TO file_name 操作生成）</li><li>INFORMIX_UNLOAD_CSV: <a href="https://www.ibm.com/docs/en/informix-servers/14.10?topic=statements-unload-statement">Informix 默认 CSV 导出格式</a>（通过 UNLOAD TO file_name 操作生成，禁用转义功能）</li><li>MONGODB_CSV: MongoDB 默认 CSV 格式（通过 mongoexport 命令导出使用）</li><li>MONGODB_TSV: MongoDB 默认 TSV 格式（通过 mongoexport 命令导出使用）</li><li>MYSQL:<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump-delimited-text.html">MySQL</a> 默认数据格式（通过 SELECT INTO OUTFILE 和 LOAD DATA INFILE 命令使用）</li><li>ORACLE: <a href="https://docs.oracle.com/en/database/oracle/oracle-database/23/sutil/oracle-sql-loader-control-file-contents.html#GUID-D1762699-8154-40F6-90DE-EFB8EB6A9AB0">Oracle</a> 默认数据格式（通过 SQL*Loader 工具使用）</li><li>POSTGRESQL_CSV: <a href="https://www.postgresql.org/docs/current/static/sql-copy.html">PostgreSQL默认 CSV 格式</a>（通过 COPY 命令操作使用）</li><li>POSTGRESQL_TEXT: <a href="https://www.postgresql.org/docs/current/static/sql-copy.html">PostgreSQL默认文本格式</a>（通过 COPY 命令使用）</li><li>RFC4180: <a href="https://tools.ietf.org/html/rfc4180">RFC 4180</a> 标准定义的逗号分隔值（CSV）格式</li><li>TDF: <a href="https://en.wikipedia.org/wiki/Tab-separated_values">制表符分隔格式</a>（TDF）</li></ol><p>这里使用DEFAULT的csv format：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">    <span class="string">&quot;employee_number&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>,</span><br><span class="line">    <span class="string">&quot;department&quot;</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hire_date&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone_number&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">var</span> <span class="variable">csvFormat</span> <span class="operator">=</span> CSVFormat.DEFAULT.builder().setHeader(headers).get();</span><br></pre></td></tr></table></figure><p>利用BufferedWriter和CSVPrinter将Worker对象写入csv文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(path); <span class="type">var</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw)) &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">csvPrinter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CSVPrinter</span>(bw, csvFormat);</span><br><span class="line">    <span class="type">var</span> <span class="variable">format</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">workers</span> <span class="operator">=</span> WorkerMockFactory.createWorkers(<span class="number">100</span>);</span><br><span class="line">    workers.forEach(worker -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            csvPrinter.printRecord(</span><br><span class="line">                worker.getEmployeeNumber(),</span><br><span class="line">                worker.getVersion(),</span><br><span class="line">                worker.getLastName(),</span><br><span class="line">                worker.getFirstName(),</span><br><span class="line">                worker.getGender(),</span><br><span class="line">                worker.getDepartment(),</span><br><span class="line">                worker.getPosition(),</span><br><span class="line">                worker.getHireDate().format(format),</span><br><span class="line">                worker.getEmail(),</span><br><span class="line">                worker.getPhoneNumber(),</span><br><span class="line">                worker.getStatus()</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读csv文件"><a href="#读csv文件" class="headerlink" title="读csv文件"></a>读csv文件</h3><p>CSVFormat除了可以用于写csv文件之外，还可以用于读csv文件。</p><p>先获取文件路径并判断文件是否存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> nfsRootPath + File.separator + <span class="string">&quot;workers_20250406.csv&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSVFormat提供parse方法读取实现任意实现Reader接口的对象，这里我使用FileReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(path)) &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">records</span> <span class="operator">=</span> csvFormat.parse(in);</span><br><span class="line">    <span class="type">var</span> <span class="variable">format</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">workers</span> <span class="operator">=</span> records.stream().map(record -&gt; &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        worker.setEmployeeNumber(record.get(<span class="string">&quot;employee_number&quot;</span>));</span><br><span class="line">        <span class="type">var</span> <span class="variable">version</span> <span class="operator">=</span> record.get(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            worker.setVersion(Integer.parseInt(version));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        worker.setLastName(record.get(<span class="string">&quot;last_name&quot;</span>));</span><br><span class="line">        worker.setFirstName(record.get(<span class="string">&quot;first_name&quot;</span>));</span><br><span class="line">        worker.setGender(record.get(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">        worker.setDepartment(record.get(<span class="string">&quot;department&quot;</span>));</span><br><span class="line">        worker.setPosition(record.get(<span class="string">&quot;position&quot;</span>));</span><br><span class="line">        <span class="type">var</span> <span class="variable">hiredDate</span> <span class="operator">=</span> record.get(<span class="string">&quot;hire_date&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(hiredDate) &amp;&amp; StringUtils.isNoneBlank(hiredDate)) &#123;</span><br><span class="line">            worker.setHireDate(LocalDate.parse(hiredDate, format));</span><br><span class="line">        &#125;</span><br><span class="line">        worker.setEmail(record.get(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">        worker.setPhoneNumber(record.get(<span class="string">&quot;phone_number&quot;</span>));</span><br><span class="line">        worker.setStatus(record.get(<span class="string">&quot;status&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> worker;</span><br><span class="line">    &#125;).toList();</span><br><span class="line">    System.out.println(<span class="string">&quot;workers sum: &quot;</span> + workers.size());</span><br><span class="line">    workers.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.github.damingerdai.batcher.pojo.Worker@7b7b1448[id=&lt;null&gt;,employeeNumber=WK4745-87688,version=1,lastName=Schroeder,firstName=Anisha,gender=female,department=DevOps,position=Architect,hireDate=2021-06-30,email=anisha.schroeder@prohaska.net,phoneNumber=18878513958,status=probation]</span><br><span class="line">com.github.damingerdai.batcher.pojo.Worker@14624acc[id=&lt;null&gt;,employeeNumber=WK0980-74595,version=3,lastName=Schmidt,firstName=Isaias,gender=female,department=R&amp;D,position=Junior Developer,hireDate=2021-10-19,email=isaias.schmidt@gottlieb.biz,phoneNumber=14535433286,status=resigned]</span><br></pre></td></tr></table></figure><h2 id="Faker"><a href="#Faker" class="headerlink" title="Faker"></a>Faker</h2><p>faker移植自Ruby的faker gem（以及Perl的Data::Faker模块），能够生成仿真数据。</p><p>针对中国格式的手机号码，可以使用如下代码随机生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaPhoneNumberGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中国运营商号段（2023年最新）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; PREFIXES = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;130&quot;</span>, <span class="string">&quot;131&quot;</span>, <span class="string">&quot;132&quot;</span>, <span class="string">&quot;133&quot;</span>, <span class="string">&quot;134&quot;</span>, <span class="string">&quot;135&quot;</span>, <span class="string">&quot;136&quot;</span>, <span class="string">&quot;137&quot;</span>, <span class="string">&quot;138&quot;</span>, <span class="string">&quot;139&quot;</span>,</span><br><span class="line">            <span class="string">&quot;145&quot;</span>, <span class="string">&quot;146&quot;</span>, <span class="string">&quot;147&quot;</span>, <span class="string">&quot;148&quot;</span>, <span class="string">&quot;149&quot;</span>,</span><br><span class="line">            <span class="string">&quot;150&quot;</span>, <span class="string">&quot;151&quot;</span>, <span class="string">&quot;152&quot;</span>, <span class="string">&quot;153&quot;</span>, <span class="string">&quot;155&quot;</span>, <span class="string">&quot;156&quot;</span>, <span class="string">&quot;157&quot;</span>, <span class="string">&quot;158&quot;</span>, <span class="string">&quot;159&quot;</span>,</span><br><span class="line">            <span class="string">&quot;165&quot;</span>, <span class="string">&quot;166&quot;</span>, <span class="string">&quot;167&quot;</span>, <span class="string">&quot;168&quot;</span>, <span class="string">&quot;169&quot;</span>,</span><br><span class="line">            <span class="string">&quot;170&quot;</span>, <span class="string">&quot;171&quot;</span>, <span class="string">&quot;172&quot;</span>, <span class="string">&quot;173&quot;</span>, <span class="string">&quot;174&quot;</span>, <span class="string">&quot;175&quot;</span>, <span class="string">&quot;176&quot;</span>, <span class="string">&quot;177&quot;</span>, <span class="string">&quot;178&quot;</span>, <span class="string">&quot;179&quot;</span>,</span><br><span class="line">            <span class="string">&quot;180&quot;</span>, <span class="string">&quot;181&quot;</span>, <span class="string">&quot;182&quot;</span>, <span class="string">&quot;183&quot;</span>, <span class="string">&quot;184&quot;</span>, <span class="string">&quot;185&quot;</span>, <span class="string">&quot;186&quot;</span>, <span class="string">&quot;187&quot;</span>, <span class="string">&quot;188&quot;</span>, <span class="string">&quot;189&quot;</span>,</span><br><span class="line">            <span class="string">&quot;190&quot;</span>, <span class="string">&quot;191&quot;</span>, <span class="string">&quot;192&quot;</span>, <span class="string">&quot;193&quot;</span>, <span class="string">&quot;194&quot;</span>, <span class="string">&quot;195&quot;</span>, <span class="string">&quot;196&quot;</span>, <span class="string">&quot;197&quot;</span>, <span class="string">&quot;198&quot;</span>, <span class="string">&quot;199&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常见显示格式（随机选择）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FORMATS = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;%s%s%s&quot;</span>          <span class="comment">// 13800138000</span></span><br><span class="line">            <span class="string">&quot;%s-%s-%s&quot;</span>,        <span class="comment">// 138-0013-8000</span></span><br><span class="line">            <span class="string">&quot;%s %s %s&quot;</span>,        <span class="comment">// 138 0013 8000</span></span><br><span class="line">            <span class="string">&quot;+86 %s%s%s&quot;</span>,      <span class="comment">// +86 13800138000</span></span><br><span class="line">            <span class="string">&quot;+86-%s-%s-%s&quot;</span>,    <span class="comment">// +86-138-0013-8000</span></span><br><span class="line">            <span class="string">&quot;0086 %s%s%s&quot;</span>      <span class="comment">// 0086 13800138000</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Faker</span> <span class="variable">faker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Faker</span>(Locale.CHINA);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成基础号码部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> PREFIXES.get(faker.random().nextInt(PREFIXES.size()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">middle</span> <span class="operator">=</span> String.format(<span class="string">&quot;%04d&quot;</span>, faker.number().numberBetween(<span class="number">0</span>, <span class="number">9999</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">tail</span> <span class="operator">=</span> String.format(<span class="string">&quot;%04d&quot;</span>, faker.number().numberBetween(<span class="number">0</span>, <span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机选择显示格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> FORMATS.get(faker.random().nextInt(FORMATS.size()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成最终号码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> String.format(format, prefix, middle, tail);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二次验证确保有效性</span></span><br><span class="line">        <span class="keyword">return</span> validate(phone) ? phone : generate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 严格验证手机号逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">// 统一去除格式符号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cleanNumber</span> <span class="operator">=</span> phone.replaceAll(<span class="string">&quot;[+\\- ()]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证长度和开头</span></span><br><span class="line">        <span class="keyword">if</span> (cleanNumber.startsWith(<span class="string">&quot;86&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cleanNumber.length() == <span class="number">13</span> &amp;&amp; cleanNumber.matches(<span class="string">&quot;^861[3-9]\\d&#123;9&#125;$&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cleanNumber.startsWith(<span class="string">&quot;0086&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cleanNumber.length() == <span class="number">14</span> &amp;&amp; cleanNumber.matches(<span class="string">&quot;^00861[3-9]\\d&#123;9&#125;$&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cleanNumber.length() == <span class="number">11</span> &amp;&amp; cleanNumber.matches(<span class="string">&quot;^1[3-9]\\d&#123;9&#125;$&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机生成Worker的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkerMockFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Faker</span> <span class="variable">faker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Faker</span>(Locale.ENGLISH);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FakeValuesService</span> <span class="variable">fakeValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FakeValuesService</span>(</span><br><span class="line">            Locale.of(<span class="string">&quot;en-US&quot;</span>), <span class="keyword">new</span> <span class="title class_">RandomService</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预定义枚举选项</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; GENDERS = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;male&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;other&quot;</span>, <span class="string">&quot;not_specified&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; STATUSES = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;active&quot;</span>, <span class="string">&quot;resigned&quot;</span>, <span class="string">&quot;on_leave&quot;</span>, <span class="string">&quot;probation&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部门与职位映射</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; TECH_DEPTS = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;R&amp;D&quot;</span>, <span class="string">&quot;DevOps&quot;</span>, <span class="string">&quot;QA&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; TECH_POSITIONS = Arrays.asList(</span><br><span class="line">            <span class="string">&quot;Junior Developer&quot;</span>, <span class="string">&quot;Senior Developer&quot;</span>, <span class="string">&quot;Tech Lead&quot;</span>, <span class="string">&quot;Architect&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Worker <span class="title function_">createWorker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成符合业务规则的工号 (示例: WK2024-00123)</span></span><br><span class="line">        worker.setEmployeeNumber(fakeValues.bothify(<span class="string">&quot;WK####-#####&quot;</span>).replaceAll(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用构建者模式设置字段</span></span><br><span class="line">        worker.setVersion(faker.random().nextInt(<span class="number">1</span>, <span class="number">5</span>)); <span class="comment">// 模拟历史版本</span></span><br><span class="line">        worker.setLastName(faker.name().lastName());</span><br><span class="line">        worker.setFirstName(faker.name().firstName());</span><br><span class="line">        worker.setGender(GENDERS.get(faker.random().nextInt(GENDERS.size())));</span><br><span class="line">        worker.setDepartment(faker.options().nextElement(TECH_DEPTS));</span><br><span class="line">        worker.setPosition(faker.options().nextElement(TECH_POSITIONS));</span><br><span class="line">        worker.setHireDate(generateHireDate());</span><br><span class="line">        worker.setEmail(generateCorporateEmail(worker));</span><br><span class="line">        worker.setPhoneNumber(ChinaPhoneNumberGenerator.generate()); <span class="comment">// 统一号码格式</span></span><br><span class="line">        worker.setStatus(faker.options().nextElement(STATUSES));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LocalDate <span class="title function_">generateHireDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> faker.date().past(<span class="number">365</span> * <span class="number">5</span>, TimeUnit.DAYS)</span><br><span class="line">                .toInstant().atZone(ZoneId.systemDefault())</span><br><span class="line">                .toLocalDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateCorporateEmail</span><span class="params">(Worker worker)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s.%s@%s&quot;</span>,</span><br><span class="line">                worker.getFirstName().toLowerCase().replaceAll(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">                worker.getLastName().toLowerCase().replaceAll(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">                faker.internet().domainName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(Worker worker)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> worker.getEmail().matches(<span class="string">&quot;^[a-z.]+@[a-z]+\\.[a-z]&#123;2,&#125;$&quot;</span>)</span><br><span class="line">                &amp;&amp; worker.getEmployeeNumber().startsWith(<span class="string">&quot;WK&quot;</span>)</span><br><span class="line">                &amp;&amp; worker.getHireDate().isAfter(LocalDate.of(<span class="number">2010</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量生成方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Worker&gt; <span class="title function_">createWorkers</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.range(<span class="number">0</span>, count)</span><br><span class="line">                .mapToObj(i -&gt; createWorker())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大量数据（超过10万）批量生成方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Worker&gt; <span class="title function_">createWorkersParallel</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.range(<span class="number">0</span>, count)</span><br><span class="line">                .parallel()</span><br><span class="line">                .mapToObj(i -&gt; createWorker())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><a href="https://github.com/DiUS/java-faker">faker repo</a></li><li><a href="https://commons.apache.org/proper/commons-csv/">apache commons csv</a></li><li><a href="https://mvnrepository.com/artifact/org.apache.commons/commons-csv">commons-csv mvaen repository.</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> commons-csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在k3s中配置私有镜像仓库</title>
      <link href="/2025/03/06/software/connect-to-private-docker-registry-in-k3s/"/>
      <url>/2025/03/06/software/connect-to-private-docker-registry-in-k3s/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文的目的是实现在k3s中可以访问使用docker部署<a href="https://hub.docker.com/_/registry">registry</a>。</p><h1 id="部署registry"><a href="#部署registry" class="headerlink" title="部署registry"></a>部署registry</h1><p>启动一个一次性容器用于创建账号密码.密码文件路径以&#x2F;root&#x2F;registry&#x2F;htpasswd为例,账号密码以admin和12345678为例.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> --entrypoint \</span><br><span class="line">    htpasswd httpd:2 -Bbn \</span><br><span class="line">    admin 12345678 &gt; ./registry/htpasswd</span><br></pre></td></tr></table></figure><p>编写docker compose的yaml文件用于启动registry。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># - ./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./htpasswd:/auth/htpasswd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry:/var/lib/registry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_AUTH=htpasswd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_REALM=Registry</span> <span class="string">Realm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_STORAGE_DELETE_ENABLED=true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry-network</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">extra_hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">host.docker.internal:host-gateway</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">registry-network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>resistry默认提供web ui使用，我们可以使用<a href="https://hub.docker.com/r/joxit/docker-registry-ui">docker-registry-ui</a>部署一个web ui。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry-ui:</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:main</span></span><br><span class="line"><span class="attr">container_name:</span> <span class="string">registry-ui</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">5001</span><span class="string">:80</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SINGLE_REGISTRY=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=Docker</span> <span class="string">Registry</span> <span class="string">UI</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DELETE_IMAGES=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW_CONTENT_DIGEST=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">NGINX_PROXY_PASS_URL=http://registry:5000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW_CATALOG_NB_TAGS=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CATALOG_MIN_BRANCHES=1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CATALOG_MAX_BRANCHES=1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">TAGLIST_PAGE_SIZE=100</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">REGISTRY_SECURED=false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CATALOG_ELEMENTS_LIMIT=1000</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">registry-network</span></span><br><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">host.docker.internal:host-gateway</span></span><br></pre></td></tr></table></figure><p>然后通过·docker compose up -d·就可以启动了。</p><h1 id="docker连接私有仓库"><a href="#docker连接私有仓库" class="headerlink" title="docker连接私有仓库"></a>docker连接私有仓库</h1><p>docker默认不支持http协议，需要额外配置, 通过在&#x2F;etc&#x2F;docker&#x2F;daemon.json 中将私有仓库地址添加进入就好了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.31.220:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后可以通过docker login去登陆私有仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 192.168.31.220:5000</span><br></pre></td></tr></table></figure><h1 id="k3s连接私有仓库"><a href="#k3s连接私有仓库" class="headerlink" title="k3s连接私有仓库"></a>k3s连接私有仓库</h1><p>如果k3s使用docker运行时就不需要额外的操作了，就可以操作了应该（没试过）</p><p>如果k3s使用containerd运行时，需要自行配置&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml。</p><p>一般而言不鼓励直接修改&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml文件，而是通过 &#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;registries.yaml让k3s自行生成containerd的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mirrors:</span><br><span class="line">  <span class="string">&quot;192.168.31.220:5000&quot;</span>:</span><br><span class="line">    endpoint:</span><br><span class="line">      - <span class="string">&quot;http://192.168.31.220:5000&quot;</span></span><br><span class="line"></span><br><span class="line">configs:</span><br><span class="line">  <span class="string">&quot;192.168.31.220:5000&quot;</span>:</span><br><span class="line">    auth:</span><br><span class="line">      username: admin</span><br><span class="line">      password: password</span><br><span class="line">    tls:</span><br><span class="line">      insecure_skip_verify: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>mirrors定义镜像仓库的镜像规则（mirror），用于指定如何访问特定的私有仓库。当容器运行时尝试拉取镜像时，会根据 mirrors 的配置决定从哪个地址拉取。<br>configs定义私有仓库的认证和 TLS 配置。当访问私有仓库时，容器运行时会使用这里配置的用户名、密码和 TLS 设置。</p><p>有的时候k3s不一定能够实时自动监听registries.yaml的改动，所以最好的方式还是重启k3s:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart k3s-agent   <span class="comment"># worker 节点</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo systemctl restart k3s         <span class="comment"># server 节点</span></span><br></pre></td></tr></table></figure><p>现在可以通过创建一个pod去测试k3s是否正常访问私有仓库。</p><p>这里推荐使用crictl去直接拉取私有仓库的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crictl pull 192.168.31.220:5000/hoteler-api:07e1b87e82ccfc49e5bee7d3d88cf2c304376056</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/tergou/article/details/120422445">Docker login 登录私服，报错； http: server gave HTTP response to HTTPS client</a></li><li><a href="https://docs.k3s.io/zh/installation/private-registry">Private Registry Configuration</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k3s </tag>
            
            <tag> docker registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在armbian上使用snap安装neovim</title>
      <link href="/2025/02/14/software/install/use-snap-to-install-neovim-on-armbian/"/>
      <url>/2025/02/14/software/install/use-snap-to-install-neovim-on-armbian/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近搞了一台armbian的机子，想在上面安装neovim，但是发现apt上的nvim版本太低了，只有0.4.0好像。经过一番的搜索，发现Snaps可以满足我的要求。</p><h1 id="Snaps介绍"><a href="#Snaps介绍" class="headerlink" title="Snaps介绍"></a>Snaps介绍</h1><p>Snaps是由Canonical提供的跨分发包管理系统的工具.Snaps 基本上是一个与其依赖项和库一起编译的应用程序——为应用程序运行提供了一个沙盒环境。它们安装起来更容易、更快捷，可以接收最新更新，并且不受操作系统和其他应用程序的限制。</p><h1 id="安装Snaps"><a href="#安装Snaps" class="headerlink" title="安装Snaps"></a>安装Snaps</h1><p>使用apt安装Snap；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install snapd</span><br></pre></td></tr></table></figure><h1 id="安装neovim"><a href="#安装neovim" class="headerlink" title="安装neovim"></a>安装neovim</h1><p>使用snap安装neovim:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install --classic nvim</span><br></pre></td></tr></table></figure><p>检查一下noevim的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim --version</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NVIM v0.10.4</span><br><span class="line">Build <span class="built_in">type</span>: RelWithDebInfo</span><br><span class="line">LuaJIT 2.1.1713484068</span><br><span class="line">Run <span class="string">&quot;nvim -V1 -v&quot;</span> <span class="keyword">for</span> more info</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/pipci/p/16109561.html">如何在各种 Linux 发行版中安装和使用 Snap</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> snap </tag>
            
            <tag> armbian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在k8s中如何强制删除处于Terminating状态的namesapce</title>
      <link href="/2025/02/13/back-end/how-to-forcefully-delete-a-namespace-that-is-stuck-in-the-Terminating-state/"/>
      <url>/2025/02/13/back-end/how-to-forcefully-delete-a-namespace-that-is-stuck-in-the-Terminating-state/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在k3s中删除一个namespace十分简单，就是一个命令的事儿：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ns <span class="variable">$&#123;namespace&#125;</span></span><br></pre></td></tr></table></figure><p>但是可能存在删除失败或者namespace一直处于Terminating状态的话，那么上面的命令可能行不通。<br>这里介绍两种实用的解决方案去帮助我们解决。</p><p>注意: 这两种方案可能存在错误删除的情况，请谨慎操作。</p><h2 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h2><p>kubectl提供force和grace-period&#x3D;0两个参数帮助我们强制删除namespace：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ns <span class="variable">$&#123;namespace&#125;</span> --force --grace-period=0</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>–force：强制删除资源，跳过正常的删除流程。</p></li><li><p>–grace-period&#x3D;0：立即删除资源，不等待任何清理操作。</p></li></ul><h2 id="使用Kubernetes-API-删除"><a href="#使用Kubernetes-API-删除" class="headerlink" title="使用Kubernetes API 删除"></a>使用Kubernetes API 删除</h2><p>获取处于Terminating状态的namespace：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ns |grep Terminating |awk &#123;<span class="string">&#x27;print $1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>调用Kubernetes API 删除指定的namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ns <span class="variable">$&#123;namespace&#125;</span> -o json &gt;<span class="variable">$&#123;namespace&#125;</span>.json</span><br><span class="line">sed -i <span class="string">&#x27;/&quot;kubernetes&quot;/d&#x27;</span> <span class="variable">$&#123;namespace&#125;</span>.json</span><br><span class="line">kubectl replace --raw <span class="string">&quot;/api/v1/namespaces/<span class="variable">$&#123;namespace&#125;</span>/finalize&quot;</span> -f <span class="variable">$&#123;namespace&#125;</span>.json</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://segmentfault.com/a/1190000042972476">Kubernetes 的 NameSpace 无法删除应该怎么办</a></li><li><a href="https://www.cnblogs.com/sunshine99/p/17265300.html">kubernetes批量删除长期处于Terminating状态的namespace</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> k3s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security 中基于用户信息的动态密码加密</title>
      <link href="/2025/02/08/back-end/dynamic-password-encryption-based-on-user-information-in-spring-security/"/>
      <url>/2025/02/08/back-end/dynamic-password-encryption-based-on-user-information-in-spring-security/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-中基于用户信息的动态密码加密"><a href="#Spring-Security-中基于用户信息的动态密码加密" class="headerlink" title="Spring Security 中基于用户信息的动态密码加密"></a>Spring Security 中基于用户信息的动态密码加密</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过自定义 Spring Security 的 DaoAuthenticationProvider，可以实现根据用户信息的不同，动态切换不同的密码加密方式。这种方法允许您根据用户的角色、组或其他属性，选择最合适的加密算法，从而提高安全性或满足特定的业务需求。</p><h2 id="DaoAuthenticationProvider"><a href="#DaoAuthenticationProvider" class="headerlink" title="DaoAuthenticationProvider"></a>DaoAuthenticationProvider</h2><p>DaoAuthenticationProvider是用于实现用户名密码的登陆AuthenticationProvider，通过自定义实现additionalAuthenticationChecks方法可以实现从UserDetails获取一个字段从而动态获取密码加密服务。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>自定义DaoAuthenticationProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelerAuthenticationProvider</span> <span class="keyword">extends</span> <span class="title class_">DaoAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationProvider</span>, ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication.getCredentials() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Failed to authenticate since no credentials provided&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span>  (User)userDetails;</span><br><span class="line">        <span class="type">var</span> <span class="variable">passwordType</span> <span class="operator">=</span> CommonUtils.isNotEmpty(user.getPasswordType()) ? user.getPasswordType() : <span class="string">&quot;noop&quot;</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">passwordService</span> <span class="operator">=</span> <span class="built_in">this</span>.getPasswordService(passwordType);</span><br><span class="line">        <span class="type">var</span> <span class="variable">presentedPassword</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line">        <span class="keyword">if</span> (!user.getPassword().equals(passwordService.encodePassword(presentedPassword))) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Failed to authenticate since password does not match stored value&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doAfterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.doAfterPropertiesSet();</span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.applicationContext, <span class="string">&quot;A applicationContext must be set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> IPasswordService <span class="title function_">getPasswordService</span><span class="params">(String passwordType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(<span class="built_in">this</span>.applicationContext).getBean(passwordType + <span class="string">&quot;PasswordService&quot;</span>, IPasswordService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelerAuthenticationProvider</span><span class="params">(UserDetailsService userDetailsService)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.setUserDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将HotelerAuthenticationProvider注入到AuthenticationManager中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(HotelerAuthenticationProvider authenticationProvider)</span> &#123;;</span><br><span class="line">    <span class="type">ProviderManager</span> <span class="variable">pm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(authenticationProvider);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年度总结</title>
      <link href="/2025/01/13/summary/2024/"/>
      <url>/2025/01/13/summary/2024/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年度总结"><a href="#2024年度总结" class="headerlink" title="2024年度总结"></a>2024年度总结</h1><p>对我来说，2024年是一个特别有意义的一年。8月24号，我美丽又可爱的宝宝出生了，体验到了初为人父的喜悦；10月7号，国庆节刚过，公司人事就开邮件通知我我的岗位被取消了。</p><h1 id="初为人父的喜悦"><a href="#初为人父的喜悦" class="headerlink" title="初为人父的喜悦"></a>初为人父的喜悦</h1><p>孩子的出生时间其实挺意外的。由于老婆在9月初有一场很重要的考试，所以不能耽搁，所以原来计划在20号去医院打催产素的，结果因为报告晚了一天，然后就被通知不用打催产素，已经开始见红了。不过开宫口的速度很慢，过两天还是上催产素了。我记得那个时候我在家里呆着，医院我有丈母娘陪着，反正又不可能那么急着生出来，我就回家先好好休息，打算第二天过去。结果第二天我丈母娘就通知我让我赶紧过去签字给我老婆打催产素。一波三折，到最后这个催产素还是打上去了。在6号待产室，晚上6点06分，7斤2两，我可爱的儿子就这样子平平安安的出生了。说实话，我并没有在第一时间听到孩子的哭声，相反这个小家伙睡的死死的。我伸过去看看了他，第一感觉他好丑啊，头型怪怪的，有点拉长的样子。听医生说，刚出生的小宝宝通常产道的挤压，出来的时候头多多少少会有点拉长的样子，等长大点就好了。</p><p>孩子的出生，对我来说是一个特殊的人生里程碑，从这一刻开始，我不仅仅是一个普通的牛马，更是一个上有老下有小的天选牛马。就这样一下子，感觉身上的责任明显重了很多。算了一下孩子的奶粉钱，尿不湿的钱，将来休学的钱，以后娶老婆的钱和彩礼，还有供养老婆大人吃喝玩乐的钱。处处都是钱，处处都是压力。我也不知道将来孩子会活成什么样子，但是我不奢望他能出人头地，只希望平平安安的长大；不期待他将来学业有成，事业非凡，只希望他能过的自在安心。</p><h1 id="裁员"><a href="#裁员" class="headerlink" title="裁员"></a>裁员</h1><p>其实裁员是有点风声的，但是一直都是狼来的状态。在国庆节，部门领导就私下的就透露过每个leader都需要上交一份裁员名单，更上级的领导会根据这份名单裁员。对于我这种干活儿的小喽啰，大概率是可以保住饭碗的，毕竟我还是比较能干活儿的，最近做的项目也是比较有钱的其实。</p><p>但是非常尴尬的是，确实是裁员了，但是不是上海发起的裁员，是美国发起的裁员。美国最高层决定全球裁员好几千人，预计涉及美国，墨西哥，印度和上海几个地方的office。</p><p>这次裁员主要是我们P &amp; T部门，其他部门似乎还好好的。P &amp; T由Labs和Digital两个小部门，我们labs这边十分平静的接受了这次裁员，大家虽然都不太能接受，但是普遍选择认命，大家该吃吃该喝喝，好聚好散。但是隔壁部门是有人闹了下，但是很快就没下文了。后来我听说出头闹事的人第一个找到工作之后就不出头了，结果也就没人闹事了。</p><h1 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h1><p>找工作挺难的，基本上都是外包。没做面试的记录，就随便回忆一下吧。面试PayPal外包, 二面和三面一起面的，挂了，感觉二面和三面都不是很好。面试VOA2(一家不错的法资小公司)，因为英语和岗位不合适挂。面试迪士尼外包，一面挂了，搞笑的是又一家外包来邀请我去面试，主要是迪士尼的技术栈是Angular+Graphql，比较小众，但是我都用过，我不太想去，但是对方劝了我好几次，最后还是在二面挂了（面试三次，挂了两次，挺好玩的经历）。面试花旗外包，二面挂了，其实本来是挺有机会的，但是二面就27分钟，还算上我问的问题，只能被挂了。面试华钦（华钦是外包公司，但是这个岗位不是外包），我明明面试的是前端，面试官是后端的，道不同。<br>面试摩根士丹利外包，二面过了，感觉比较水，相对好近。</p><h1 id="摩根士丹利"><a href="#摩根士丹利" class="headerlink" title="摩根士丹利"></a>摩根士丹利</h1><p>进入摩根士丹利之后其实有段时间是不太适应的，习惯了普华永道这种混合办公和不定时工作制，不太能接受摩根士丹利这种965的风格，不过还好，两周就适应了，发了工资就更加适应，没有必要和钱过不去。摩根士丹利里面什么情况我不方便多说，但是根据工作安排来看，坚持到2026年底问题不大，以后就再说吧。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果没有裁员这回事儿，那么2024年对我还是一个挺不错的年份。涨点工资（普华永道每年7月调薪），有个儿子，本来就可以这样子过去了。可惜没有如果，现在在摩根做外包也能接受，毕竟正式员工对我们算得上非常nice了。希望2025年可以平平安安，保住工作，少点个人消费，多点留给家人。技术也没有什么大的想法，保住工作就行，苟活到经济能够真的复苏吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>script标签中的defer和async</title>
      <link href="/2024/11/04/front-end/html-scripts-defer-async/"/>
      <url>/2024/11/04/front-end/html-scripts-defer-async/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器中script标签中的defer和async有什么区别，优缺点是什么，应用场景是什么？"><a href="#浏览器中script标签中的defer和async有什么区别，优缺点是什么，应用场景是什么？" class="headerlink" title="浏览器中script标签中的defer和async有什么区别，优缺点是什么，应用场景是什么？"></a>浏览器中script标签中的defer和async有什么区别，优缺点是什么，应用场景是什么？</h1><p>在 HTML 中，<code>&lt;script&gt;</code> 标签的 <code>defer</code> 和 <code>async</code> 属性用于控制脚本的加载和执行方式，尤其是在处理 JavaScript 文件时。它们之间的主要区别和应用场景如下：</p><h3 id="1-defer"><a href="#1-defer" class="headerlink" title="1. defer"></a>1. <code>defer</code></h3><ul><li><strong>功能</strong>：脚本在文档解析完成后执行，但在 DOMContentLoaded 事件之前执行。</li><li><strong>加载顺序</strong>：<code>defer</code> 脚本会按照它们在文档中的出现顺序加载并执行。</li><li><strong>应用场景</strong>：适用于依赖于 DOM 完全加载的脚本，或者需要按顺序执行多个脚本的情况。</li></ul><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>确保 DOM 元素在脚本执行时已存在，避免了因元素未加载而导致的错误。</li><li>不会阻塞 HTML 的解析，可以提高页面加载性能。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script1.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script2.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-async"><a href="#2-async" class="headerlink" title="2. async"></a>2. <code>async</code></h3><ul><li><strong>功能</strong>：脚本会在下载完成后立即执行，而不会等待 DOMContentLoaded。</li><li><strong>加载顺序</strong>：<code>async</code> 脚本不保证执行顺序。如果有多个 <code>async</code> 脚本，执行顺序可能与它们在文档中的出现顺序不同。</li><li><strong>应用场景</strong>：适合于独立于其他脚本的脚本，例如分析工具或广告脚本。</li></ul><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ul><li>脚本在加载时不阻塞页面的渲染，提升页面加载速度。</li><li>对于不依赖于 DOM 结构的脚本，能更快地执行。</li></ul><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-区别总结"><a href="#3-区别总结" class="headerlink" title="3. 区别总结"></a>3. 区别总结</h3><table><thead><tr><th>特性</th><th><code>defer</code></th><th><code>async</code></th></tr></thead><tbody><tr><td>执行时机</td><td>DOM 解析完成后，DOMContentLoaded 之前</td><td>下载完成后立即执行</td></tr><tr><td>加载顺序</td><td>按照在文档中的顺序加载并执行</td><td>不保证执行顺序</td></tr><tr><td>适用场景</td><td>依赖于 DOM 的脚本，顺序执行</td><td>独立的脚本，不依赖其他脚本</td></tr></tbody></table><h3 id="4-选择使用场景"><a href="#4-选择使用场景" class="headerlink" title="4. 选择使用场景"></a>4. 选择使用场景</h3><ul><li><p>**使用 <code>defer</code>**：</p><ul><li>需要依赖于页面 DOM 完全加载的脚本（如操作 DOM 元素的脚本）。</li><li>需要按顺序执行多个脚本。</li></ul></li><li><p>**使用 <code>async</code>**：</p><ul><li>独立于其他脚本的第三方脚本（如广告、分析工具）。</li><li>不依赖于 DOM 的脚本，可以在页面加载过程中立即执行。</li></ul></li></ul><h3 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h3><p>在实际开发中，合理使用 <code>defer</code> 和 <code>async</code> 属性可以提高页面性能和用户体验。根据脚本的依赖关系和执行顺序选择适合的方式，有助于优化页面的加载和渲染速度。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://chatgpt.com/c/6714f7ef-9400-8013-b1dc-9c283200754b">chatgpt</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css的模拟面试</title>
      <link href="/2024/10/30/front-end/css-mock-interview/"/>
      <url>/2024/10/30/front-end/css-mock-interview/</url>
      
        <content type="html"><![CDATA[<h2 id="css变量是什么"><a href="#css变量是什么" class="headerlink" title="css变量是什么"></a>css变量是什么</h2><p>CSS 变量（也称为自定义属性）是 CSS 中用于定义可重用值的特性。它们使用 <code>--</code> 前缀定义，可以在整个样式表中被引用和复用，从而提高代码的灵活性和可维护性。</p><h3 id="1-定义-CSS-变量"><a href="#1-定义-CSS-变量" class="headerlink" title="1. 定义 CSS 变量"></a>1. 定义 CSS 变量</h3><p>CSS 变量通常在 <code>:root</code> 选择器中定义，这样它们可以在整个文档中使用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">  <span class="attr">--font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attr">--spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上定义的 <code>--primary-color</code>、<code>--font-size</code> 和 <code>--spacing</code> 就是 CSS 变量。</li></ul><h3 id="2-使用-CSS-变量"><a href="#2-使用-CSS-变量" class="headerlink" title="2. 使用 CSS 变量"></a>2. 使用 CSS 变量</h3><p>CSS 变量使用 <code>var()</code> 函数进行引用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--font-size);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，<code>var(--primary-color)</code> 引用了之前定义的变量 <code>--primary-color</code> 的值。</p><h3 id="3-动态修改变量"><a href="#3-动态修改变量" class="headerlink" title="3. 动态修改变量"></a>3. 动态修改变量</h3><p>CSS 变量的强大之处在于可以通过 JavaScript 动态修改变量的值，轻松实现主题切换等效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--primary-color&#x27;</span>, <span class="string">&#x27;#e74c3c&#x27;</span>);</span><br></pre></td></tr></table></figure><p>通过这段代码，可以在运行时改变 <code>--primary-color</code> 的值，从而使得所有引用此变量的地方颜色发生变化。</p><h3 id="4-CSS-变量的优势"><a href="#4-CSS-变量的优势" class="headerlink" title="4. CSS 变量的优势"></a>4. CSS 变量的优势</h3><ul><li><strong>提高代码可维护性</strong>：只需修改变量值，就可以统一地改变样式。</li><li><strong>支持主题切换</strong>：可以通过改变变量来动态更新页面主题。</li><li><strong>作用域灵活</strong>：CSS 变量可以在特定选择器中定义，具有特定的作用域。</li></ul><h3 id="5-CSS-变量的兼容性"><a href="#5-CSS-变量的兼容性" class="headerlink" title="5. CSS 变量的兼容性"></a>5. CSS 变量的兼容性</h3><p>CSS 变量在现代浏览器中支持较好，但在一些老版本浏览器（如 IE）中不支持。</p><h2 id="root是什么"><a href="#root是什么" class="headerlink" title=":root是什么"></a>:root是什么</h2><p><code>:root</code> 是一个CSS伪类选择器，主要用于选择文档的根元素。在HTML文档中，根元素通常是 <code>&lt;html&gt;</code> 标签。使用 <code>:root</code> 选择器可以方便地设置全局CSS变量或样式。以下是一些关于 <code>:root</code> 的关键点：</p><h3 id="1-选择文档的根元素"><a href="#1-选择文档的根元素" class="headerlink" title="1. 选择文档的根元素"></a>1. <strong>选择文档的根元素</strong></h3><ul><li><code>:root</code> 选择器选择的是文档的根元素，这在HTML中对应于 <code>&lt;html&gt;</code> 标签。</li><li>例如，以下CSS代码将选择根元素并应用样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--main-color</span>: <span class="number">#3498db</span>; <span class="comment">/* 定义CSS变量 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-CSS变量的定义"><a href="#2-CSS变量的定义" class="headerlink" title="2. CSS变量的定义"></a>2. <strong>CSS变量的定义</strong></h3><ul><li><code>:root</code> 是定义CSS变量的常见位置。由于 <code>:root</code> 选择器具有更高的优先级，使用它可以确保变量在整个文档中都可以被访问到。</li><li>定义在 <code>:root</code> 中的变量可以在后续的CSS规则中使用：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-全局样式"><a href="#3-全局样式" class="headerlink" title="3. 全局样式"></a>3. <strong>全局样式</strong></h3><ul><li>使用 <code>:root</code> 可以设置全局样式或CSS变量，使得样式更加统一和可维护。</li><li>在项目中，如果你希望有一个地方集中管理主题颜色、字体大小等，可以通过 <code>:root</code> 实现。</li></ul><h3 id="4-与其他选择器的组合"><a href="#4-与其他选择器的组合" class="headerlink" title="4. 与其他选择器的组合"></a>4. <strong>与其他选择器的组合</strong></h3><ul><li><code>:root</code> 可以与其他选择器组合使用，从而针对特定条件应用样式。例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span><span class="selector-class">.dark-mode</span> &#123;</span><br><span class="line">    <span class="attr">--background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attr">--text-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以下是一个完整的例子，展示如何使用 <code>:root</code> 定义和使用CSS变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attr">--font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">var</span>(--font-size);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们在 <code>:root</code> 中定义了两个变量：<code>--primary-color</code> 和 <code>--font-size</code>，然后在 <code>body</code> 和 <code>h1</code> 元素中使用了这些变量。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>:root</code> 是一个强大的工具，用于定义全局CSS变量和样式，方便维护和管理样式。它帮助开发者在整个文档中实现一致的设计。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs的模拟面试</title>
      <link href="/2024/10/29/front-end/nodejs-mock-interview/"/>
      <url>/2024/10/29/front-end/nodejs-mock-interview/</url>
      
        <content type="html"><![CDATA[<h2 id="CommonJS是什么"><a href="#CommonJS是什么" class="headerlink" title="CommonJS是什么"></a>CommonJS是什么</h2><p>CommonJS（简称CJS）是一种JavaScript模块化规范，最初为在服务端（如Node.js）实现模块化而设计。在CommonJS中，每个文件都被视为一个独立的模块，并通过<code>module.exports</code>导出和<code>require</code>引入其他模块，形成清晰的模块依赖结构。以下是CommonJS的几个关键点：</p><ol><li><strong>模块导出和导入</strong>：CommonJS使用<code>module.exports</code>导出内容，其他文件使用<code>require</code>导入。例如：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b,</span><br><span class="line">  <span class="attr">subtract</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&quot;./math&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出5</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>同步加载</strong>：CommonJS模块是同步加载的，这在服务端环境中是合理的，因为文件系统通常是本地的，读取速度快。但在浏览器端不适用，因为网络加载是异步的，CommonJS因此不适用于前端模块化。</p></li><li><p><strong>模块作用域</strong>：CommonJS模块会为每个文件创建独立的作用域，因此不会污染全局命名空间。模块内定义的变量或函数不会泄露到其他模块。</p></li><li><p><strong>在Node.js中的应用</strong>：Node.js遵循CommonJS规范，使开发者能够轻松创建模块化代码结构。CommonJS适合Node.js应用的模块化和依赖管理，但随着ECMAScript模块（ESM）的标准化，Node.js现已支持ESM标准。</p></li></ol><h2 id="CommonJS中require是怎么实现的"><a href="#CommonJS中require是怎么实现的" class="headerlink" title="CommonJS中require是怎么实现的"></a>CommonJS中require是怎么实现的</h2><p>在CommonJS中，<code>require</code>的实现是通过Node.js的<code>Module</code>系统来管理和加载模块的。<code>require</code>本质上是一个函数，用来加载模块、解析依赖、缓存已加载的模块，从而确保模块的高效加载。下面是<code>require</code>的实现原理分解：</p><h3 id="1-路径解析"><a href="#1-路径解析" class="headerlink" title="1. 路径解析"></a>1. <strong>路径解析</strong></h3><ul><li><code>require</code>首先会解析模块的路径，以确定该路径对应的文件位置。</li><li>如果是核心模块（如<code>fs</code>、<code>path</code>等），Node.js会直接加载这些模块，因为它们内置在Node.js中。</li><li>如果是自定义模块或第三方库，Node.js会在<code>node_modules</code>目录中查找指定模块。</li><li>Node.js的路径解析规则是先查找本地文件，然后查找<code>node_modules</code>，并遵循目录层级查找（从当前目录逐层往上）。</li></ul><h3 id="2-模块缓存"><a href="#2-模块缓存" class="headerlink" title="2. 模块缓存"></a>2. <strong>模块缓存</strong></h3><ul><li>Node.js会缓存已经加载的模块，保存在<code>require.cache</code>对象中。缓存的模块是一个<code>Module</code>对象，其<code>exports</code>属性包含模块的导出内容。</li><li>如果模块已经加载并存在于缓存中，<code>require</code>会直接从缓存返回导出的内容，避免重复加载。</li></ul><h3 id="3-创建Module对象"><a href="#3-创建Module对象" class="headerlink" title="3. 创建Module对象"></a>3. <strong>创建Module对象</strong></h3><ul><li>如果模块没有被缓存，Node.js会为该模块创建一个新的<code>Module</code>对象：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">new</span> <span class="title class_">Module</span>(filename);</span><br></pre></td></tr></table></figure></li><li>这个<code>Module</code>对象包含<code>id</code>、<code>filename</code>、<code>loaded</code>和<code>exports</code>等属性，用来表示模块的唯一标识、文件路径、加载状态、导出对象等。</li></ul><h3 id="4-加载模块并执行"><a href="#4-加载模块并执行" class="headerlink" title="4. 加载模块并执行"></a>4. <strong>加载模块并执行</strong></h3><ul><li><code>require</code>会读取模块文件内容，然后将代码包裹在一个自执行函数中，这个函数接收<code>exports</code>、<code>require</code>、<code>module</code>、<code>__filename</code>和<code>__dirname</code>五个参数，从而确保每个模块都有自己的作用域。</li><li>例如，假设模块代码是：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>加载时，Node.js会将其转换为如下结构：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><code>require</code>执行该函数，将执行结果赋值给<code>module.exports</code>。执行完后，<code>module.exports</code>就包含了模块的导出内容。</li></ul><h3 id="5-返回module-exports"><a href="#5-返回module-exports" class="headerlink" title="5. 返回module.exports"></a>5. <strong>返回module.exports</strong></h3><ul><li>执行完成后，<code>require</code>函数返回<code>module.exports</code>的内容。其他模块可以通过调用<code>require</code>访问该模块的导出对象。</li></ul><h3 id="6-循环依赖处理"><a href="#6-循环依赖处理" class="headerlink" title="6. 循环依赖处理"></a>6. <strong>循环依赖处理</strong></h3><ul><li>如果模块A和模块B存在循环依赖，Node.js会在加载时创建一个未完成的<code>module.exports</code>对象放入缓存，使得相互依赖的模块可以访问未完成的内容，从而避免死循环。</li></ul><h3 id="简化版代码示例"><a href="#简化版代码示例" class="headerlink" title="简化版代码示例"></a>简化版代码示例</h3><p>以下代码是Node.js中<code>require</code>实现的简化示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化的 CommonJS require 实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Module</span> = <span class="keyword">function</span> (<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = filename;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;; <span class="comment">// 导出对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>; <span class="comment">// 加载状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_cache</span> = &#123;&#125;; <span class="comment">// 模块缓存</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_load</span> = <span class="keyword">function</span> (<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="comment">// 检查缓存</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Module</span>.<span class="property">_cache</span>[filename]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Module</span>.<span class="property">_cache</span>[filename].<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新的模块并缓存</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">new</span> <span class="title class_">Module</span>(filename);</span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_cache</span>[filename] = <span class="variable language_">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取文件内容并包装为函数</span></span><br><span class="line">  <span class="keyword">const</span> wrappedSrc = <span class="string">`(function(exports, require, module, __filename, __dirname) &#123; <span class="subst">$&#123;readFileSync(filename)&#125;</span> \n&#125;)`</span>;</span><br><span class="line">  <span class="keyword">const</span> compiledWrapper = <span class="built_in">eval</span>(wrappedSrc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行模块函数</span></span><br><span class="line">  <span class="title function_">compiledWrapper</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, filename, <span class="title function_">dirname</span>(filename));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置加载完成状态</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Module</span>.<span class="title function_">_load</span>(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>require</code>的核心在于以下几步：</p><ol><li><strong>解析路径</strong>以找到模块文件。</li><li><strong>检查缓存</strong>以避免重复加载。</li><li><strong>创建并缓存模块对象</strong>，防止循环依赖。</li><li><strong>包装和执行代码</strong>以提供模块独立作用域。</li><li><strong>返回module.exports</strong>的内容供调用方使用。</li></ol><p>这就是CommonJS中<code>require</code>的基本实现逻辑，通过缓存、作用域隔离等机制，确保模块的高效、独立运行。</p><h2 id="CommonJS和ESM的区别："><a href="#CommonJS和ESM的区别：" class="headerlink" title="CommonJS和ESM的区别："></a>CommonJS和ESM的区别：</h2><ul><li><strong>导入&#x2F;导出语法</strong>：CommonJS使用<code>require</code>和<code>module.exports</code>，而ESM使用<code>import</code>和<code>export</code>。</li><li><strong>加载方式</strong>：CommonJS是同步加载，ESM支持异步加载。</li><li><strong>执行时机</strong>：CommonJS模块在加载时立即执行，ESM模块则在编译时静态分析依赖关系。</li></ul><p>总体来说，CommonJS是Node.js中常见的模块化规范，对服务端开发尤其重要，而在前端开发中更推荐使用ES模块化（ESM）标准。</p><h2 id="ESM是什么"><a href="#ESM是什么" class="headerlink" title="ESM是什么"></a>ESM是什么</h2><p>ESM（ECMAScript Module）是JavaScript在ECMAScript 6（ES6）标准中引入的模块系统，也称为ES模块。它为JavaScript提供了一种官方、标准化的模块化方式，在浏览器和Node.js环境中都支持。ESM解决了JavaScript早期模块化规范（如CommonJS、AMD）存在的诸多问题，并引入了一些重要的新特性。</p><h3 id="ESM的特点和语法"><a href="#ESM的特点和语法" class="headerlink" title="ESM的特点和语法"></a>ESM的特点和语法</h3><ol><li><p><strong>静态导入和导出</strong></p><ul><li><p>ESM支持静态分析，这意味着在编译阶段，JavaScript引擎就能确定模块依赖关系，而不是像CommonJS那样动态加载。这种静态结构有助于性能优化和代码检查。</p></li><li><p><strong>导出</strong>使用<code>export</code>关键字，支持命名导出和默认导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// named export</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default export</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>导入</strong>使用<code>import</code>关键字，可以选择导入模块的部分内容，或者直接导入默认导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> multiply <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>支持异步加载</strong></p><ul><li>在浏览器环境中，ES模块可以异步加载，且在模块中可以使用<code>&lt;script type=&quot;module&quot;&gt;</code>标签加载脚本，且模块默认是异步加载的。这使得ESM在浏览器端比CommonJS更高效。</li><li>例如，<code>import()</code>动态导入函数允许在运行时加载模块，是一种非常灵活的用法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&quot;./math.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>模块作用域</strong></p><ul><li>ESM模块代码默认在模块作用域内执行，不会污染全局作用域。</li><li>ESM模块中的顶层<code>this</code>值为<code>undefined</code>，避免了变量污染。</li></ul></li><li><p><strong>浏览器和Node.js的支持</strong></p><ul><li>浏览器原生支持ESM，不需要任何工具或库即可直接加载。</li><li>Node.js 12及以上版本也支持ES模块（文件后缀为<code>.mjs</code>，或在<code>package.json</code>中指定<code>&quot;type&quot;: &quot;module&quot;</code>）。这使得ESM成为了跨平台的标准模块化方案。</li></ul></li><li><p><strong>Tree Shaking</strong></p><ul><li>由于ESM是静态结构的模块，构建工具（如Webpack、Rollup）可以在编译阶段优化代码，删除未使用的导出（Tree Shaking），减少最终打包文件的大小。</li></ul></li></ol><h3 id="ESM与CommonJS的区别"><a href="#ESM与CommonJS的区别" class="headerlink" title="ESM与CommonJS的区别"></a>ESM与CommonJS的区别</h3><table><thead><tr><th>特性</th><th>ESM</th><th>CommonJS</th></tr></thead><tbody><tr><td>导入&#x2F;导出语法</td><td><code>import</code> &#x2F; <code>export</code></td><td><code>require</code> &#x2F; <code>module.exports</code></td></tr><tr><td>依赖解析时间</td><td>静态解析</td><td>动态解析</td></tr><tr><td>加载方式</td><td>异步加载（浏览器端）</td><td>同步加载</td></tr><tr><td>缓存机制</td><td>缓存，但不可变</td><td>缓存，但内容可变</td></tr><tr><td>顶层<code>this</code></td><td><code>undefined</code></td><td><code>global</code>（在Node.js中）</td></tr><tr><td>Tree Shaking支持</td><td>支持（便于编译优化）</td><td>不支持</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设我们有一个<code>math.js</code>文件，包含以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ESM导入该模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> multiply <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>ESM模块系统在JavaScript生态系统中逐渐成为主流，因其具有静态分析、异步加载、Tree Shaking支持等优势，成为了现代JavaScript开发中的重要模块化工具。</p><h2 id="module-exports和exports的区别"><a href="#module-exports和exports的区别" class="headerlink" title="module.exports和exports的区别"></a>module.exports和exports的区别</h2><p>在Node.js中，<code>module.exports</code>和<code>exports</code>都是用于模块导出的对象，但它们之间有一些细微的区别。理解这些区别可以帮助你避免一些常见的错误。</p><h3 id="1-默认引用关系"><a href="#1-默认引用关系" class="headerlink" title="1. 默认引用关系"></a>1. <strong>默认引用关系</strong></h3><ul><li><code>exports</code>和<code>module.exports</code>在模块开始时是指向同一个对象的，也就是说，<code>exports</code>是<code>module.exports</code>的引用。</li><li>例如，默认情况下它们等价于：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">exports</span> = (<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-导出整个对象"><a href="#2-导出整个对象" class="headerlink" title="2. 导出整个对象"></a>2. <strong>导出整个对象</strong></h3><ul><li><code>module.exports</code>是真正导出的对象，<code>require</code>的返回值最终是<code>module.exports</code>的值。</li><li>如果想要导出一个新的对象或函数，应直接赋值给<code>module.exports</code>，而不是<code>exports</code>，否则不会生效。</li><li>例如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 或者导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>错误示例，如果直接修改<code>exports</code>，<code>module.exports</code>不会受影响：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// require时返回的是一个空对象，而不是&#123; foo: &#x27;bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-添加属性或方法"><a href="#3-添加属性或方法" class="headerlink" title="3. 添加属性或方法"></a>3. <strong>添加属性或方法</strong></h3><ul><li><p>如果只是想给模块添加一些属性或方法，可以直接在<code>exports</code>上添加属性，因为<code>exports</code>是<code>module.exports</code>的引用。</p></li><li><p>例如，以下两种写法都可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：使用 exports</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：使用 module.exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-覆盖-vs-扩展"><a href="#4-覆盖-vs-扩展" class="headerlink" title="4. 覆盖 vs. 扩展"></a>4. <strong>覆盖 vs. 扩展</strong></h3><ul><li>当需要<strong>覆盖整个导出对象</strong>时，必须使用<code>module.exports</code>。</li><li>而当只是想在现有的导出对象上<strong>添加属性或方法</strong>时，可以使用<code>exports</code>或<code>module.exports</code>，效果相同。</li></ul><h3 id="例子比较"><a href="#例子比较" class="headerlink" title="例子比较"></a>例子比较</h3><p>假设有一个模块<code>myModule.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="built_in">exports</span> = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span> &#125;; <span class="comment">// 此时 `exports` 不再指向 `module.exports`，不会生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性的正确写法</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>; <span class="comment">// 或者 module.exports.foo = &#x27;bar&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><code>module.exports</code>是真正的导出对象。</li><li><code>exports</code>只是<code>module.exports</code>的引用，主要用于辅助导出属性或方法。</li><li>覆盖整个导出对象时使用<code>module.exports</code>；仅添加属性或方法时两者皆可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular的模拟面试</title>
      <link href="/2024/10/26/front-end/angular-mock-interview/"/>
      <url>/2024/10/26/front-end/angular-mock-interview/</url>
      
        <content type="html"><![CDATA[<ul><li></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是针对angular前端的模拟面试</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="前端CSS的优先级"><a href="#前端CSS的优先级" class="headerlink" title="前端CSS的优先级"></a>前端CSS的优先级</h2><p>在 CSS 中，选择器用于选择 HTML 元素并应用样式。不同选择器的优先级（权重）决定了样式的应用顺序。以下是常用选择器类型及其优先级规则：</p><ol><li><p>CSS 选择器类型</p><ul><li>元素选择器：直接选择 HTML 元素，如 div、p、h1。</li><li>类选择器：通过类名选择元素，使用 . 前缀，如 .box。</li><li>ID 选择器：通过 ID 名称选择元素，使用 # 前缀，如 #header。</li><li>属性选择器：通过元素属性选择元素，如 [type&#x3D;”text”]。</li><li>伪类选择器：选择特定状态的元素，如 :hover、:focus。</li><li>伪元素选择器：选择元素的一部分，如 ::before、::after。</li><li>组合选择器：通过多种选择器的组合，选择满足特定条件的元素。常见的组合符有：<ul><li>后代选择器：div p，选择 div 中的所有 p 元素。</li><li>子选择器：div &gt; p，选择 div 的直接子元素 p。</li><li>相邻兄弟选择器：h1 + p，选择紧跟在 h1 之后的 p 元素。</li><li>通用兄弟选择器：h1 ~ p，选择 h1 之后的所有 p 元素。</li></ul></li></ul></li><li><p>CSS 选择器优先级（权重）计算规则<br>CSS 中的优先级使用权重值进行计算，以确定样式的应用顺序。权重值的计算通常按四位数来表示（a, b, c, d），不同选择器类型的权重值如下：</p><ul><li>内联样式：1000 权重，最高优先级（a&#x3D;1，如 &lt;div style&#x3D;”color: red;”&gt;）。</li><li>ID 选择器：0100 权重，每个 ID 选择器会为权重 b 加 1。</li><li>类选择器、属性选择器、伪类选择器：0010 权重，每个类、属性、伪类为权重 c 加 1。</li><li>元素选择器、伪元素选择器：0001 权重，每个元素或伪元素为权重 d 加 1。</li><li>通配选择器 *：没有权重，不影响优先级。</li></ul></li></ol><p>优先级计算示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span> 的优先级：<span class="number">0100</span> + <span class="number">0010</span> + <span class="number">0001</span> = <span class="number">0111</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> 的优先级：<span class="number">0001</span> + <span class="number">0001</span> = <span class="number">0002</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> 的优先级：<span class="number">0001</span> + <span class="number">0001</span> = <span class="number">0002</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.link</span><span class="selector-pseudo">:hover</span> 的优先级：<span class="number">0010</span> + <span class="number">0010</span> = <span class="number">0020</span></span><br></pre></td></tr></table></figure><ol start="3"><li>层叠规则（重要性）<br>如果多个选择器的优先级相同，那么后定义的样式将覆盖先定义的样式。如果样式带有 !important 标记，则会直接覆盖常规样式的优先级。多个 !important 样式冲突时，遵循优先级和源顺序（后者覆盖前者）。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优先级从高到低：内联样式 &gt; ID 选择器 &gt; 类选择器、属性选择器、伪类选择器 &gt; 元素选择器、伪元素选择器。<br>使用 !important 可以提高样式优先级，但应谨慎使用，以免降低代码可维护性。</p><h2 id="CSS主题切换的思路，代码怎么做全局的变量"><a href="#CSS主题切换的思路，代码怎么做全局的变量" class="headerlink" title="CSS主题切换的思路，代码怎么做全局的变量"></a>CSS主题切换的思路，代码怎么做全局的变量</h2><p>方案一：</p><p>在 Angular 中实现 CSS 主题切换的思路，通常利用CSS 变量和全局样式，并结合 Angular 的服务来管理和切换主题。可以通过动态切换 data-theme 属性，实现全局的主题切换。</p><p>方案二：</p><p>使用scss和切换link的方式。</p><p>方案三：</p><p>使用css in js的思路，不一定支持angular</p><h2 id="网页的暗黑模式怎么实现"><a href="#网页的暗黑模式怎么实现" class="headerlink" title="网页的暗黑模式怎么实现"></a>网页的暗黑模式怎么实现</h2><p>实现网页的暗黑模式，通常可以使用<strong>CSS 变量</strong>、<strong>媒体查询</strong>、<strong>JavaScript</strong> 等方法来进行切换。以下是几种常见的实现方式：</p><h3 id="1-使用-CSS-变量实现暗黑模式"><a href="#1-使用-CSS-变量实现暗黑模式" class="headerlink" title="1. 使用 CSS 变量实现暗黑模式"></a>1. 使用 CSS 变量实现暗黑模式</h3><p>这种方式通过定义 CSS 变量来控制主题颜色，再使用 JavaScript 切换 CSS 变量值。</p><h4 id="1-1-定义-CSS-变量"><a href="#1-1-定义-CSS-变量" class="headerlink" title="1.1 定义 CSS 变量"></a>1.1 定义 CSS 变量</h4><p>在 <code>:root</code> 中定义亮色模式的 CSS 变量，并为暗色模式设置一个 <code>data-theme=&quot;dark&quot;</code> 属性时的变量值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义亮色模式 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attr">--text-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义暗黑模式 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attr">--background-color</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">  <span class="attr">--text-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用变量应用到样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--background-color);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">0.3s</span>, color <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-使用-JavaScript-切换主题"><a href="#1-2-使用-JavaScript-切换主题" class="headerlink" title="1.2 使用 JavaScript 切换主题"></a>1.2 使用 JavaScript 切换主题</h4><p>使用 JavaScript 监听用户的点击事件，在页面根元素上添加或移除 <code>data-theme=&quot;dark&quot;</code> 属性，切换暗黑和亮色模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换暗黑模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toggleDarkMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentTheme = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-theme&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> newTheme = currentTheme === <span class="string">&quot;dark&quot;</span> ? <span class="string">&quot;light&quot;</span> : <span class="string">&quot;dark&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, newTheme);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;theme&quot;</span>, newTheme); <span class="comment">// 保存用户选择</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化主题</span></span><br><span class="line"><span class="keyword">const</span> savedTheme = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;theme&quot;</span>) || <span class="string">&quot;light&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, savedTheme);</span><br></pre></td></tr></table></figure><h4 id="1-3-为按钮添加事件监听"><a href="#1-3-为按钮添加事件监听" class="headerlink" title="1.3 为按钮添加事件监听"></a>1.3 为按钮添加事件监听</h4><p>在 HTML 中添加一个按钮来切换主题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;toggleDarkMode()&quot;</span>&gt;</span>切换暗黑模式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用媒体查询自动匹配系统主题"><a href="#2-使用媒体查询自动匹配系统主题" class="headerlink" title="2. 使用媒体查询自动匹配系统主题"></a>2. 使用媒体查询自动匹配系统主题</h3><p>CSS 提供了一个 <code>prefers-color-scheme</code> 媒体查询，可以自动检测用户系统设置，匹配亮色或暗黑模式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认亮色模式 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attr">--text-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 暗黑模式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--background-color</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">    <span class="attr">--text-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--background-color);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法会根据用户的系统主题设置自动应用亮色或暗黑模式，用户可以在系统设置中调整。</p><h3 id="3-使用-CSS-和-JavaScript-结合用户首选项"><a href="#3-使用-CSS-和-JavaScript-结合用户首选项" class="headerlink" title="3. 使用 CSS 和 JavaScript 结合用户首选项"></a>3. 使用 CSS 和 JavaScript 结合用户首选项</h3><p>可以结合媒体查询和 JavaScript 自动检测用户系统设置，同时提供按钮允许用户自定义选择。</p><h4 id="3-1-检测用户系统主题设置"><a href="#3-1-检测用户系统主题设置" class="headerlink" title="3.1 检测用户系统主题设置"></a>3.1 检测用户系统主题设置</h4><p>当用户首次访问网站时，检测系统主题，优先使用用户系统的主题偏好。如果用户选择了特定的主题，则将其偏好保存到 <code>localStorage</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> savedTheme = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;theme&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (savedTheme) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, savedTheme);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="property">matches</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, <span class="string">&quot;dark&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, <span class="string">&quot;light&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">initTheme</span>();</span><br></pre></td></tr></table></figure><h4 id="3-2-切换主题并保存用户选择"><a href="#3-2-切换主题并保存用户选择" class="headerlink" title="3.2 切换主题并保存用户选择"></a>3.2 切换主题并保存用户选择</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toggleDarkMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentTheme = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-theme&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> newTheme = currentTheme === <span class="string">&quot;dark&quot;</span> ? <span class="string">&quot;light&quot;</span> : <span class="string">&quot;dark&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, newTheme);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;theme&quot;</span>, newTheme);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-HTML-示例"><a href="#3-3-HTML-示例" class="headerlink" title="3.3 HTML 示例"></a>3.3 HTML 示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;toggleDarkMode()&quot;</span>&gt;</span>切换暗黑模式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>CSS 变量法</strong>：定义变量并通过 <code>data-theme</code> 切换，非常灵活。</li><li><strong>媒体查询</strong>：自动适应用户系统主题设置，便于实现无缝暗黑模式。</li><li><strong>JavaScript 保存用户偏好</strong>：在 <code>localStorage</code> 中记录用户选择，提供更个性化的体验。</li></ul><h2 id="Angular-哪些方式能获取dom节点"><a href="#Angular-哪些方式能获取dom节点" class="headerlink" title="Angular 哪些方式能获取dom节点"></a>Angular 哪些方式能获取dom节点</h2><p>Angular 提供了多种方式来获取 DOM 节点，每种方式都有其适用场景。选择哪种方式取决于具体的需求和场景。</p><ul><li>ViewChild 和 ViewChildren: 用于获取模板中定义的元素或指令。</li><li>ElementRef: 用于获取组件的根元素。</li><li>@HostListener: 用于监听宿主元素的事件。</li><li>Renderer2: 用于在组件中直接操作 DOM。</li><li>原生JavaScript。</li></ul><p>一般情况下，推荐使用 ViewChild、ViewChildren 和 ElementRef 来获取 DOM 元素，因为它们与 Angular 的变更检测机制集成得更好。</p><h2 id="Angular里面service的实现，service是应用在全生命周期里吗，为什么？"><a href="#Angular里面service的实现，service是应用在全生命周期里吗，为什么？" class="headerlink" title="Angular里面service的实现，service是应用在全生命周期里吗，为什么？"></a>Angular里面service的实现，service是应用在全生命周期里吗，为什么？</h2><p>在 Angular 中，服务（Service）是一种用于提供特定功能、数据和业务逻辑的单例对象。服务的设计和实现使得它们在整个应用程序的生命周期内可以被共享和重用。下面是关于 Angular 服务的实现及其在全生命周期中的应用原因的详细说明。</p><h3 id="1-服务的基本实现"><a href="#1-服务的基本实现" class="headerlink" title="1. 服务的基本实现"></a>1. 服务的基本实现</h3><p>服务通常是一个使用 <code>@Injectable</code> 装饰器的类，允许将其注入到组件、其他服务或指令中。下面是一个简单的服务示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> <span class="comment">// 这里的 root 表示该服务在整个应用的生命周期内是单例的</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ExampleService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getData</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setData</span>(<span class="attr">newData</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = newData;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-服务的生命周期管理"><a href="#2-服务的生命周期管理" class="headerlink" title="2. 服务的生命周期管理"></a>2. 服务的生命周期管理</h3><p>服务的生命周期与应用程序的生命周期相同。这是通过提供服务的模块作用域来实现的。在 Angular 中，服务的实例通常是在根注入器（root injector）中创建的，从而使其在整个应用程序中共享。</p><h4 id="2-1-单例模式"><a href="#2-1-单例模式" class="headerlink" title="2.1 单例模式"></a>2.1 单例模式</h4><p>使用 <code>@Injectable</code> 装饰器并将 <code>providedIn</code> 设置为 <code>root</code>，服务会被注册为单例，这意味着在应用的生命周期内只会创建一个服务实例。所有注入了该服务的组件和其他服务都将共享同一个实例。这样做的原因有以下几点：</p><ul><li><p><strong>数据共享</strong>：多个组件可以共享和访问同一个服务实例的数据，便于进行状态管理和跨组件通信。</p></li><li><p><strong>性能优化</strong>：由于只创建一个实例，减少了内存使用和性能开销。</p></li><li><p><strong>全局访问</strong>：任何组件或服务都可以随时访问和调用该服务的方法。</p></li></ul><h3 id="3-服务的使用场景"><a href="#3-服务的使用场景" class="headerlink" title="3. 服务的使用场景"></a>3. 服务的使用场景</h3><ul><li><p><strong>业务逻辑处理</strong>：将复杂的业务逻辑从组件中抽离到服务中，保持组件的简洁和可维护性。</p></li><li><p><strong>数据共享和状态管理</strong>：在多个组件之间共享数据，避免了 prop drilling（层层传递数据）。</p></li><li><p><strong>HTTP 请求</strong>：通常使用服务来处理 HTTP 请求，这样可以集中管理 API 调用，方便处理错误和响应。</p></li><li><p><strong>配置和环境变量</strong>：服务可以用于存储全局配置和环境变量，供各个组件使用。</p></li></ul><h3 id="4-具体示例"><a href="#4-具体示例" class="headerlink" title="4. 具体示例"></a>4. 具体示例</h3><p>下面是一个具体示例，展示如何在组件中使用服务：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExampleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./example.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-example&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123; data &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;changeData()&quot;&gt;改变数据&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ExampleComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> exampleService: ExampleService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="property">exampleService</span>.<span class="title function_">getData</span>(); <span class="comment">// 获取服务中的数据</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeData</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">exampleService</span>.<span class="title function_">setData</span>(<span class="string">&#x27;新数据&#x27;</span>); <span class="comment">// 修改服务中的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="property">exampleService</span>.<span class="title function_">getData</span>(); <span class="comment">// 更新组件中的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>ExampleComponent</code> 使用 <code>ExampleService</code> 来获取和设置数据。无论有多少个 <code>ExampleComponent</code> 实例，它们都会共享同一个 <code>ExampleService</code> 实例。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><ul><li>Angular 服务是应用程序的单例对象，具有全局共享的特性。</li><li>服务的生命周期与整个应用程序相同，使得跨组件数据共享和业务逻辑管理变得简单而高效。</li><li>通过使用服务，能够提高代码的可维护性和可重用性，同时简化组件的结构。</li></ul><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><ol><li>使用 srcset 和 sizes 属性</li><li>使用NgOptimizedImage</li><li>使用picture结合webp格式</li></ol><h2 id="Angular做到多少版本，要从14升级到18怎么做"><a href="#Angular做到多少版本，要从14升级到18怎么做" class="headerlink" title="Angular做到多少版本，要从14升级到18怎么做"></a>Angular做到多少版本，要从14升级到18怎么做</h2><p>使用<a href="https://angular.dev/update-guide">https://angular.dev/update-guide</a></p><h2 id="敏捷开发相较于之前的瀑布流的区别，敏捷开发的时间估算，多久一个sprint"><a href="#敏捷开发相较于之前的瀑布流的区别，敏捷开发的时间估算，多久一个sprint" class="headerlink" title="敏捷开发相较于之前的瀑布流的区别，敏捷开发的时间估算，多久一个sprint"></a>敏捷开发相较于之前的瀑布流的区别，敏捷开发的时间估算，多久一个sprint</h2><p>敏捷开发与传统的瀑布流开发方法相比，具有一些显著的区别，尤其是在流程、灵活性和团队协作方面。以下是一些主要区别和敏捷开发中时间估算的相关信息。</p><h3 id="1-敏捷开发与瀑布流的区别"><a href="#1-敏捷开发与瀑布流的区别" class="headerlink" title="1. 敏捷开发与瀑布流的区别"></a>1. 敏捷开发与瀑布流的区别</h3><ul><li><p><strong>开发流程</strong>：</p><ul><li><strong>瀑布流</strong>：线性流程，依次进行需求分析、设计、开发、测试和维护。每个阶段完成后再进入下一个阶段，通常不允许返回。</li><li><strong>敏捷开发</strong>：迭代和增量的流程，强调短周期的开发和频繁交付，每个迭代（Sprint）都会进行需求、设计、开发、测试等步骤。</li></ul></li><li><p><strong>灵活性和适应性</strong>：</p><ul><li><strong>瀑布流</strong>：对需求变化的适应性较差，需求一旦确定，后续阶段难以调整。</li><li><strong>敏捷开发</strong>：鼓励频繁反馈和适应变化，团队可以根据用户反馈和市场变化灵活调整需求。</li></ul></li><li><p><strong>用户参与</strong>：</p><ul><li><strong>瀑布流</strong>：用户通常在初期提供需求，后续参与较少，直到最终交付。</li><li><strong>敏捷开发</strong>：用户和利益相关者持续参与，通过迭代反馈确保产品符合用户需求。</li></ul></li><li><p><strong>团队协作</strong>：</p><ul><li><strong>瀑布流</strong>：团队角色较为分明，沟通相对较少，依赖文档。</li><li><strong>敏捷开发</strong>：强调团队的跨职能协作，定期召开会议（如站会、回顾会）促进沟通和协作。</li></ul></li></ul><h3 id="2-敏捷开发的时间估算"><a href="#2-敏捷开发的时间估算" class="headerlink" title="2. 敏捷开发的时间估算"></a>2. 敏捷开发的时间估算</h3><p>在敏捷开发中，时间估算通常涉及以下几个方面：</p><ul><li><p><strong>Sprint 的周期</strong>：</p><ul><li>一个 Sprint 通常持续 <strong>1 到 4 周</strong>，常见的做法是 2 周。团队可以根据项目需求和团队成员的工作节奏选择合适的周期。</li></ul></li><li><p><strong>时间盒（Time Box）</strong>：</p><ul><li>敏捷方法强调使用时间盒来控制工作节奏。在每个 Sprint 中，团队会定义要完成的任务，并在规定的时间内努力完成。</li></ul></li><li><p><strong>故事点和任务估算</strong>：</p><ul><li>使用故事点（Story Points）来评估工作量，通常基于相对复杂度和完成时间。团队可以通过回顾历史数据来进行更准确的时间估算。</li></ul></li></ul><h3 id="3-Sprint-计划"><a href="#3-Sprint-计划" class="headerlink" title="3. Sprint 计划"></a>3. Sprint 计划</h3><ul><li><p><strong>Sprint 计划会议</strong>：在每个 Sprint 开始时，团队会召开计划会议，确定要在该 Sprint 中完成的任务。团队会根据优先级和容量进行任务分配。</p></li><li><p><strong>每日站会</strong>：在 Sprint 进行中，团队每天进行短暂的站会，讨论进展、遇到的问题和计划。</p></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>敏捷开发</strong>：强调迭代、灵活性和团队协作，能够快速响应变化。</li><li><strong>Sprint 周期</strong>：通常为 1 到 4 周，2 周为常见做法。</li><li><strong>时间估算</strong>：使用故事点、任务估算和时间盒的方法来提高准确性和效率。</li></ul><p>这些特点使敏捷开发适合快速变化的项目需求和高动态环境。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> angular </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下2024年10月18号和前同事的一次模拟面试</title>
      <link href="/2024/10/20/front-end/mock-interview/"/>
      <url>/2024/10/20/front-end/mock-interview/</url>
      
        <content type="html"><![CDATA[<h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><p>敏捷开发是一种以<strong>迭代</strong>和<strong>增量</strong>的方式来开发软件的流程，它注重<strong>团队协作</strong>、<strong>快速反馈</strong>以及<strong>应对变化</strong>的能力。在敏捷开发中，<strong>Sprint（冲刺）</strong> 是一个核心概念。下面我为你总结了敏捷开发流程中的<strong>Sprint</strong>、迭代节奏、和时间周期：</p><h3 id="1-Sprint（冲刺）"><a href="#1-Sprint（冲刺）" class="headerlink" title="1. Sprint（冲刺）"></a>1. <strong>Sprint（冲刺）</strong></h3><ul><li><strong>Sprint</strong> 是敏捷开发的基础单位，通常是一个<strong>固定时间周期</strong>，通常为<strong>1到4周</strong>。</li><li>每个 Sprint 都是一个<strong>小型迭代周期</strong>，在这个周期中，团队需要完成一定数量的工作（通常是具体的功能、用户故事或任务）。</li><li><strong>目标</strong>是在每个 Sprint 结束时交付一个<strong>可工作的产品增量</strong>，即使不一定是完整产品，也应该是能够演示或发布的可用功能。</li></ul><h3 id="2-迭代节奏"><a href="#2-迭代节奏" class="headerlink" title="2. 迭代节奏"></a>2. <strong>迭代节奏</strong></h3><p>敏捷开发的迭代节奏是基于 Sprint 的。团队会按照以下步骤循环进行开发：</p><ol><li><p><strong>Sprint 计划会议（Sprint Planning）</strong>：</p><ul><li>在每个 Sprint 开始时，团队会召开计划会议，确定当前 Sprint 的<strong>目标</strong>和<strong>待完成的任务</strong>。这些任务一般从<strong>产品待办事项列表（Product Backlog）</strong>中选取，并拆分成更小的<strong>用户故事（User Stories）</strong>或<strong>任务（Tasks）</strong>。</li><li>团队会评估每个任务的工作量，并确保任务的总量符合 Sprint 的工作周期。</li></ul></li><li><p><strong>Sprint 执行</strong>：</p><ul><li>团队根据计划开始执行任务，过程中可能会有<strong>每日站会（Daily Standup）</strong>，团队成员汇报进展、讨论问题以及调整任务优先级。</li><li>每个 Sprint 中，团队尽量保持快速迭代，在尽可能短的时间内交付有价值的功能。</li></ul></li><li><p><strong>Sprint 评审会议（Sprint Review）</strong>：</p><ul><li>在 Sprint 结束时，团队会召开评审会议，展示在 Sprint 中完成的工作成果，通常是一个<strong>可演示的产品功能</strong>。</li><li>团队与利益相关者一起<strong>检验产品增量</strong>，并对下一个 Sprint 的工作进行讨论和调整。</li></ul></li><li><p><strong>Sprint 回顾会议（Sprint Retrospective）</strong>：</p><ul><li>在 Sprint 结束后，团队还会召开回顾会议，讨论 Sprint 中的<strong>问题</strong>和<strong>改进点</strong>。</li><li>这个会议帮助团队在每个 Sprint 后不断改进工作流程、沟通方式和工具。</li></ul></li></ol><h3 id="3-时间周期"><a href="#3-时间周期" class="headerlink" title="3. 时间周期"></a>3. <strong>时间周期</strong></h3><ul><li>每个 Sprint 的时间周期通常是<strong>固定的</strong>，并且根据团队和项目的需求而定，常见的周期为：<ul><li><strong>1周</strong>：适用于需求非常紧急的项目，团队需要快速反馈和迭代，但要求团队有很强的适应能力。</li><li><strong>2周</strong>：这是最常见的周期，能让团队有足够的时间完成可交付的功能，同时保持灵活应对变化。</li><li><strong>3到4周</strong>：适用于更复杂的功能开发，需要较长时间来完成，但仍然遵循敏捷的短周期迭代原则。</li></ul></li></ul><h3 id="4-持续交付和反馈"><a href="#4-持续交付和反馈" class="headerlink" title="4. 持续交付和反馈"></a>4. <strong>持续交付和反馈</strong></h3><p>敏捷开发的一个核心目标是尽早交付可用的产品并从用户处获得反馈。因此，每个 Sprint 结束时，团队都会交付<strong>可工作的产品增量</strong>，并依据<strong>用户反馈</strong>调整下一阶段的开发工作。这个流程反复进行，直到项目完成或需求停止。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>敏捷开发流程是通过多个 Sprint 迭代实现的，每个 Sprint 通常持续 1-4 周。在每个 Sprint 中，团队会计划任务，进行开发和测试，并交付可用的产品增量。通过频繁的反馈和不断优化，团队能够应对需求变化并持续改进开发效率。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="javascript的闭包是什么，能不能写一个例子"><a href="#javascript的闭包是什么，能不能写一个例子" class="headerlink" title="javascript的闭包是什么，能不能写一个例子"></a>javascript的闭包是什么，能不能写一个例子</h3><p>闭包是指函数可以记住并访问它所在的词法作用域，即使这个函数在词法作用域之外执行。这是 JavaScript 强大的功能之一，常用于隐藏数据、模拟私有变量、创建回调函数等场景。</p><p>闭包的三个特性：</p><ul><li>函数嵌套：闭包通常是内部函数访问外部函数的变量。</li><li>作用域链：函数在定义时绑定了其所在的词法作用域。</li><li>外部函数执行后，内部函数依然能够访问外部函数的变量。</li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 外部函数的局部变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 返回一个内部函数，形成闭包</span></span><br><span class="line">    count++; <span class="comment">// 内部函数能够访问外部函数的变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>(); <span class="comment">// 调用外部函数，返回内部函数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">counter</span>(); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="title function_">counter</span>(); <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="title function_">counter</span>(); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure><h3 id="javascript的原型链是什么"><a href="#javascript的原型链是什么" class="headerlink" title="javascript的原型链是什么"></a>javascript的原型链是什么</h3><p>JavaScript的原型链是用于实现继承的一种机制。</p><ul><li>每个对象都有一个__proto__ 属性，指向它的原型对象。</li><li>如果在对象上找不到某个属性或方法，JavaScript 会沿着原型链向上查找，直到找到该属性或方法，或者到达原型链的顶端 null。</li><li>函数的 prototype 属性是其实例对象的原型。通过这个机制，JavaScript 实现了属性和方法的共享和继承。</li><li>原型链的顶端是 Object.prototype，它的 __proto__ 指向 null，表示原型链的结束</li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, my name is John</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="javascript中new运算符做了什么"><a href="#javascript中new运算符做了什么" class="headerlink" title="javascript中new运算符做了什么"></a>javascript中new运算符做了什么</h3><p>当你在 JavaScript 中使用 new 运算符时，它会执行以下四个步骤：</p><ul><li>创建一个新的空对象。</li><li>将这个新对象的__proto__属性设置为构造函数的prototype对象，从而实现原型链继承。</li><li>调用构造函数，并将新对象作为函数内部的 this，让构造函数能够为新对象添加属性。</li><li>如果构造函数返回的是对象类型的值，则返回这个对象；否则，返回新创建的对象</li></ul><h3 id="let和const有什么区别"><a href="#let和const有什么区别" class="headerlink" title="let和const有什么区别"></a>let和const有什么区别</h3><p>let 允许重新赋值，而 const 不允许重新赋值。const 必须在声明时初始化，而 let 可以在声明后再赋值。</p><ul><li>使用 let：适合需要在后续修改变量值的场景。</li><li>使用 const：适合声明不需要重新赋值的常量，尤其是用来声明不可变的原始类型（如数字、字符串）。对于对象和数组，虽然引用不能改变，但内部内容可以修改。</li></ul><h3 id="interface和type的区别，-interface能不能继承type？"><a href="#interface和type的区别，-interface能不能继承type？" class="headerlink" title="interface和type的区别， interface能不能继承type？"></a>interface和type的区别， interface能不能继承type？</h3><p>interface 和 type 都可以定义对象的形状，但 interface 更适合面向对象的场景，而 type 更灵活，适合定义联合类型、元组等复杂类型。<br>interface 可以继承 type，反过来也可以通过交叉类型实现扩展。<br>interface 支持合并声明，这在库开发和扩展时非常有用，而 type 则无法合并。</p><h3 id="apply-call-bind-的区别"><a href="#apply-call-bind-的区别" class="headerlink" title="apply, call, bind 的区别"></a>apply, call, bind 的区别</h3><p>apply、call 和 bind 是 JavaScript 中用来改变函数内部 this 指向的方法，它们的核心功能是类似的，但在使用方式和行为上有所不同。</p><p>核心区别总结：</p><ol><li>apply：传递参数时使用数组形式，立即调用函数。</li><li>call：传递参数时使用逗号分隔，立即调用函数。</li><li>bind：返回一个绑定了 this 的新函数，但不会立即执行。</li></ol><p>书写apply：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context, argsArray</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 如果没有提供 context，则默认设置为全局对象 (在浏览器中是 window，在 Node.js 中是 global)</span></span><br><span class="line">  context = context || globalThis;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 给 context 添加一个临时方法，指向当前的函数 (this)</span></span><br><span class="line">  <span class="keyword">const</span> fnSymbol = <span class="title class_">Symbol</span>();  <span class="comment">// 使用 Symbol 避免属性冲突</span></span><br><span class="line">  context[fnSymbol] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 执行函数，并传入参数数组</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(argsArray)) &#123;</span><br><span class="line">    result = context[fnSymbol](...argsArray);  <span class="comment">// 解构数组传参</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context[fnSymbol]();  <span class="comment">// 如果没有参数数组，则直接调用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 删除临时属性</span></span><br><span class="line">  <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 返回执行结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>书写call：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 如果没有提供 context，则默认设置为全局对象 (在浏览器中是 window，在 Node.js 中是 global)</span></span><br><span class="line">  context = context || globalThis;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 给 context 添加一个临时方法，指向当前的函数 (this)</span></span><br><span class="line">  <span class="keyword">const</span> fnSymbol = <span class="title class_">Symbol</span>();  <span class="comment">// 使用 Symbol 避免属性冲突</span></span><br><span class="line">  context[fnSymbol] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 执行函数，并传入参数</span></span><br><span class="line">  <span class="keyword">const</span> result = context[fnSymbol](...args);  <span class="comment">// 通过展开运算符传入参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 删除临时属性</span></span><br><span class="line">  <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 返回执行结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手写bind：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 保存原函数</span></span><br><span class="line">  <span class="keyword">const</span> originalFunc = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个新函数</span></span><br><span class="line">  <span class="keyword">const</span> boundFunction = <span class="keyword">function</span>(<span class="params">...newArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否作为构造函数调用</span></span><br><span class="line">    <span class="comment">// 如果是构造函数调用，`this` 指向实例对象，应该忽略绑定的 `context`</span></span><br><span class="line">    <span class="comment">// 否则使用绑定的 `context`</span></span><br><span class="line">    <span class="keyword">const</span> isNew = <span class="variable language_">this</span> <span class="keyword">instanceof</span> boundFunction;</span><br><span class="line">    <span class="keyword">const</span> thisArg = isNew ? <span class="variable language_">this</span> : context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 apply 绑定 `this`，合并 args 和 newArgs</span></span><br><span class="line">    <span class="keyword">return</span> originalFunc.<span class="title function_">apply</span>(thisArg, [...args, ...newArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继承原函数的 prototype，确保绑定后的函数是原函数的实例</span></span><br><span class="line">  <span class="keyword">if</span> (originalFunc.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    boundFunction.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(originalFunc.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> boundFunction;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="react的事件合成"><a href="#react的事件合成" class="headerlink" title="react的事件合成"></a>react的事件合成</h3><p>在 React 中，事件是通过合成事件（SyntheticEvent）机制处理的，它是对原生 DOM 事件的一种跨浏览器的封装，确保事件在所有浏览器中都有一致的行为。React 使用事件委托的方式，将所有事件统一绑定在根元素上，通过事件冒泡来捕捉子元素的事件触发。这种机制可以显著提高性能，因为它避免了在每个 DOM 节点上绑定独立的事件处理程序。</p><p>SyntheticEvent 的接口与浏览器的原生事件一致，像 preventDefault() 和 stopPropagation() 都可以直接使用。但需要注意的是，SyntheticEvent 是可回收的，React 会在事件处理后自动销毁事件对象，减少内存占用。如果需要在异步操作中使用事件对象，可以使用 event.persist() 方法防止事件被回收。</p><p>总的来说，React 的事件合成机制提供了性能优化和跨浏览器兼容性，是事件处理的基础工具。在 React 18 中，合成事件先于原生事件处理是为了确保性能优化、一致性和更好的用户体验。</p><p>要获取合成事件中的原生事件，你可以通过 event.nativeEvent 属性来访问。这允许你获取浏览器的原生事件对象，并直接与之进行交互。</p><p>在 React 中，阻止合成事件（SyntheticEvent）冒泡与阻止原生 DOM 事件冒泡的方法类似。你可以使用合成事件对象的 stopPropagation() 方法来阻止事件的冒泡行为。</p><p>当你调用 event.stopPropagation() 时，React 会阻止该事件继续向上传播到父级元素的事件处理程序。</p><h3 id="react的vdom是什么，有什么优势"><a href="#react的vdom是什么，有什么优势" class="headerlink" title="react的vdom是什么，有什么优势"></a>react的vdom是什么，有什么优势</h3><p>React 的 Virtual DOM（虚拟 DOM）是 React 用来优化 UI 更新的一种技术。它是实际 DOM 的轻量级副本，通过在内存中模拟 DOM 树来进行高效的 UI 渲染和更新。</p><p>Virtual DOM 工作原理：</p><ol><li>当 React 组件首次渲染时，React 会在内存中创建一个 Virtual DOM 树。这个虚拟 DOM 是 React 元素的对象表示，它轻量且易于操作</li><li>当组件的状态或属性发生变化时，React 会重新计算新的 Virtual DOM 树，但不会立即更新实际的 DOM</li><li>React 使用高效的差异算法（reconciliation）来比较新旧 Virtual DOM 树。它会找出新旧 Virtual DOM 树之间的差异（diff），即需要更新的部分</li><li>React 将这些差异应用到实际的 DOM 上，通过一次性最小化的更新来提升性能</li></ol><p>Virtual DOM 的优势：</p><ol><li><strong>性能优化</strong>: 直接操作真实 DOM 是比较昂贵的，因为 DOM 的操作会导致浏览器的重新布局和重绘。而 Virtual DOM 是在内存中操作的，速度快得多。通过批量更新 DOM 的方式，React 将频繁的小改动合并为一次大的更新，减少不必要的重排和重绘，极大地提高了性能</li><li><strong>跨平台一致性</strong>: Virtual DOM 提供了一种抽象的 DOM 结构，它不依赖于特定的平台。因此，React 可以用于浏览器环境、移动应用（React Native）、甚至服务器端渲染等不同平台，增强了代码的复用性</li><li><strong>可预测的 UI 更新</strong>: 通过 Virtual DOM 和 React 的状态驱动（declarative）设计，React 可以确保 UI 的更新是可预测的，开发者只需专注于描述 UI 应该“如何呈现”，而不是手动控制具体的 DOM 更新过程</li><li><strong>简化复杂操作</strong>: 在复杂的应用中，直接操作 DOM 可能会导致难以维护和调试的问题。React 的 Virtual DOM 屏蔽了复杂的 DOM 操作，让开发者只需要定义组件的状态和结构，React 自动处理 DOM 操作</li></ol><p>Virtual DOM 的局限性：</p><ol><li><strong>不总是最快的</strong>：虽然 Virtual DOM 提供了高效的更新机制，但在某些非常简单或特定的场景下，直接操作 DOM 可能比使用 Virtual DOM 更快</li><li><strong>学习成本</strong>： 需要理解 React 的状态管理、生命周期、Virtual DOM 等概念，可能对初学者有一定的学习门槛</li></ol><p>React 的 Virtual DOM 是一种提升性能的优化技术，通过在内存中创建轻量级的虚拟 DOM 树，配合差异算法和批量更新策略，有效地提高了 UI 更新的效率，并简化了跨平台开发的复杂性。</p><h3 id="react中的hoc组件"><a href="#react中的hoc组件" class="headerlink" title="react中的hoc组件"></a>react中的hoc组件</h3><p>在 React 中，HOC（Higher-Order Component，高阶组件） 是一种组件复用的高级技术。HOC 本质上是一个函数，它接受一个组件作为参数，并返回一个新的组件。高阶组件常用于逻辑复用、增强现有组件的功能，而不改变组件本身的实现。</p><p>HOC 的定义：</p><ul><li>高阶组件是一个纯函数，它不修改传入的组件，只是返回一个增强后的新组件。</li></ul><p>HOC 的工作原理：</p><ul><li><strong>参数是组件</strong>：HOC 接收一个现有组件作为参数。</li><li><strong>返回新组件</strong>：它会返回一个新组件，该组件可以基于原组件进行额外的功能扩展。</li><li><strong>不修改原组件</strong>：HOC 不直接修改原组件，而是通过包装、组合的方式增强功能。</li></ul><p>HOC 的常见用途：</p><ul><li><strong>复用逻辑</strong>：多个组件共享相同的逻辑时，可以使用 HOC 将该逻辑提取出来。</li><li><strong>处理权限控制</strong>：HOC 可用于权限校验逻辑，例如检查用户是否有访问权限。</li><li><strong>操作 props</strong>：HOC 可以修改、增加或删除组件的 props。</li><li><strong>操作生命周期</strong>：通过 HOC 可以控制组件的生命周期，以实现缓存、请求拦截等功能。</li></ul><h3 id="react组件间的通信方式"><a href="#react组件间的通信方式" class="headerlink" title="react组件间的通信方式"></a>react组件间的通信方式</h3><ul><li><strong>父子组件通信</strong>：父组件通过props将数据传递给子组件。React 的数据流是单向的，从父组件流向子组件</li><li><strong>子组件向父组件通信（回调函数 Props</strong>：子组件无法直接修改父组件的数据，因此子组件可以通过调用父组件传递的回调函数来向父组件传递信息。父组件可以在回调函数中接收子组件传递的数据并更新状态</li><li><strong>兄弟组件通信（通过父组件中转）</strong>：由于 React 的单向数据流，兄弟组件之间不能直接通信。通常通过父组件中转实现兄弟组件间的通信。父组件将一个回调函数传递给一个子组件，当这个子组件触发回调函数时，父组件更新状态，然后将状态传递给另一个子组件</li><li><strong>跨层级组件通信（Context API）</strong>: 对于层级嵌套较深的组件，逐层通过 props 传递数据会导致代码臃肿。此时可以使用 Context API 来实现跨层级组件的通信。Context 提供了一个全局的状态或函数，允许任意组件订阅并访问这些数据</li><li><strong>全局状态管理（Redux、MobX 等）</strong>: 对于复杂的应用，尤其是有大量组件需要共享状态时，使用 Redux 或 MobX 等状态管理库可以帮助管理全局状态。Redux 的核心思想是将状态集中管理，组件通过订阅状态和分发（dispatch）动作来实现通信</li><li><strong>Refs（父子组件直接引用通信）</strong>: 有时需要直接访问子组件的某个实例或 DOM 节点，此时可以通过 Refs 实现父组件与子组件的通信。父组件可以通过 ref 获取子组件实例，并调用子组件的方法或访问子组件的 DOM 节点</li></ul><h3 id="css中垂直居中的4种方式"><a href="#css中垂直居中的4种方式" class="headerlink" title="css中垂直居中的4种方式"></a>css中垂直居中的4种方式</h3><ul><li>使用 flexbox 实现垂直居中</li><li>使用 grid 实现垂直居中</li><li>使用 absolute positioning 和 transform 实现垂直居中</li><li>使用 line-height 实现垂直居中（仅限单行文本）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> nodejs </category>
          
          <category> 敏捷开发 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的闭包</title>
      <link href="/2024/10/20/front-end/javascript-closure/"/>
      <url>/2024/10/20/front-end/javascript-closure/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>闭包（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，词法环境）的引用的组合。换而言之，闭包让开发者可以从内部函数访问外部函数的作用域。在 JavaScript 中，闭包就是能够读取其他函数内部变量的, 闭包会随着函数的创建而被同时创建。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>本部分例子来自chatgpt</p></blockquote><ol><li>创建私有变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>());</span><br></pre></td></tr></table></figure><ol start="2"><li>保持函数执行上下文</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>(); <span class="comment">// 输出 &quot;John&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>函数柯里化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFive</span>(<span class="number">10</span>)); <span class="comment">// 输出 15</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>延迟执行和异步编程</li></ol><p>闭包常用于延迟执行和处理异步操作，因为它能够保存外部函数中的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delayedMessage</span>(<span class="params">message, delay</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>模拟模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> privateVar = <span class="string">&quot;I&#x27;m private&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">privateMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">publicMethod</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">privateMethod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">publicMethod</span>(); <span class="comment">// 输出 &quot;I&#x27;m private&quot;</span></span><br></pre></td></tr></table></figure><p>总结来说，闭包在 JavaScript 中用于数据的封装、状态的保持、异步编程以及提高代码的灵活性与模块化。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。</p><p>代码片段一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">　　name : <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line"></span><br><span class="line">　　getNameFunc : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">　　name : <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line"></span><br><span class="line">　　getNameFunc : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        that = <span class="variable language_">this</span>;</span><br><span class="line">　　　  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　　  <span class="keyword">return</span> that.<span class="property">name</span>;</span><br><span class="line">　　　  &#125;;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()());</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">闭包</a></li><li><a href="https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">学习Javascript闭包（Closure）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose备份Postgres Docker容器的解决方案</title>
      <link href="/2024/07/10/back-end/back-end-how-to-backup-postgres-docker-container/"/>
      <url>/2024/07/10/back-end/back-end-how-to-backup-postgres-docker-container/</url>
      
        <content type="html"><![CDATA[<h1 id="使用docker-compose备份Postgres-Docker容器的解决方案"><a href="#使用docker-compose备份Postgres-Docker容器的解决方案" class="headerlink" title="使用docker-compose备份Postgres Docker容器的解决方案"></a>使用docker-compose备份Postgres Docker容器的解决方案</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>使用<code>pg_dumpall</code>命令备份Postgres数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> &lt;postgres_service&gt; pg_dumpall -U postgres &gt; dump_`<span class="built_in">date</span> +%Y-%m-%d<span class="string">&quot;_&quot;</span>%H_%M_%S`.sql</span><br></pre></td></tr></table></figure><ol><li><code>docker-compose exec &lt;postgres_service&gt;</code> 在名为<code>&lt;postgres_service&gt;</code>的Postgres容器上执行命令。</li><li><code>-U postgres</code> 指定数据库的用户名。Docker的默认用户名是<code>postgres</code>，如果你使用不同的用户名，请进行修改。</li></ol><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>将<code>dump_</code>date +%Y-%m-%d”<em>“%H</em>%M_%S<code>.sql</code>文件放置在<code>backup</code>文件夹中。</p><p>然后使用Docker卷将<code>backup</code>文件夹绑定到Postgres容器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">    - ./backup:/backup</span><br></pre></td></tr></table></figure><p>删除现有的Postgres容器并创建一个新的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><p>执行数据库导入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> postgres psql -f /backup/dump_xxx.sql postgres -U postgres</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wdt.im/posts/docker-compose-postgres-backup-restore/">使用docker-compose备份和恢复Postgres数据库</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何在10分钟内使用LangChain</title>
      <link href="/2024/06/09/ai/how-to-use-langchain-in-10-minutes/"/>
      <url>/2024/06/09/ai/how-to-use-langchain-in-10-minutes/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在10分钟内使用LangChain"><a href="#如何在10分钟内使用LangChain" class="headerlink" title="如何在10分钟内使用LangChain"></a>如何在10分钟内使用LangChain</h1><p><a href="https://www.langchain.com/">LangChain</a>是一个强大的Python和Javascript&#x2F;Typescript库，它可以让你快速地原型化大型语言模型应用。它允许你将LLM任务链在一起（因此得名），甚至可以让你快速轻松地运行<i>自主代理(autonomous agents)</i>。今天，我们将介绍chain的基础知识，这样你就可以立即开始你最新的LLM项目。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要讨论了LangChain的使用和优势。LangChain是一个对于希望快速创建大型语言模型应用的人来说非常有用的工具。它可以在几分钟内创建链、定义提示，甚至将多个LLM调用链接在一起以创建动态的TikTok脚本。</p><p>LangChain的优势在于其简单性和灵活性。无论你是经验丰富的开发者还是刚刚起步，LangChain的直观设计都让你能够像从未有过的那样利用大型语言模型的能力。从生成创意内容到运行自主代理，可能性是无穷无尽的。</p><p>此外，如果你正在寻找将AI集成到你现有的工作流程或产品中，TimeSurge Labs可以提供帮助。他们专注于AI咨询、开发、内部工具和LLM托管，他们的团队致力于构建AI的未来，并帮助你的业务在这个快速变化的行业中蓬勃发展。</p><blockquote><p>该部分使用AI自动生成</p></blockquote><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>Python 3.9（3.10及以上版本与LangChain的一些模块存在一些问题）。 </li><li>一个OpenAI API密钥</li></ol><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我们将创建一个Python虚拟环境，并通过这种方式安装依赖项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line"><span class="comment"># or python3, python3.9, etc depending on your setup</span></span><br><span class="line">python -m venv <span class="built_in">env</span></span><br><span class="line"><span class="built_in">source</span> <span class="built_in">env</span>/bin/activate</span><br></pre></td></tr></table></figure><p>完成以上步骤后，我们可以开始安装依赖项。在本教程中，我们只需要安装LangChain和OpenAI。最后，我们将使用python-dotenv来将OpenAI API密钥加载到环境中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain openai python-dotenv</span><br></pre></td></tr></table></figure><p>LangChain是一个非常大的库，所以下载可能需要几分钟。在下载的同时，创建一个名为.env的新文件，并将你的API密钥粘贴进去。以下是一个示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPENAI_API_KEY=Your-api-key-here</span><br></pre></td></tr></table></figure><p>一旦完成，我们就可以创建我们的第一条chain了。</p><h2 id="概念快速入门"><a href="#概念快速入门" class="headerlink" title="概念快速入门"></a>概念快速入门</h2><p>在开始之前我们需要了解一些基础的概念。</p><ol><li><b>Chain</b>: 可以被看作是一个与LLM（语言模型）交互或在列表中进行多次LLM调用的行动列表。一个链由三个简单的部分组成。<br> a. <a href="https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/">提示模板</a> - 这样你可以快速改变输入而不改变提示。<br> b. <a href="https://python.langchain.com/v0.1/docs/modules/model_io/llms/">LLM</a> - 实际运行你的提示的AI。<br> c. <a href="https://python.langchain.com/v0.1/docs/modules/model_io/output_parsers/">输出解析器</a> - 将输出转换成有用的东西，通常只是另一个字符串。</li></ol><h2 id="编写Chain"><a href="#编写Chain" class="headerlink" title="编写Chain"></a>编写Chain</h2><p> 对于这个例子，我们将编写一个生成TikTok脚本的链（毕竟我是一个<a href="https://www.urbandictionary.com/define.php?term=Zoomer">Zoomer</a>）用于一个教育频道。首先，我们需要生成一个TikTok的描述。我们将使用提示模板，以便我们可以稍后重用提示。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prompts.py</span></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">description_prompt = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;Write me a description for a TikTok about &#123;topic&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p> 这可以在chain中使用。在我们定义链之前，我们需要为chain定义一个LLM。LangChain建议大多数用户应该使用ChatOpenAI类，以获得ChatGPT API的成本效益和简单性。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># chain.py</span></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> prompts <span class="keyword">import</span> description_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># loads the .env file</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>)</span><br></pre></td></tr></table></figure><p>完成以上步骤后，我们就可以创建chain了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description_chain = LLMChain(llm=llm, prompt=description_prompt, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>现在我们可以使用<b>.predict</b>来调用新的chain。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = description_chain.predict(topic=<span class="string">&quot;Cats are cool&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><p>这是输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">😻 Unleash your inner feline aficionado! From their enchanting eyes to their purrfectly mysterious ways, cats are the epitome of coolness. 🐾 Watch as they effortlessly own their spaces, teaching us the art of relaxation and play. Whether they<span class="string">&#x27;re mastering acrobatics or curling up for a catnap, their cool vibes are undeniable. 😎 Join the cat craze and embrace the awesomeness of these four-legged trendsetters! 🐱💫 #CatsRule #CoolCats #FelineVibes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">中文翻译：😻 释放你内心的猫咪爱好者！从他们迷人的眼睛到他们完美的神秘方式，猫咪是酷的象征。🐾 观察他们如何毫不费力地拥有自己的空间，教我们放松和玩耍的艺术。无论他们是在掌握杂技还是卷起来打个猫觉，他们的酷劲是无法否认的。😎 加入猫咪狂热，拥抱这些四足潮流引领者的酷炫！🐱💫 #猫咪统治 #酷猫 #猫咪氛围</span></span><br></pre></td></tr></table></figure><p>现在我们有了一个描述，我们需要让它写一个脚本。这就是chain的作用 - 我们可以使用稍微不同的提示再次依次调用LLM。首先，让我们为下一个chain定义一个新的提示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add to prompts.py</span></span><br><span class="line"></span><br><span class="line">script_prompt = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;Write me a script for a TikTok given the following description: &#123;description&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是你现在的chain.py应该是这样子的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chain.py</span></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="comment"># this line changed!!!!!</span></span><br><span class="line"><span class="keyword">from</span> prompts <span class="keyword">import</span> description_prompt, script_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># loads the .env file</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>)</span><br><span class="line"></span><br><span class="line">description_chain = LLMChain(llm=llm, prompt=description_prompt, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">output = description_chain.predict(topic=<span class="string">&quot;Cats are cool&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># new code below this line</span></span><br><span class="line">script_chain = LLMChain(llm=llm, prompt=script_prompt)</span><br><span class="line">script = script_chain.predict(description=output, verbose=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 原文是script = description_chain.predict(description=output, verbose=True)，应该是错误</span></span><br><span class="line"><span class="built_in">print</span>(script)</span><br></pre></td></tr></table></figure><p>这是新的输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[Opening shot: A close-up of a cat<span class="string">&#x27;s mesmerizing eyes, slowly blinking.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;😻 Unleash your inner feline aficionado!&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Cut to a sleek cat walking confidently through a room, tail swaying gracefully.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;From their enchanting eyes to their purrfectly mysterious ways...&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Transition to a montage of cats lounging in different relaxed poses.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;Cats are the epitome of coolness. 🐾&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Show a cat effortlessly jumping onto a high shelf, landing with precision.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;Watch as they effortlessly own their spaces...&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Cut to a person lying on the couch while a cat playfully bats at a string toy.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;Teaching us the art of relaxation and play.&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Show a cat doing a graceful mid-air flip while chasing a feather toy.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;Whether they&#x27;</span>re mastering acrobatics...<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Transition to a cozy scene of a cat curled up in a sunlit spot, eyes half-closed.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;</span>Or curling up <span class="keyword">for</span> a catnap...<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Cut to a group of cats with various personalities and fur patterns.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;</span>Their cool vibes are undeniable.<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Show a person petting a content cat, both sharing a moment of connection.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;</span>😎 Join the cat craze <span class="keyword">and</span> embrace the awesomeness...<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Cut to a playful cat chasing its tail, accompanied by a cheerful laugh.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;</span>...of these four-legged trendsetters!<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[End with a shot of a cat sitting regally, gazing confidently into the camera.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;</span>🐱💫 <span class="comment">#CatsRule #CoolCats #FelineVibes&quot;</span></span><br><span class="line"></span><br><span class="line">[Fade out <span class="keyword">with</span> a final glimpse of a cat<span class="string">&#x27;s eyes.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Narrator (Voiceover): &quot;Because when it comes to cool, cats wrote the book.&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[End screen: &quot;Follow for more feline fun!&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Background music fades out as the TikTok video concludes.]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">中文翻译：[切换到一个玩耍的猫追逐它的尾巴的镜头，伴随着一阵欢快的笑声。]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">旁白（配音）：&quot;...这些四足的潮流引领者！&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[以一只猫坐得像皇族一样，自信地凝视着摄像机的镜头结束。]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">旁白（配音）：&quot;🐱💫 #猫咪统治 #酷猫 #猫咪氛围&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[以猫眼的最后一瞥淡出。]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">旁白（配音）：&quot;因为当谈到酷，猫咪写下了规则。&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[结束画面：&quot;关注更多的猫咪乐趣！&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[随着TikTok视频的结束，背景音乐渐渐淡出。]</span></span><br></pre></td></tr></table></figure><p>像这样使用它们是可以的，但是如果我们想要将它们链在一起呢？这就是<a href="https://python.langchain.com/docs/modules/chains/foundational/sequential_chains">Sequential Chains</a>的作用。这些允许你将多个链绑定到一个函数调用中，它们按照定义的顺序执行。有两种类型的顺序链，我们只关注简单的顺序链。将Chain导入行编辑为以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SimpleSequentialChain</span><br></pre></td></tr></table></figure><p>将LLM链移动到文件的顶部，删除print语句和.predict调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chain.py</span></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> LLMChain, SimpleSequentialChain</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="comment"># this line changed!!!!!</span></span><br><span class="line"><span class="keyword">from</span> prompts <span class="keyword">import</span> description_prompt, script_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># loads the .env file</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(model_name=<span class="string">&quot;gpt-3.5-turbo&quot;</span>)</span><br><span class="line"></span><br><span class="line">description_chain = LLMChain(llm=llm, prompt=description_prompt)</span><br><span class="line">script_chain = LLMChain(llm=llm, prompt=script_prompt)</span><br><span class="line"></span><br><span class="line">tiktok_chain = SimpleSequentialChain(chains=[description_chain, script_chain], verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">script = tiktok_chain.run(<span class="string">&quot;cats are cool&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(script)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Title: <span class="comment">#CoolCatsRule</span></span><br><span class="line"></span><br><span class="line">INT. LIVING ROOM - DAY</span><br><span class="line"></span><br><span class="line">A trendy, upbeat song begins playing as the camera pans across a stylishly decorated living room. Various cat-themed decorations can be seen, setting the perfect atmosphere <span class="keyword">for</span> showcasing the undeniable coolness of cats.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. BEDROOM - DAY</span><br><span class="line"></span><br><span class="line">A YOUNG WOMAN, <span class="keyword">in</span> her early twenties, stands <span class="keyword">in</span> front of a full-length mirror. She wears trendy clothes and holds a CAT, <span class="built_in">who</span> seems equally as cool, <span class="keyword">in</span> her arms.</span><br><span class="line"></span><br><span class="line">YOUNG WOMAN</span><br><span class="line">(looking into the mirror)</span><br><span class="line">Ready to show the world why cats rule!</span><br><span class="line"></span><br><span class="line">The young woman gently places the <span class="built_in">cat</span> on the ground as the camera zooms <span class="keyword">in</span> on the feline.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. KITCHEN - DAY</span><br><span class="line"></span><br><span class="line">A CAT sits on the kitchen counter, effortlessly balancing on one paw <span class="keyword">while</span> wearing sunglasses. The camera pans around it, capturing its cool demeanor.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. BACKYARD - DAY</span><br><span class="line"></span><br><span class="line">A CAT lounges <span class="keyword">in</span> a hammock, wearing a tiny hat and reading a book. The camera captures its relaxed and sophisticated vibe.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. LIVING ROOM - DAY</span><br><span class="line"></span><br><span class="line">The young woman sits on the couch, surrounded by a group of COOL CATS. Each <span class="built_in">cat</span> showcases their unique coolness, like one wearing a leather jacket and another playing a tiny electric guitar.</span><br><span class="line"></span><br><span class="line">YOUNG WOMAN</span><br><span class="line">(points to the cats)</span><br><span class="line">See? Cats rule!</span><br><span class="line"></span><br><span class="line">The camera zooms <span class="keyword">in</span> on the cats, showing their undeniable feline awesomeness.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. LIVING ROOM - DAY</span><br><span class="line"></span><br><span class="line">The young woman and her cool cats gather around a table, <span class="built_in">where</span> they enjoy a mini-cat party. There are cat-themed snacks, funky drinks, and even a DJ <span class="built_in">cat</span> scratching vinyl records.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. LIVING ROOM - DAY</span><br><span class="line"></span><br><span class="line">The young woman holds up a sign saying <span class="string">&quot;#CoolCatsRule&quot;</span> as the cats pose beside her. The camera pans out to reveal a fun, energetic dance routine as they all groove to the beat.</span><br><span class="line"></span><br><span class="line">CUT TO:</span><br><span class="line"></span><br><span class="line">INT. LIVING ROOM - DAY</span><br><span class="line"></span><br><span class="line">The young woman and her cool cats strike a final pose, with the camera capturing their undeniable coolness.</span><br><span class="line"></span><br><span class="line">YOUNG WOMAN</span><br><span class="line">(looking at the camera)</span><br><span class="line">Remember, folks, cats rule!</span><br><span class="line"></span><br><span class="line">The screen fades out with the hashtag <span class="comment">#CoolCatsRule displayed prominently.</span></span><br><span class="line"></span><br><span class="line">FADE OUT.</span><br><span class="line"></span><br><span class="line">中文翻译：室内。客厅 - 白天</span><br><span class="line"></span><br><span class="line">年轻女子举起一个写着<span class="string">&quot;#CoolCatsRule&quot;</span>的牌子，猫咪们在她旁边摆好姿势。摄像机拉远，展示出一个充满活力的舞蹈，他们都在随着节奏摇摆。</span><br><span class="line"></span><br><span class="line">切换到：</span><br><span class="line"></span><br><span class="line">室内。客厅 - 白天</span><br><span class="line"></span><br><span class="line">年轻女子和她酷猫们摆出最后的姿势，摄像机捕捉到他们无可否认的酷劲。</span><br><span class="line"></span><br><span class="line">年轻女子 (看着摄像机) 记住，大家，猫咪才是真正的主宰！</span><br><span class="line"></span><br><span class="line">屏幕以<span class="comment">#CoolCatsRule的标签显眼地淡出。</span></span><br><span class="line"></span><br><span class="line">淡出</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LangChain对于任何希望快速原型化大型语言模型应用的人来说都是一个游戏规则改变者。在短短几分钟内，我们已经走过了创建chain、定义提示，甚至将多个LLM调用链在一起以创建动态的TikTok脚本的过程。</p><p>LangChain的力量在于其简单性和灵活性。无论你是经验丰富的开发者还是刚刚起步，LangChain的直观设计都让你能够像从未有过的那样利用大型语言模型的能力。从生成创意内容到运行自主代理，可能性是无穷无尽的。</p><p>那么为什么等待呢？立即深入LangChain，释放你的项目中的AI潜力。如果你正在寻找将AI集成到你现有的工作流程或产品中，TimeSurge Labs在这里提供帮助。我们专注于AI咨询、开发、内部工具和LLM托管，我们的热情的AI专家团队致力于构建AI的未来，并帮助你的业务在这个快速变化的行业中蓬勃发展。今天就<a href="https://timesurgelabs.com/#contact">联系我们</a>!</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文翻译自<a href="https://dev.to/timesurgelabs/how-to-use-langchain-in-10-minutes-56e2">How To Use LangChain in 10 Minutes</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LangChain </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用bazel构建spring boot项目</title>
      <link href="/2024/02/11/back-end/use-bazel-build-and-run-spring-boot/"/>
      <url>/2024/02/11/back-end/use-bazel-build-and-run-spring-boot/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根据官网的定义，Bazel是类似于Make，Maven和Gradle的开源构建和测试工具。它使用人类可读的高级构建语言<a href="https://github.com/bazelbuild/starlark">Starlark</a>(一种基于python的方言)。 Bazel支持多种语言的项目，并为多种平台构建输出。 </p><p>从我个人角度来看，bazel是一个强大且复杂的构建系统，通过<code>build rule</code>的概念，支持多种语言、不同平台，支持构建C&#x2F;C++,Java,Android,IOS,Golang,Nodejs,Docker项目</p><p>本文的目的是使用bazel去构建并运行一个spring boot项目。</p><h1 id="配置bazel编译java项目"><a href="#配置bazel编译java项目" class="headerlink" title="配置bazel编译java项目"></a>配置bazel编译java项目</h1><p>在项目根目录中创建<code>.bazelrc</code>文件，设置bazel使用java17构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build --java_language_version=17 --java_runtime_version=17 --tool_java_language_version=17 --tool_java_runtime_version=17</span><br><span class="line"><span class="built_in">test</span>  --java_language_version=17 --java_runtime_version=17 --tool_java_language_version=17 --tool_java_runtime_version=17</span><br></pre></td></tr></table></figure><p>在根目录中创建<code>workspace</code>文件，并引入相关的java依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)</span><br><span class="line"></span><br><span class="line">RULES_JVM_EXTERNAL_TAG = &quot;6.0&quot;</span><br><span class="line">RULES_JVM_EXTERNAL_SHA = &quot;c44568854d8bb92fe0f7dd6b1e8957ae65e45e32a058727fcf62aaafbd36f17b&quot;</span><br><span class="line"></span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;rules_jvm_external&quot;,</span><br><span class="line">    strip_prefix = &quot;rules_jvm_external-%s&quot; % RULES_JVM_EXTERNAL_TAG,</span><br><span class="line">    sha256 = RULES_JVM_EXTERNAL_SHA,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip&quot; % RULES_JVM_EXTERNAL_TAG,</span><br><span class="line">        &quot;https://mirror.ghproxy.com/https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip&quot; % RULES_JVM_EXTERNAL_TAG,</span><br><span class="line">    ]</span><br><span class="line">   </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load(&quot;@rules_jvm_external//:repositories.bzl&quot;, &quot;rules_jvm_external_deps&quot;)</span><br><span class="line"></span><br><span class="line">rules_jvm_external_deps()</span><br><span class="line"></span><br><span class="line">load(&quot;@rules_jvm_external//:setup.bzl&quot;, &quot;rules_jvm_external_setup&quot;)</span><br><span class="line"></span><br><span class="line"># rules_jvm_external_setup()</span><br><span class="line"></span><br><span class="line">load(&quot;@rules_jvm_external//:specs.bzl&quot;, &quot;maven&quot;)</span><br><span class="line">load(&quot;@rules_jvm_external//:defs.bzl&quot;, &quot;maven_install&quot;)</span><br></pre></td></tr></table></figure><p>然后使用使用<code>maven_install</code>导入spring boot项目的相关依赖。<br>这里的shiro依赖被我单独拎出来做特殊处理去兼容java17</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">shiros = [</span><br><span class="line">    maven.artifact(</span><br><span class="line">        group = &quot;org.apache.shiro&quot;,</span><br><span class="line">        artifact = &quot;shiro-spring&quot;,</span><br><span class="line">        version = &quot;1.13.0&quot;,</span><br><span class="line">        classifier = &quot;jakarta&quot;,</span><br><span class="line">        exclusions = [</span><br><span class="line">            maven.exclusion(</span><br><span class="line">                  group = &quot;org.apache.shiro&quot;,</span><br><span class="line">                  artifact = &quot;shiro-core&quot;,</span><br><span class="line">            ),</span><br><span class="line">            maven.exclusion(</span><br><span class="line">                  group = &quot;org.apache.shiro&quot;,</span><br><span class="line">                  artifact = &quot;shiro-web&quot;,</span><br><span class="line">            ),</span><br><span class="line">        ]</span><br><span class="line">    ),</span><br><span class="line">    maven.artifact(</span><br><span class="line">        group = &quot;org.apache.shiro&quot;,</span><br><span class="line">        artifact = &quot;shiro-core&quot;,</span><br><span class="line">        version = &quot;1.13.0&quot;,</span><br><span class="line">        classifier = &quot;jakarta&quot;,</span><br><span class="line">    ),</span><br><span class="line">    maven.artifact(</span><br><span class="line">        group = &quot;org.apache.shiro&quot;,</span><br><span class="line">        artifact = &quot;shiro-web&quot;,</span><br><span class="line">        version = &quot;1.13.0&quot;,</span><br><span class="line">        classifier = &quot;jakarta&quot;,</span><br><span class="line">    ),</span><br><span class="line">   </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">maven_install(</span><br><span class="line">    artifacts = [</span><br><span class="line">        &quot;org.springframework.boot:spring-boot:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-loader-tools:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-loader:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter-web:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter-jdbc:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter-quartz:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter-aop:3.2.2&quot;,</span><br><span class="line"></span><br><span class="line">        #&quot;org.springframework.boot:spring-boot-configuration-processor:3.2.2&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;io.springfox:springfox-boot-starter:3.0.0&quot;,</span><br><span class="line">        &quot;com.auth0:java-jwt:3.19.4&quot;,</span><br><span class="line">        &quot;org.postgresql:postgresql:42.4.0&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;jakarta.servlet:jakarta.servlet-api:6.0.0&quot;,  </span><br><span class="line">        &#x27;javax.annotation:javax.annotation-api:1.3.2&#x27;,</span><br><span class="line"></span><br><span class="line">        &quot;org.springframework.boot:spring-boot-devtools:3.2.2&quot;,</span><br><span class="line">        &quot;org.springframework.boot:spring-boot-starter-test:3.2.2&quot;</span><br><span class="line">         </span><br><span class="line">    ] + shiros,</span><br><span class="line">    fetch_sources = True,</span><br><span class="line">    repositories = [</span><br><span class="line">        &quot;https://maven.aliyun.com/repository/public/&quot;,</span><br><span class="line">        &quot;https://maven.aliyun.com/nexus/content/groups/public/&quot;,</span><br><span class="line">        &quot;http://uk.maven.org/maven2&quot;,</span><br><span class="line">        &quot;https://maven.google.com&quot;,</span><br><span class="line">        &quot;https://repo1.maven.org/maven2&quot;,</span><br><span class="line">    ],</span><br><span class="line">    # maven_install_json = &quot;//:maven_install.json&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>maven_install_json = &quot;//:maven_install.json&quot;</code>目前是被注视掉的，这是因为我们需要自动生成改文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel run @maven//:pin </span><br></pre></td></tr></table></figure><p>执行成功之后需要在<code>workspace</code>中给<code>maven_install</code>添加<code>maven_install_json</code>属性, 并将加载<code>@maven//:defs.bzl</code>中的<code>pinned_maven_install</code>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">maven_install(</span><br><span class="line">    artifacts = # ...,</span><br><span class="line">    repositories = # ...,</span><br><span class="line">    maven_install_json = &quot;@//:maven_install.json&quot;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load(&quot;@maven//:defs.bzl&quot;, &quot;pinned_maven_install&quot;)</span><br><span class="line">pinned_maven_install()</span><br></pre></td></tr></table></figure><p>在更新maven依赖的话，那么可以使用下面的依赖更新<code>maven_install.json</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel run @unpinned_maven//:pin</span><br></pre></td></tr></table></figure><p><code>maven_install_json</code>是可以不用配置的，但是我推荐尽量配置。它有两个好处，可重复性和速度（reproducibility and speed）。</p><p>在根目录创建<code>BUILD.bazel</code>进行编译java项目的准备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">oad(&quot;@rules_java//java:defs.bzl&quot;, &quot;java_binary&quot;, &quot;java_library&quot;, &quot;java_test&quot;)</span><br><span class="line"></span><br><span class="line">package(default_visibility = [&quot;//visibility:public&quot;])</span><br><span class="line"></span><br><span class="line">java_library(</span><br><span class="line">    name = &quot;jobs-lib&quot;,</span><br><span class="line">    srcs = glob([</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/api/advice/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/api/controller/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/api/interceptor/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/base/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/base/**/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/config/**/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/pojo/**/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/security/**/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/service/**/*.java&quot;,</span><br><span class="line">        &quot;src/main/java/org/daming/jobs/task/**/*.java&quot;,</span><br><span class="line">    ]),</span><br><span class="line">    resources = glob([&quot;src/main/resources/**&quot;]),</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_starter_web&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_starter_jdbc&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_starter_quartz&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_starter_aop&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@maven//:io_springfox_springfox_boot_starter&quot;,</span><br><span class="line">        &quot;@maven//:io_springfox_springfox_core&quot;,</span><br><span class="line">        &quot;@maven//:io_springfox_springfox_spi&quot;,</span><br><span class="line">        &quot;@maven//:io_springfox_springfox_oas&quot;,</span><br><span class="line">        &quot;@maven//:io_springfox_springfox_spring_web&quot;,</span><br><span class="line">        &quot;@maven//:io_swagger_swagger_annotations&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@maven//:com_auth0_java_jwt&quot;,</span><br><span class="line">        &quot;@maven//:org_postgresql_postgresql&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_devtools&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_loader&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_loader_tools&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_boot_spring_boot_autoconfigure&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_aop&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_beans&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_core&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_context&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_expression&quot;,</span><br><span class="line">        &quot;@maven//:org_springframework_spring_web&quot;,</span><br><span class="line"></span><br><span class="line">        # &quot;@maven//:org_apache_shiro_shiro_spring_boot_starter&quot;,</span><br><span class="line">        &quot;@maven//:org_apache_shiro_shiro_core_jakarta&quot;,</span><br><span class="line">        &quot;@maven//:org_apache_shiro_shiro_spring_jakarta&quot;,</span><br><span class="line">        &quot;@maven//:org_apache_shiro_shiro_web_jakarta&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@maven//:org_slf4j_slf4j_api&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@maven//:org_quartz_scheduler_quartz&quot;,</span><br><span class="line">        &quot;@maven//:org_aspectj_aspectjweaver&quot;,</span><br><span class="line">        &quot;@maven//:org_apache_tomcat_embed_tomcat_embed_core&quot;,</span><br><span class="line">        &quot;@maven//:jakarta_servlet_jakarta_servlet_api&quot;,  </span><br><span class="line">        &quot;@maven//:jakarta_annotation_jakarta_annotation_api&quot;,</span><br><span class="line">        &quot;@maven//:jakarta_xml_bind_jakarta_xml_bind_api&quot;,</span><br><span class="line">        &quot;@maven//:com_fasterxml_jackson_core_jackson_core&quot;,</span><br><span class="line">        &quot;@maven//:com_fasterxml_jackson_core_jackson_databind&quot;</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">java_binary(</span><br><span class="line">    name = &quot;jobs&quot;,</span><br><span class="line">    main_class = &quot;org.daming.jobs.JobsApplication&quot;,</span><br><span class="line">    runtime_deps = [&quot;:jobs-lib&quot;],</span><br><span class="line">    deploy_manifest_lines = &#123;</span><br><span class="line">        &quot;Main-Class&quot;: &quot;org.daming.jobs.JobsApplication&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后我们可以执行bazel命令去构建一个java项目了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 构建</span><br><span class="line">bazel build //:jobs</span><br><span class="line"></span><br><span class="line"># 构建并运行</span><br><span class="line">bazel run //:jobs</span><br></pre></td></tr></table></figure><p>然后你会发现构建没有问题，但是运行会报错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span> git:(master) ✗ java -jar bazel-bin/jobs.jar            </span><br><span class="line">no main manifest attribute, <span class="keyword">in</span> bazel-bin/jobs.jar</span><br></pre></td></tr></table></figure><p>由于Springboot的代码需要使用Springboot loader进行启动，Springboot程序的打包逻辑与普通的Java程序不同。这意味着，Bazel原生的 java_binary 无法正常启动Springboot程序。</p><p>所以我们需要给bazel配置spring相关支持。</p><h1 id="配置rule-spring去构建运行spring-boot"><a href="#配置rule-spring去构建运行spring-boot" class="headerlink" title="配置rule_spring去构建运行spring boot"></a>配置rule_spring去构建运行spring boot</h1><p>我们使用<a href="https://github.com/salesforce/rules_spring">salesforce的rules_spring</a>定义好了的rule去帮助我们构建spring boot项目。</p><p>我们在<code>workspace</code>添加<code>rules_spring</code>的规则文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http_archive(</span><br><span class="line">    name = &quot;rules_spring&quot;,</span><br><span class="line">    sha256 = &quot;7bb891ccb2f53ca188a769b3a3777be1c38348e18091afea05320f3003b3e886&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://github.com/salesforce/rules_spring/releases/download/2.3.1/rules-spring-2.3.1.zip&quot;,</span><br><span class="line">        &quot;https://mirror.ghproxy.com/https://github.com/salesforce/rules_spring/releases/download/2.3.1/rules-spring-2.3.1.zip&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在<code>BUILD.bazel</code>中间中导入<code>rules_spring</code>的相关规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@rules_spring//springboot:springboot.bzl&quot;, &quot;springboot&quot;)</span><br><span class="line"></span><br><span class="line">springboot(  </span><br><span class="line">    name = &quot;springboot&quot;,  </span><br><span class="line">    # specify the main class</span><br><span class="line">    boot_app_class = &quot;org.daming.jobs.JobsApplication&quot;,</span><br><span class="line">    # refrence the library</span><br><span class="line">    java_library = &quot;:jobs-lib&quot;,</span><br><span class="line">    # https://github.com/salesforce/rules_spring/issues/177</span><br><span class="line">    boot_launcher_class = &#x27;org.springframework.boot.loader.launch.JarLauncher&#x27;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>由于<code>spring boot 3.2.0</code>之后使用新的启动器，所以我们这里指定了<code>boot_launcher_class</code>。 如果你使用的版本低于3.2.0，可以直接删除。</p><p>现在我们可以编译运行spring boot项目了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 构建</span><br><span class="line">bazel build //:springboot</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">bazel run //:springboot</span><br></pre></td></tr></table></figure><p>运行部分输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Application    Name: </span><br><span class="line">Application Version: </span><br><span class="line">Spring Boot Version: 3.2.2 (v3.2.2)</span><br><span class="line">2024-02-11 21:49:17.449 INFO [main] org.springframework.boot.StartupInfoLogger:50 Starting JobsApplication using Java 17 with PID 67028 (/private/var/tmp/_bazel_gming001/7a71463ee80a3358d2f71ab2db616aea/execroot/__main__/bazel-out/darwin_arm64-fastbuild/bin/springboot.jar started by gming001 in /private/var/tmp/_bazel_gming001/7a71463ee80a3358d2f71ab2db616aea/execroot/__main__/bazel-out/darwin_arm64-fastbuild/bin/springboot.runfiles/__main__)</span><br><span class="line">2024-02-11 21:49:17.451 INFO [main] org.springframework.boot.SpringApplication:654 No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">2024-02-11 21:49:17.501 INFO [main] org.springframework.boot.logging.DeferredLog:252 For additional web related logging consider setting the &#x27;logging.level.web&#x27; property to &#x27;DEBUG&#x27;</span><br><span class="line">2024-02-11 21:49:17.846 WARN [main] org.springframework.context.support.AbstractApplicationContext:632 Exception encountered during context initialization - cancelling refresh attempt: java.lang.TypeNotPresentException: Type javax.servlet.http.HttpServletRequest not present</span><br><span class="line">2024-02-11 21:49:17.856 INFO [main] org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger:82 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h1><p>有两个问题没有解决，第一个是如何运行的单元测试，这个还没研究，不过这个不急。还有一个是这个项目实际上跑不起来，会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.TypeNotPresentException: Type javax.servlet.http.HttpServletRequest not present</span><br></pre></td></tr></table></figure><p>我原本以为是bazel的配置问题，结果我发现直接maven也跑不起来。。。</p><p>我想了想了应该是springfox没有去适配spring boot3的问题，不想降级spring boot的版本话，只能<a href="https://www.cnblogs.com/xiao2/p/15621730.html">从springfox迁移到springdoc</a></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>本文使用的源代码都可以在<a href="https://github.com/damingerdai/jobs">jobs</a>看到。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://bazel.google.cn/about">bazel简介</a></li><li><a href="https://github.com/salesforce/rules_spring/issues/177">Add support for new Boot Loader in Spring Boot 3.2.0</a></li><li><a href="https://showme.codes/zh-cn/2024-01-19-bazel-springboot/#%e5%88%9b%e5%bb%bamaven%e5%b7%a5%e7%a8%8b%e7%bb%93%e6%9e%84">Bazel使用案例：构建Springboot工程</a></li><li><a href="https://zhuanlan.zhihu.com/p/372134347">在windows上构建angular项目 (上)</a></li><li><a href="https://github.com/apache/shiro/issues/891">spring boot 3.0+</a></li><li><a href="https://www.cnblogs.com/xiao2/p/15621730.html">从springfox迁移到springdoc</a></li><li><a href="https://junctionbox.ca/2020/06/19/bazel-java-starter.html">New Java Project With Bazel</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> java </tag>
            
            <tag> bazel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Podman的hello world入门</title>
      <link href="/2024/01/21/software/podman-hello-world/"/>
      <url>/2024/01/21/software/podman-hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://podman.io/">Podnam</a>是一个符合OCI，用于在 Linux® 系统上开发、提供了与 Docker 等类似的功能来管理容器。管理和运行容器开源工具。 Podman 最初由 Red Hat® 工程师与开源社区一起开发。Podman使用 libpod 库管理整个容器生态系统。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>如果你使用Macos, 可以使用homebrew安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install podman</span><br></pre></td></tr></table></figure><p>安装之后就可以创建和启动Podnam虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">podman machine init</span><br><span class="line">podman machine start</span><br></pre></td></tr></table></figure><p>如果你使用Debian 或者 ubuntu， 可以使用apt-get命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install runc -y</span><br><span class="line">sudo apt-get -y install podman</span><br></pre></td></tr></table></figure><p> 其他系统可能参考<a href="https://podman.io/docs/installation">podman安装页面</a></p><blockquote><p>注意：对于 Windows 和 Mac，podman 需要一个虚拟机来部署容器。</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>默认情况下，Podman 配置有两个容器注册表。</p><ul><li><a href="https://quay.io/">quay.io</a></li><li><a href="https://hub.docker.com/">docker.io</a></li></ul><p>我们可以在·&#x2F;etc&#x2F;containers&#x2F;registries.conf·看到</p><p>但是为了方便我们构建基于Dockerfile的景象，我们需要在没有明确容器注册表的时候默认拉取docer.io的注册表，我们可以在·&#x2F;etc&#x2F;containers&#x2F;registries.conf·或者·$HOME&#x2F;.config&#x2F;containers&#x2F;registries.conf·设置unqualified-search-registries</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unqualified-search-registries = [<span class="string">&quot;docker.io&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>每个系统用户都有自己的容器存储地址。这意味着，如果您尝试从不同的用户登录中提取镜像，它将从远程注册表而不是本地映像中提取镜像。</p><h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><p>拉取容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman pull docker.io/nginx</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman  run --name docker-nginx -p 8080:80 docker.io/nginx</span><br></pre></td></tr></table></figure><p>如果你绑定1024一下的端口，你需要使用root权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo podman run --name docker-nginx -p 80:80 docker.io/nginx</span><br></pre></td></tr></table></figure><p>对于root用户，容器将会存储在·&#x2F;var&#x2F;lib&#x2F;containers&#x2F;storag·的文件夹中。<br>对于非root用户，容器将会存储在·$HOME&#x2F;.local&#x2F;share&#x2F;containers&#x2F;storage·的文件夹中。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.redhat.com/en/topics/containers/what-is-podman">What is Podman?</a></li><li><a href="https://zhuanlan.zhihu.com/p/582580502">Podman 初学者指南（上）</a></li><li><a href="https://github.com/containers/podman/issues/16096">Podman “Error: no registries found in registries.conf, a registry must be provided” while logging&#x2F;pulling from docker.io</a></li><li><a href="https://devopscube.com/podman-tutorial-beginners/">What is Podman?</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> podman </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年度总结</title>
      <link href="/2024/01/06/summary/2023/"/>
      <url>/2024/01/06/summary/2023/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年度总结"><a href="#2023年度总结" class="headerlink" title="2023年度总结"></a>2023年度总结</h1><p>2023年就这样子莫名其妙的过了，又是稀里糊涂的一年。这一年，和最爱的人去了一趟西藏，圆了她心心念念的梦想；这一年，坐了30多小时的火车，跨越千里去见证一段美好的爱情；这一年，参加了加入PWC以来第二次的线下年会，疫情总算是过去了。</p><h1 id="美好的西藏"><a href="#美好的西藏" class="headerlink" title="美好的西藏"></a>美好的西藏</h1><p>其实是先从上海到成都出发，在成都带了两天，陪她那只叫做花花的大熊猫。 其实19年时候我去过成都大熊貓繁育研究基地，那个时候还没有花花，也没有那么多的游客，当然也有可能我去的是淡季，不过总算是满足她的心愿了。吃了当地的特色，三大炮，鸡豆花，兔腿，麻婆豆腐，其实那个陈麻婆的那个夫妻肺片还是很有特色的，不辣，有点甜，和紫燕百味鸡的那个压根就不一样的。</p><p>我们是报了一个旅行团，四个人，一个司机。除了我们之外，还有一个山东小哥，一个四川小伙。山东小哥是真的很社牛，和什么人都能聊起来，喜欢旅游，朋友圈三天两头出去玩，晒各地的美景。四川小伙是拿到美国一家博士的offer了，想在出国前能够好好放松一下。四个人一个司机，就这样子从成都沿着318国道出发了。</p><p>去了很多地方，但是我没记住，因为这不是我热爱的，吃了很多美食，我记住了它们的味道，永远不会忘记。</p><p>到了拉萨，我们去看了小昭寺，布达拉宫。吃了当地牦牛肉，喝了当地的牦牛奶做的奶茶。真的是美滋滋的日子啊。</p><video src="/video/2023/panda.mp4" type="video/mp4" controls="controls" width="100%" height="100%"></video><p><img src="/images/2023/panda.jpg" alt="大熊猫"><br><img src="/images/2023/DSC05017_1.JPG" alt="我和她"><br><img src="/images/2023/mmexport1682507532968.jpg" alt="布达拉宫"></p><h1 id="PWC线下年会"><a href="#PWC线下年会" class="headerlink" title="PWC线下年会"></a>PWC线下年会</h1><p>我是19年加入PWC的。PWC的年会其实是财年的意思，所以通常是5月份办年会。20年收到疫情的影响，此后的年会都是线上举行的，虽然有元宇宙的等加持，但是对我来而已其实并没有参与感的。收到疫情的影响，很多同事已经没有来公司面对面办公了，曾经的团队早就各奔东西，甚至都不在一个部门的了。</p><p>终于，口罩没了，在加入PWC的第四年中，迎来的第二次线下年会。酒店更高级了，吃的很好，食物也精致，但是呢，我还是感觉19年那次年会吃的更惬意点。</p><p><img src="/images/2023/pwc.jpg" alt="pwc年会"></p><h1 id="嘉峪关之行"><a href="#嘉峪关之行" class="headerlink" title="嘉峪关之行"></a>嘉峪关之行</h1><p>嘉峪关之行单纯的是因为大学同学结婚，便选择坐了30多小时的火车，先去西安和好友会和，再去嘉峪关。嘉峪关风景不错，可惜很难再有机会去了。</p><p><img src="/images/2023/jiayuguan.jpg" alt="嘉峪关"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>我们还去来了迪士尼</p><p><img src="/images/2023/dishini01.jpg" alt="迪士尼01"><br><img src="/images/2023/dishini02.jpg" alt="迪士尼02"></p><p>参加她的大学同学的婚礼</p><p><img src="/images/2023/nanjing-wedding.jpg" alt="南京婚礼"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>Time files over us, but leaves its shadow behind.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习multipass笔记</title>
      <link href="/2023/12/14/software/multipass-learning/"/>
      <url>/2023/12/14/software/multipass-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Multipass 是一个轻量虚拟机管理器，是由 Ubuntu 运营公司 Canonical 所推出的开源项目。运行环境支持 Linux、Windows、macOS。在不同的操作系统上，使用的是不同的虚拟化技术。在 Linux 上使用的是 KVM、Window 上使用 Hyper-V、macOS 中使用 HyperKit 以最小开销运行 VM，支持在笔记本模拟小型云。</p><p>同时，Multipass 提供了一个命令行界面来启动和管理 Linux 实例。下载一个全新的镜像需要几秒钟的时间，并且在几分钟内就可以启动并运行 VM。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在window环境下进行部署，下载最新安装包：<a href="https://github.com/canonical/multipass/releases/">https://github.com/canonical/multipass/releases/</a></p><h1 id="创建vm"><a href="#创建vm" class="headerlink" title="创建vm"></a>创建vm</h1><p>创建实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipass launch -n k3s-master -c 2 -m 4G -d 10G</span><br></pre></td></tr></table></figure><p>查看实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multipass list</span><br><span class="line"></span><br><span class="line">Name                    State             IPv4             Image</span><br><span class="line">k3s-master              Running           172.19.151.166   Ubuntu 22.04 LTS</span><br></pre></td></tr></table></figure><p>查看实例状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Name:           k3s-master</span><br><span class="line">State:          Running</span><br><span class="line">IPv4:           172.19.151.166</span><br><span class="line">Release:        Ubuntu 22.04.3 LTS</span><br><span class="line">Image hash:     6d6af17f28c8 (Ubuntu 22.04 LTS)</span><br><span class="line">CPU(s):         2</span><br><span class="line">Load:           0.00 0.00 0.00</span><br><span class="line">Disk usage:     1.6GiB out of 9.6GiB</span><br><span class="line">Memory usage:   213.8MiB out of 3.8GiB</span><br><span class="line">Mounts:         --</span><br></pre></td></tr></table></figure><p>进入shell环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">multipass shell k3s-maste</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-91-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System information as of Thu Dec 14 20:45:28 CST 2023</span><br><span class="line"></span><br><span class="line">  System load:  0.0               Processes:             100</span><br><span class="line">  Usage of /:   17.2% of 9.51GB   Users logged <span class="keyword">in</span>:       1</span><br><span class="line">  Memory usage: 6%                IPv4 address <span class="keyword">for</span> eth0: 172.19.151.166</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line"> * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s</span><br><span class="line">   just raised the bar <span class="keyword">for</span> easy, resilient and secure K8s cluster deployment.</span><br><span class="line"></span><br><span class="line">   https://ubuntu.com/engage/secure-kubernetes-at-the-edge</span><br><span class="line"></span><br><span class="line">Expanded Security Maintenance <span class="keyword">for</span> Applications is not enabled.</span><br><span class="line"></span><br><span class="line">0 updates can be applied immediately.</span><br><span class="line"></span><br><span class="line">Enable ESM Apps to receive additional future security updates.</span><br><span class="line">See https://ubuntu.com/esm or run: sudo pro status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Thu Dec 14 20:26:30 2023 from 172.19.144.1</span><br><span class="line">To run a <span class="built_in">command</span> as administrator (user <span class="string">&quot;root&quot;</span>), use <span class="string">&quot;sudo &lt;command&gt;&quot;</span>.</span><br><span class="line">See <span class="string">&quot;man sudo_root&quot;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://www.mobaijun.com/posts/3701652676.html">【工具系列】轻量级虚拟机 Multipass 使用教程</a></li><li><a href="https://www.cnblogs.com/hewei-blogs/articles/17569105.html">轻量虚拟机 Multipass 的部署和使用</a></li><li><a href="https://jackkuo.org/post/multipass_tutorial/">Multipass - 如 Docker 般的虛擬機</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multipass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HorizontalPodAutoscaler入门实践</title>
      <link href="/2023/09/27/software/k8s/horizontal-pod-autoscaler-getting-started/"/>
      <url>/2023/09/27/software/k8s/horizontal-pod-autoscaler-getting-started/</url>
      
        <content type="html"><![CDATA[<h1 id="HorizontalPodAutoscaler"><a href="#HorizontalPodAutoscaler" class="headerlink" title="HorizontalPodAutoscaler"></a>HorizontalPodAutoscaler</h1><p>在Kubernetes中，HorizontalPodAutoscaler 自动更新工作负载资源（例如Deployment或者StatefulSet），目的是自动扩缩工作负载以满足需求。水平扩缩意味着对增加的负载的响应是部署更多的 Pod。</p><p>本文目的是通过Docker Desktop上的Kubernetes实例去实践pod的水平扩展。</p><p>本文默认Docker Desktop上的Kubernetes已经安装完成。如果需要帮助，可以阅读<a href="https://damingerdai.github.io/2021/01/14/software/k8s/how-to-install-docker-desktop-k8s/">Docker Desktop自带k8s安装笔记</a>。</p><h1 id="安装-Metrics-server"><a href="#安装-Metrics-server" class="headerlink" title="安装 Metrics server"></a>安装 Metrics server</h1><p>由于Docker Desktop上的Kubernetes默认并没有安装Metrics server，而HorizontalPodAutoscaler依赖通过Metrics server获取到的数据， 因此需要提前安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl top node </span><br><span class="line">error: Metrics API not available</span><br></pre></td></tr></table></figure><p>从<a href="https://github.com/kubernetes-sigs/metrics-server/releases">Metrics server的release页面</a>获取最新的<code>components.yaml</code>文件，</p><p>然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f components.yaml</span><br></pre></td></tr></table></figure><p>镜像的拉取和运行需要一点时间。我们可以通过以下命令查看运行情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl  get pod -n kube-system | grep metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">metrics-server-75f45b4dd4-fbxd2          1/1     Running   0               3h25m</span><br></pre></td></tr></table></figure><p>查看node资源情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl top node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">NAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">docker-desktop   1901m        47%    6250Mi          80% </span><br></pre></td></tr></table></figure><p>查看pod资源情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl top pods -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">NAMESPACE           NAME                                     CPU(cores)   MEMORY(bytes)             </span><br><span class="line">kube-system         coredns-5d78c9869d-dq2s7                 4m           16Mi            </span><br><span class="line">kube-system         coredns-5d78c9869d-g5xhx                 2m           21Mi            </span><br><span class="line">kube-system         etcd-docker-desktop                      20m          72Mi            </span><br><span class="line">kube-system         kube-apiserver-docker-desktop            32m          271Mi           </span><br><span class="line">kube-system         kube-controller-manager-docker-desktop   11m          64Mi            </span><br><span class="line">kube-system         kube-proxy-qdc55                         1m           25Mi            </span><br><span class="line">kube-system         kube-scheduler-docker-desktop            5m           32Mi            </span><br><span class="line">kube-system         metrics-server-75f45b4dd4-fbxd2          6m           23Mi            </span><br><span class="line">kube-system         storage-provisioner                      4m           15Mi            </span><br><span class="line">kube-system         vpnkit-controller                        1m           14Mi  </span><br></pre></td></tr></table></figure><h1 id="配置HorizontalPodAutoscaler"><a href="#配置HorizontalPodAutoscaler" class="headerlink" title="配置HorizontalPodAutoscaler"></a>配置HorizontalPodAutoscaler</h1><p>这里以我的个人开源项目<a href="https://github.com/damingerdai/hoteler">hoteler</a>为例, 将下面的内容写入<code>hpa.yaml</code>文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hoteler-api-hpa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">hoteler-namespace</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hoteler-api-hpa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hoteler-api</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">      <span class="attr">resource:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">        <span class="attr">target:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">Utilization</span></span><br><span class="line">          <span class="attr">averageUtilization:</span> <span class="number">50</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">      <span class="attr">resource:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">memory</span></span><br><span class="line">        <span class="attr">target:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">Utilization</span></span><br><span class="line">          <span class="attr">averageUtilization:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p><code>minReplicas: 1</code>表示最小一个pod实例，<code>maxReplicas: 5</code>则说明最多扩展到5个pod实例。</p><p><code>metrics</code>下面定义两个·Resource·， 第一个Resource规定当cpu资源占用率超过50%就会进行扩容，第二个Resource则规定了当内存使用率超过50%之后才会行将扩容。 这两个Resource是独立计算所需要的副本数量，取最大值。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Pod Autoscaling</a></li><li><a href="https://srerun.com/article/2021/5/6/39.html">k8s的HPA安装测试</a></li><li><a href="https://juejin.cn/post/7104907264779583501">安装 Metrics server</a></li><li><a href="https://dev.to/docker/enable-kubernetes-metrics-server-on-docker-desktop-5434">Enable Kubernetes Metrics Server on Docker Desktop</a></li><li><a href="https://www.qikqiak.com/post/k8s-hpa-usage/">Kubernetes HPA 使用详解</a></li><li><a href="https://stackoverflow.com/questions/54302592/how-kubernetes-hpa-with-2-or-more-metrics-behaves-especially-the-no-of-replica">How kubernetes HPA with 2 or more metrics behaves - especially the no.of replicas calculation?</a></li><li><a href="https://github.com/damingerdai/hoteler/pull/749">feat: 使用k8s的HorizontalPodAutoscaler进行水平的资源缩放</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> Docker Desktop </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用bazel去构建基于express和typescript的nodejs项目</title>
      <link href="/2023/08/10/front-end/how-to-use-bazel-to-build-nodejs-typescript-expressjs/"/>
      <url>/2023/08/10/front-end/how-to-use-bazel-to-build-nodejs-typescript-expressjs/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Bazel 是一款类似于 Make、Maven 和 Gradle的开源构建和测试工具。它使用可读的高级构建语言，支持多种变成语言编写的项目，并且能够为多个平台进行构建。Bazel 支持构建包含多个仓库、大量开发人员的大型代码库。</p><p>详细介绍可见<a href="https://bazel.build/">Bazel官网</a>。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本文的目的是使用bazel5去构建一个完整的nodejs后端项目，并不负责bazel相关知识的介绍。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先在<code>package.json</code>文件中·devDependencies·部分添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;@bazel/bazelisk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.7.5&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@bazel/buildifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@bazel/ibazel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@bazel/typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.8.1&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>然后再执行安装依赖命令。</p><p>创建<code>.bazelignore</code>文件并写入下面的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></table></figure><p>创建<code>.bazelrc</code>文件并写入下面的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"># Enable debugging tests with --config=debug</span><br><span class="line">test:debug --test_arg=--node_options=--inspect-brk --test_output=streamed --test_strategy=exclusive --test_timeout=9999 --nocache_test_results</span><br><span class="line"></span><br><span class="line"># Do not attempt to de-flake locally.</span><br><span class="line"># On CI we might set this to `3` to run with deflaking.</span><br><span class="line">test --flaky_test_attempts=1</span><br><span class="line"></span><br><span class="line">###############################</span><br><span class="line"># Filesystem interactions     #</span><br><span class="line">###############################</span><br><span class="line"></span><br><span class="line"># Create symlinks in the project:</span><br><span class="line"># - dist/bin for outputs</span><br><span class="line"># - dist/testlogs, dist/genfiles</span><br><span class="line"># - bazel-out</span><br><span class="line"># NB: bazel-out should be excluded from the editor configuration.</span><br><span class="line"># The checked-in /.vscode/settings.json does this for VSCode.</span><br><span class="line"># Other editors may require manual config to ignore this directory.</span><br><span class="line"># In the past, we say a problem where VSCode traversed a massive tree, opening file handles and</span><br><span class="line"># eventually a surprising failure with auto-discovery of the C++ toolchain in</span><br><span class="line"># MacOS High Sierra.</span><br><span class="line"># See https://github.com/bazelbuild/bazel/issues/4603</span><br><span class="line">build --symlink_prefix=dist/</span><br><span class="line"></span><br><span class="line"># Turn off legacy external runfiles</span><br><span class="line">build --nolegacy_external_runfiles</span><br><span class="line">run --nolegacy_external_runfiles</span><br><span class="line">test --nolegacy_external_runfiles</span><br><span class="line"></span><br><span class="line"># Turn on --incompatible_strict_action_env which was on by default</span><br><span class="line"># in Bazel 0.21.0 but turned off again in 0.22.0. Follow</span><br><span class="line"># https://github.com/bazelbuild/bazel/issues/7026 for more details.</span><br><span class="line"># This flag is needed to so that the bazel cache is not invalidated</span><br><span class="line"># when running bazel via `yarn bazel`.</span><br><span class="line"># See https://github.com/angular/angular/issues/27514.</span><br><span class="line">build --incompatible_strict_action_env</span><br><span class="line">run --incompatible_strict_action_env</span><br><span class="line">test --incompatible_strict_action_env</span><br><span class="line"></span><br><span class="line"># Do not build runfile trees by default. If an execution strategy relies on runfile</span><br><span class="line"># symlink teee, the tree is created on-demand. See: https://github.com/bazelbuild/bazel/issues/6627</span><br><span class="line"># and https://github.com/bazelbuild/bazel/commit/03246077f948f2790a83520e7dccc2625650e6df</span><br><span class="line">build --nobuild_runfile_links</span><br><span class="line"></span><br><span class="line">build --enable_runfiles</span><br><span class="line"></span><br><span class="line">###############################</span><br><span class="line"># Release support             #</span><br><span class="line"># Turn on these settings with #</span><br><span class="line">#  --config=release           #</span><br><span class="line">###############################</span><br><span class="line"></span><br><span class="line"># Releases should always be stamped with version control info</span><br><span class="line"># This command assumes node on the path and is a workaround for</span><br><span class="line"># https://github.com/bazelbuild/bazel/issues/4802</span><br><span class="line">build:release --workspace_status_command=&quot;yarn -s ng-dev release build-env-stamp --mode=release&quot;</span><br><span class="line">build:release --stamp</span><br><span class="line"></span><br><span class="line"># Building AIO against local Angular deps requires stamping</span><br><span class="line"># versions in Angular packages due to CLI version checks.</span><br><span class="line">build:aio_local_deps --stamp</span><br><span class="line">build:aio_local_deps --workspace_status_command=&quot;yarn -s --cwd aio local-workspace-status&quot;</span><br><span class="line"></span><br><span class="line"># Snapshots should also be stamped with version control information.</span><br><span class="line">build:snapshot-build --workspace_status_command=&quot;yarn -s ng-dev release build-env-stamp --mode=snapshot&quot;</span><br><span class="line">build:snapshot-build --stamp</span><br><span class="line"></span><br><span class="line">##########################################################</span><br><span class="line"># AIO architect build configuration                      #</span><br><span class="line"># See aio/angular.json for available configurations.     #</span><br><span class="line"># To build with a partiular configuration:               #</span><br><span class="line">#   bazel build //aio:build --aio_build_config=&lt;config&gt;  #</span><br><span class="line"># Default config is `stable``.                           #</span><br><span class="line">##########################################################</span><br><span class="line">build --flag_alias=aio_build_config=//aio:flag_aio_build_config</span><br><span class="line"></span><br><span class="line">####################################</span><br><span class="line"># AIO first party dep substitution #</span><br><span class="line"># Turn on with                     #</span><br><span class="line">#  --config=aio_local_deps         #</span><br><span class="line">####################################</span><br><span class="line"></span><br><span class="line">build:aio_local_deps --//aio:flag_aio_local_deps</span><br><span class="line"></span><br><span class="line">###############################</span><br><span class="line"># Output                      #</span><br><span class="line">###############################</span><br><span class="line"></span><br><span class="line"># A more useful default output mode for bazel query</span><br><span class="line"># Prints eg. &quot;ng_module rule //foo:bar&quot; rather than just &quot;//foo:bar&quot;</span><br><span class="line">query --output=label_kind</span><br><span class="line"></span><br><span class="line"># By default, failing tests don&#x27;t print any output, it goes to the log file</span><br><span class="line">test --test_output=errors</span><br><span class="line"></span><br><span class="line">################################</span><br><span class="line"># Settings for CircleCI        #</span><br><span class="line">################################</span><br><span class="line"></span><br><span class="line"># Bazel flags for CircleCI are in /.circleci/bazel.linux.rc and /.circleci/bazel.windows.rc</span><br><span class="line"></span><br><span class="line">##################################</span><br><span class="line"># Remote Build Execution support #</span><br><span class="line"># Turn on these settings with    #</span><br><span class="line">#  --config=remote               #</span><br><span class="line">##################################</span><br><span class="line"></span><br><span class="line"># The following --define=EXECUTOR=remote will be able to be removed</span><br><span class="line"># once https://github.com/bazelbuild/bazel/issues/7254 is fixed</span><br><span class="line">build:remote --define=EXECUTOR=remote</span><br><span class="line"></span><br><span class="line"># Set a higher timeout value, just in case.</span><br><span class="line">build:remote --remote_timeout=600</span><br><span class="line"></span><br><span class="line"># Bazel detects maximum number of jobs based on host resources.</span><br><span class="line"># Since we run remotely, we can increase this number significantly.</span><br><span class="line">common:remote --jobs=200</span><br><span class="line"></span><br><span class="line">build:remote --google_default_credentials</span><br><span class="line"></span><br><span class="line"># Limit the number of test jobs for on an AIO local deps build. The example tests running</span><br><span class="line"># concurrently pushes the circleci executor RAM usage to its limits.</span><br><span class="line">test:aio_local_deps --jobs=24</span><br><span class="line"></span><br><span class="line"># Force remote exeuctions to consider the entire run as linux</span><br><span class="line">build:remote --cpu=k8</span><br><span class="line">build:remote --host_cpu=k8</span><br><span class="line"></span><br><span class="line"># Toolchain and platform related flags</span><br><span class="line">build:remote --crosstool_top=@npm//@angular/build-tooling/bazel/remote-execution/cpp:cc_toolchain_suite</span><br><span class="line">build:remote --extra_toolchains=@npm//@angular/build-tooling/bazel/remote-execution/cpp:cc_toolchain</span><br><span class="line">build:remote --extra_execution_platforms=@npm//@angular/build-tooling/bazel/remote-execution:platform</span><br><span class="line">build:remote --host_platform=@npm//@angular/build-tooling/bazel/remote-execution:platform</span><br><span class="line">build:remote --platforms=@npm//@angular/build-tooling/bazel/remote-execution:platform</span><br><span class="line"></span><br><span class="line"># Remote instance and caching</span><br><span class="line">build:remote --remote_instance_name=projects/internal-200822/instances/primary_instance</span><br><span class="line">build:remote --project_id=internal-200822</span><br><span class="line">build:remote --remote_cache=remotebuildexecution.googleapis.com</span><br><span class="line">build:remote --remote_executor=remotebuildexecution.googleapis.com</span><br><span class="line"></span><br><span class="line"># Use HTTP remote cache</span><br><span class="line">build:remote-cache --remote_cache=https://storage.googleapis.com/angular-team-cache</span><br><span class="line">build:remote-cache --remote_accept_cached=true</span><br><span class="line">build:remote-cache --remote_upload_local_results=true</span><br><span class="line">build:remote-cache --google_default_credentials</span><br><span class="line"></span><br><span class="line"># Ensure that tags like &quot;no-remote-exec&quot; get propagated to actions created by rules,</span><br><span class="line"># even if the rule implementation does not explicitly pass them to the execution requirements.</span><br><span class="line"># https://bazel.build/reference/command-line-reference#flag--experimental_allow_tags_propagation</span><br><span class="line">common --experimental_allow_tags_propagation</span><br><span class="line"></span><br><span class="line"># Disable network access in the sandbox by default. To enable network access</span><br><span class="line"># for a particular target, use:</span><br><span class="line">#</span><br><span class="line"># load(&quot;@npm//@angular/build-tooling/bazel/remote-execution:index.bzl&quot;, &quot;ENABLE_NETWORK&quot;)</span><br><span class="line"># my_target(</span><br><span class="line">#   ...,</span><br><span class="line">#   exec_properties = ENABLE_NETWORK,   # Enables network in remote exec</span><br><span class="line">#   tags = [&quot;requires-network&quot;]         # Enables network in sandbox</span><br><span class="line"># )</span><br><span class="line">build --nosandbox_default_allow_network</span><br><span class="line"></span><br><span class="line">##################################</span><br><span class="line"># Saucelabs tests settings       #</span><br><span class="line"># Turn on these settings with    #</span><br><span class="line">#  --config=saucelabs            #</span><br><span class="line">##################################</span><br><span class="line"></span><br><span class="line"># For saucelabs tests we don&#x27;t want to enable flaky test attempts. Karma has its own integrated</span><br><span class="line"># retry mechanism and we do not want to retry unnecessarily if Karma already tried multiple times.</span><br><span class="line">test:saucelabs --flaky_test_attempts=1</span><br><span class="line"></span><br><span class="line">################</span><br><span class="line"># Flag Aliases #</span><br><span class="line">################</span><br><span class="line"></span><br><span class="line"># --ng_perf will ask the Ivy compiler to produce performance results for each build.</span><br><span class="line">build --flag_alias=ng_perf=//packages/compiler-cli:ng_perf</span><br><span class="line"></span><br><span class="line">####################################################</span><br><span class="line"># User bazel configuration</span><br><span class="line"># NOTE: This needs to be the *last* entry in the config.</span><br><span class="line">####################################################</span><br><span class="line"></span><br><span class="line"># Load any settings which are specific to the current user. Needs to be *last* statement</span><br><span class="line"># in this config, as the user configuration should be able to overwrite flags from this file.</span><br><span class="line">try-import %workspace%/.bazelrc.user</span><br></pre></td></tr></table></figure><p>创建<code>.bazelversion</code>用于指定bazel版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.0.0</span><br></pre></td></tr></table></figure><blockquote><p>可以使用bazel5的任意版本，理论上都支持，但是不要使用bazel6的版本</p></blockquote><p>新建<code>WORKSPACE</code>用于定义bazel的工作区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workspace(</span><br><span class="line">   name = &quot;express-postgres-ts-starter&quot;,</span><br><span class="line">    managed_directories = &#123;</span><br><span class="line">        &quot;@npm&quot;: [&quot;node_modules&quot;],</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>导入<code>http_archive</code>用于获取bazel的库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)</span><br></pre></td></tr></table></figure><p>如果使用了<code>.yarn</code>文件夹用于限制yarn的版本，可以通过创建<code>yarn.bzl</code>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YARN_PATH = &quot;.yarn/releases/yarn-1.22.19.cjs&quot;</span><br><span class="line">YARN_LABEL = &quot;//:&quot; + YARN_PATH</span><br></pre></td></tr></table></figure><p>然后在<code>WORKSPACE</code>导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;//:yarn.bzl&quot;, &quot;YARN_LABEL&quot;)</span><br></pre></td></tr></table></figure><p>引入bazel的nodesj依赖库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http_archive(</span><br><span class="line">    name = &quot;build_bazel_rules_nodejs&quot;,</span><br><span class="line">    sha256 = &quot;5dd1e5dea1322174c57d3ca7b899da381d516220793d0adef3ba03b9d23baa8e&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://github.com/bazelbuild/rules_nodejs/releases/download/5.8.3/rules_nodejs-5.8.3.tar.gz&quot;,</span><br><span class="line">        &quot;https://ghproxy.com/https://github.com/bazelbuild/rules_nodejs/releases/download/5.8.3/rules_nodejs-5.8.3.tar.gz&quot;</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load(&quot;@build_bazel_rules_nodejs//:repositories.bzl&quot;, &quot;build_bazel_rules_nodejs_dependencies&quot;)</span><br><span class="line"></span><br><span class="line">build_bazel_rules_nodejs_dependencies()</span><br><span class="line"></span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;rules_pkg&quot;,</span><br><span class="line">    sha256 = &quot;62eeb544ff1ef41d786e329e1536c1d541bb9bcad27ae984d57f18f314018e66&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.6.0/rules_pkg-0.6.0.tar.gz&quot;,</span><br><span class="line">        &quot;https://github.com/bazelbuild/rules_pkg/releases/download/0.6.0/rules_pkg-0.6.0.tar.gz&quot;,</span><br><span class="line">        &quot;https://ghproxy.com/https://github.com/bazelbuild/rules_pkg/releases/download/0.6.0/rules_pkg-0.6.0.tar.gz&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Fetch Aspect lib for utilities like write_source_files</span><br><span class="line"># NOTE: We cannot move past version 1.23.2 of aspect_bazel_lib because it requires us to move to bazel 6.0.0 which</span><br><span class="line">#       breaks our usage of managed_directories</span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;aspect_bazel_lib&quot;,</span><br><span class="line">    sha256 = &quot;4b2e774387bae6242879820086b7b738d49bf3d0659522ea5d9363be01a27582&quot;,</span><br><span class="line">    strip_prefix = &quot;bazel-lib-1.23.2&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.23.2.tar.gz&quot;,</span><br><span class="line">        &quot;https://ghproxy.com/https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.23.2.tar.gz&quot;,</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>配置nodejs工具链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@rules_nodejs//nodejs:repositories.bzl&quot;, &quot;nodejs_register_toolchains&quot;)</span><br><span class="line"></span><br><span class="line">nodejs_register_toolchains(</span><br><span class="line">    name = &quot;nodejs&quot;,</span><br><span class="line">    node_version = &quot;18.10.0&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>在arm mac上不支持nodejs20的版本，不确定其他平台时候是否支持nodejs20</p></blockquote><p>配置<code>yarn_install</code>下载依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@build_bazel_rules_nodejs//:index.bzl&quot;, &quot;yarn_install&quot;)</span><br><span class="line"></span><br><span class="line">yarn_install(</span><br><span class="line">    name = &quot;npm&quot;,</span><br><span class="line">data = [</span><br><span class="line">        YARN_LABEL,</span><br><span class="line">        &quot;//:.yarnrc&quot;,</span><br><span class="line">&quot;//:patches/trim-newlines+5.0.0.patch&quot;</span><br><span class="line">],</span><br><span class="line">exports_directories_only = False,</span><br><span class="line">symlink_node_modules = True,</span><br><span class="line">    package_json = &quot;//:package.json&quot;,</span><br><span class="line">yarn = YARN_LABEL,</span><br><span class="line">    yarn_lock = &quot;//:yarn.lock&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建<code>BUILD.bazel</code>, 并定义为公开的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package(default_visibility = [&quot;//visibility:public&quot;])</span><br></pre></td></tr></table></figure><p>导入<code>ts_project</code>和<code>nodejs_binary</code>用于构建typescript和nodejs：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@npm//@bazel/typescript:index.bzl&quot;, &quot;ts_project&quot;)</span><br><span class="line">load(&quot;@build_bazel_rules_nodejs//:index.bzl&quot;, &quot;nodejs_binary&quot;)</span><br></pre></td></tr></table></figure><p>定义<code>SRCS</code>变量用于声明所有需要参与编译的ts文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SRCS = glob(</span><br><span class="line">[</span><br><span class="line">&quot;src/**/*.ts&quot;,</span><br><span class="line">],</span><br><span class="line">exclude = [</span><br><span class="line">&quot;src/**/*.spec.ts&quot;</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用<code>ts_project</code>将ts编译成js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">ts_project(</span><br><span class="line">    name = &quot;server-ts&quot;,</span><br><span class="line">    srcs = [&quot;server.ts&quot; ] + SRCS,</span><br><span class="line">    resolve_json_module = True,</span><br><span class="line">    source_map = True,</span><br><span class="line">    tsconfig = &quot;//:tsconfig.json&quot;,</span><br><span class="line">    visibility = [&quot;//visibility:public&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;@npm//@apollo/server&quot;,</span><br><span class="line">        &quot;@npm//@graphql-tools/merge&quot;,</span><br><span class="line">        &quot;@npm//body-parser&quot;,</span><br><span class="line">        &quot;@npm//compression&quot;,</span><br><span class="line">        &quot;@npm//cookie-parser&quot;,</span><br><span class="line">        &quot;@npm//dotenv&quot;,</span><br><span class="line">        &quot;@npm//exceljs&quot;,</span><br><span class="line">        &quot;@npm//express&quot;,</span><br><span class="line">        &quot;@npm//express-fileupload&quot;,</span><br><span class="line">        &quot;@npm//express-joi-validation&quot;,</span><br><span class="line">        &quot;@npm//express-session&quot;,</span><br><span class="line">        &quot;@npm//graphql&quot;,</span><br><span class="line">        &quot;@npm//graphql-tag&quot;,</span><br><span class="line">        &quot;@npm//helmet&quot;,</span><br><span class="line">        &quot;@npm//joi&quot;,</span><br><span class="line">        &quot;@npm//jsonwebtoken&quot;,</span><br><span class="line">        &quot;@npm//knex&quot;,</span><br><span class="line">        &quot;@npm//lodash&quot;,</span><br><span class="line">        &quot;@npm//minio&quot;,</span><br><span class="line">        &quot;@npm//morgan&quot;,</span><br><span class="line">        &quot;@npm//pg&quot;,</span><br><span class="line">        &quot;@npm//pg-boss&quot;,</span><br><span class="line">        &quot;@npm//redis&quot;,</span><br><span class="line">        &quot;@npm//socket.io&quot;,</span><br><span class="line">        &quot;@npm//winston&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;@npm//@types/express&quot;,</span><br><span class="line">        &quot;@npm//@types/express-fileupload&quot;,</span><br><span class="line">        &quot;@npm//@types/express-session&quot;,</span><br><span class="line">        &quot;@npm//@types/jest&quot;,</span><br><span class="line">        &quot;@npm//@types/node&quot;,</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在可以编译了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn bazel build //... </span><br></pre></td></tr></table></figure><p>最后可以在<code>dist/bin</code>看到一个<code>server.js</code>, 我们可以通过执行<code>node dist/bin/server.js</code>运行我们的nodejs项目了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://bazel.build/">Bazel官网</a></li><li><a href="https://zhuanlan.zhihu.com/p/411563404">Bazel 学习笔记 (一) 快速开始</a></li><li><a href="https://zhuanlan.zhihu.com/p/402311730">使用Bazel编译TypeScript</a></li><li><a href="https://github.com/angular/angular">angular</a></li><li><a href="https://github.com/damingerdai/express-postgres-ts-starter/pull/462">feat: add bazel support</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bazel </tag>
            
            <tag> typescript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/03/hello-world/"/>
      <url>/2023/07/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用k3s部署PostgreSQL用于开发</title>
      <link href="/2023/04/14/back-end/how-to-user-k3s-deploy-postgresql-for-dev/"/>
      <url>/2023/04/14/back-end/how-to-user-k3s-deploy-postgresql-for-dev/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PostgreSQL是世界上最先进的开源数据库。<br>本文的目的是使用k3s本地部署PostgreSQL用于本地开发使用，不具备直接上生产的能力。</p><h2 id="安装PostgreSQL"><a href="#安装PostgreSQL" class="headerlink" title="安装PostgreSQL"></a>安装PostgreSQL</h2><p>首先准备<code>config.yaml</code>用于定义PostgreSQL的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><p>申请PersistentVolume用于数据持久化的存储：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pv-volume</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;/mnt/data&quot;</span></span><br></pre></td></tr></table></figure><p>申请PersistentVolumeClaim用于数据持久化</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pv-claim</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure><p>数据库是一个有状态的服务，我认为StatefulSet比Pod更为合适，所以使用StatefulSet创建PostgreSQL实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">postgres:15.0</span></span><br><span class="line">          <span class="attr">envFrom:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">postgres-config</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres-data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/lib/PostgreSQL/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">postgres-pv-claim</span></span><br></pre></td></tr></table></figure><p>定义一个Service让k3s里的其他pod可以访问数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">5432</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><p>现在我们可以执行kubectl apply命令去创建各种资源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f config.yaml</span><br><span class="line">kubectl apply -f pv.yaml</span><br><span class="line">kubectl apply -f pvc.yaml</span><br><span class="line">kubectl apply -f statefulset.yaml</span><br></pre></td></tr></table></figure><blockquote><p>请尽量按照顺序执行命令</p></blockquote><p>查看一下效果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods </span><br><span class="line"></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class="line">postgres-0   1/1     Running   0          17h</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">NAME       TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">postgres   ClusterIP   X.X.X.X   &lt;none&gt;        5432/TCP   17h</span><br></pre></td></tr></table></figure><p><code>X.X.X.X</code>是你k3s的集群内部网址，因人而异</p><h2 id="配置PgBouncer"><a href="#配置PgBouncer" class="headerlink" title="配置PgBouncer"></a>配置PgBouncer</h2><p>PostgreSQL是使用多进程的模式去创建连接，所以创建连接的成本比较高，因此推荐使用PgBouncer作为PostgreSQL的连接池用于提高数据库的并发性能。</p><p>将上文中的PostgreSQL代理到本地:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward postgres-0 5432:5432</span><br></pre></td></tr></table></figure><p>使用任意方式登录到PostgreSQL数据库，执行一下sql命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;&quot;&#x27;</span>, usename, <span class="string">&#x27;&quot; &quot;&#x27;</span>, passwd, <span class="string">&#x27;&quot;&#x27;</span>) <span class="keyword">FROM</span> pg_shadow;</span><br></pre></td></tr></table></figure><p>将获得的结果写入userlist.txt文件中</p><blockquote><p>该步骤不可以省略，因为不同的数据库实例导出的passwd是不一样的！！！</p></blockquote><p>准备pgbouncer.ini：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[databases]</span></span><br><span class="line"><span class="attr">postgres</span> = host=postgres port=<span class="number">5432</span> dbname=postgres user=postgres password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[pgbouncer]</span></span><br><span class="line"><span class="attr">listen_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">listen_port</span> = <span class="number">5432</span></span><br><span class="line"><span class="attr">admin_users</span> = postgres</span><br><span class="line"><span class="attr">stats_users</span> = postgres</span><br><span class="line"><span class="attr">auth_file</span> = /etc/pgbouncer/userlist.txt</span><br><span class="line"><span class="attr">auth_type</span> = scram-sha-<span class="number">256</span> </span><br><span class="line"><span class="attr">pool_mode</span> = session</span><br><span class="line"><span class="attr">ignore_startup_parameters</span> = extra_float_digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log settings</span></span><br><span class="line"><span class="comment"># admin_users = postgres</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Connection sanity checks, timeouts</span></span><br><span class="line"><span class="attr">server_tls_sslmode</span> = prefer</span><br><span class="line"></span><br><span class="line"><span class="comment"># TLS settings</span></span><br><span class="line"><span class="attr">client_tls_sslmode</span> = disable</span><br></pre></td></tr></table></figure><p>创建pgbouncer.yaml用于定义pgbouncer的配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">KUBE_NAMESPACE=<span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="built_in">cd</span> `<span class="built_in">dirname</span> <span class="variable">$0</span>`</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> *.ini</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">basename</span>=<span class="string">&quot;<span class="subst">$(basename $file)</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$basname</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">  kubectl create secret generic <span class="string">&quot;<span class="variable">$&#123;basename%.*&#125;</span>&quot;</span>-config --namespace=<span class="string">&quot;<span class="variable">$KUBE_NAMESPACE</span>&quot;</span> --from-file=<span class="string">&quot;<span class="variable">$file</span>&quot;</span>  --from-file=userlist.txt -o yaml --dry-run=client | <span class="built_in">tee</span> <span class="string">&quot;<span class="variable">$&#123;basename%.*&#125;</span>.yaml&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>定义Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pgbouncer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pgbouncer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>  <span class="comment"># removes old replicasets for deployment rollbacks</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span>  <span class="comment"># Avoid Terminating and ContainerCreating at the same time</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">pgbouncer</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pgbouncer</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pgbouncer</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">rmccaffrey/pgbouncer:1.18.1</span></span><br><span class="line">          <span class="comment">#imagePullPolicy: Always</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;100Mi&quot;</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;0.5&quot;</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configfiles</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">&quot;/etc/pgbouncer&quot;</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span>  <span class="comment"># writes update the secret!</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="comment"># Allow existing queries clients to complete within 120 seconds</span></span><br><span class="line">                <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;killall -INT pgbouncer &amp;&amp; sleep 120&quot;</span>]</span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span> [<span class="string">&#x27;all&#x27;</span>]</span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configfiles</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">pgbouncer-config</span></span><br></pre></td></tr></table></figure><p>定义Service:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pgbouncer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pgbouncer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pgbouncer</span></span><br></pre></td></tr></table></figure><p>创建资源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f pgbouncer.yaml</span><br><span class="line">kubectl apply -f deployment.yaml</span><br><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">NAME        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">postgres    ClusterIP   X.X.X.X        &lt;none&gt;        5432/TCP   17h</span><br><span class="line">pgbouncer   ClusterIP   X.X.X.X        &lt;none&gt;        5432/TCP   50s</span><br></pre></td></tr></table></figure><p>使用port-forward代理到本地进行测试pgbouncer是否能够正常使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward service/pgbouncer 5432:5432</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文实现了使用k3s部署PostgreSQL和PgBouncer，可以用于一般的本地开发坏境使用，也在docker destkop上测试通过，但是没有在minikube上测试过。</p><p>以上资源可以在<a href="https://github.com/damingerdai/health-master/tree/main/deplyoments/db">health-master-deployments-db</a>和<a href="https://github.com/damingerdai/health-master/tree/main/deplyoments/pgbouncer">health-master-deployments-pgbouncer</a>上获取。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> PostgreSQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Windows下Docker启动容器时，端口被占用错误</title>
      <link href="/2023/02/26/back-end/windows_docker_port_in_use_issues/"/>
      <url>/2023/02/26/back-end/windows_docker_port_in_use_issues/</url>
      
        <content type="html"><![CDATA[<h1 id="解决Windows下Docker启动容器时，端口被占用错误"><a href="#解决Windows下Docker启动容器时，端口被占用错误" class="headerlink" title="解决Windows下Docker启动容器时，端口被占用错误"></a>解决Windows下Docker启动容器时，端口被占用错误</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用docker-compose启动mysql的时候遇到一个问题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span>: An attempt was made to access a socket <span class="keyword">in</span> a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure><p>然后查了一下是否存在应用占用了3306的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 3306</span><br></pre></td></tr></table></figure><p>结果很尴尬，并没有。。。</p><p>百度了一下，发现是<code>Hyper-V</code>会保留部分tcp端口导致我们自己无法使用这些端口, 使用如下命令查看保留的端口：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line"><span class="literal">----------</span>    <span class="literal">--------</span></span><br><span class="line">      <span class="number">1026</span>        <span class="number">1125</span></span><br><span class="line">      <span class="number">1126</span>        <span class="number">1225</span></span><br><span class="line">      <span class="number">1226</span>        <span class="number">1325</span></span><br><span class="line">      <span class="number">1326</span>        <span class="number">1425</span></span><br><span class="line">      <span class="number">1426</span>        <span class="number">1525</span></span><br><span class="line">      <span class="number">1538</span>        <span class="number">1637</span></span><br><span class="line">      <span class="number">2327</span>        <span class="number">2426</span></span><br><span class="line">      <span class="number">2427</span>        <span class="number">2526</span></span><br><span class="line">      <span class="number">2527</span>        <span class="number">2626</span></span><br><span class="line">      <span class="number">2627</span>        <span class="number">2726</span></span><br><span class="line">      <span class="number">2727</span>        <span class="number">2826</span></span><br><span class="line">      <span class="number">2827</span>        <span class="number">2926</span></span><br><span class="line">      <span class="number">6344</span>        <span class="number">6567</span></span><br><span class="line">     <span class="number">50000</span>       <span class="number">50059</span>     *</span><br><span class="line">     <span class="number">50070</span>       <span class="number">50070</span>     *</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方案很多，但是最推荐的该市修改永久排除保留端口：</p><p>首选关闭docker, 用管理员权限打开powershell， 输入以下命令用于关闭Hyper-V:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</span><br></pre></td></tr></table></figure><blockquote><p>该操作可能需要重启</p></blockquote><p>然后将3306端口永久排除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=3306 numberofports=1 store=persistent</span><br></pre></td></tr></table></figure><p>最后重启Hyper-V:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/uncmd/p/16056993.html">解决Windows下Docker启动容器时，端口被占用错误</a></li><li><a href="https://www.cnblogs.com/fansys/articles/13375989.html">修改Hyper-V动态端口范围</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
            <tag> docker desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录使用pg_dump中遇到的ssl问题</title>
      <link href="/2023/02/25/back-end/pg_dump_ssl_issues/"/>
      <url>/2023/02/25/back-end/pg_dump_ssl_issues/</url>
      
        <content type="html"><![CDATA[<h1 id="记录使用pg-dump中遇到的ssl问题"><a href="#记录使用pg-dump中遇到的ssl问题" class="headerlink" title="记录使用pg_dump中遇到的ssl问题"></a>记录使用pg_dump中遇到的ssl问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用<code>pg_dump</code>过程中遇到的两个问题：</p><ol><li>SSL connection is required. Please specify SSL options and retry.</li><li>SSL error: unsafe legacy renegotiation disabled</li></ol><h2 id="SSL-option问题"><a href="#SSL-option问题" class="headerlink" title="SSL option问题"></a>SSL option问题</h2><p>这是因为postgresql需要使用TLS&#x2F;SSL connections，我们可以设置一个环境变量<code>PGSSLMODE</code>为<code>required</code>就可以了。</p><p>针对Linux或者Macos用户，使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PGSSLMODE=require</span><br></pre></td></tr></table></figure><p>针对Windows用户，使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PGSSLMODE=require</span><br></pre></td></tr></table></figure><h2 id="unsafe-legacy-renegotiation-disabled"><a href="#unsafe-legacy-renegotiation-disabled" class="headerlink" title="unsafe legacy renegotiation disabled"></a>unsafe legacy renegotiation disabled</h2><p>这是因为ssl协议存在一个漏洞，后来升级的时候提供了一个开关默认关闭这个了漏洞，这个解决方法存在一定安全隐患，请谨慎使用。</p><p>创建一个自定义的<code>openssl.cnf</code>,并写入：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openssl_conf</span> = openssl_init</span><br><span class="line"></span><br><span class="line"><span class="section">[openssl_init]</span></span><br><span class="line"><span class="attr">ssl_conf</span> = ssl_sect</span><br><span class="line"></span><br><span class="line"><span class="section">[ssl_sect]</span></span><br><span class="line"><span class="attr">system_default</span> = system_default_sect</span><br><span class="line"></span><br><span class="line"><span class="section">[system_default_sect]</span></span><br><span class="line"><span class="attr">Options</span> = UnsafeLegacyRenegotiation</span><br></pre></td></tr></table></figure><p>将该config文件的路径写入名为<code>OPENSSL_CONF</code>的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENSSL_CONF=/path/to/custom/openssl.cnf</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://learn.microsoft.com/en-us/azure/postgresql/migrate/how-to-migrate-using-dump-and-restore">Migrate your PostgreSQL database by using dump and restore</a></li><li><a href="https://stackoverflow.com/questions/71603314/ssl-error-unsafe-legacy-renegotiation-disabled">SSL error unsafe legacy renegotiation disabled</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
            <tag> pg_dump </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些测试币的水龙头</title>
      <link href="/2023/01/07/web3/some-token-faucet/"/>
      <url>/2023/01/07/web3/some-token-faucet/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一些测试币的水龙头"><a href="#记录一些测试币的水龙头" class="headerlink" title="记录一些测试币的水龙头"></a>记录一些测试币的水龙头</h1><p>记录一些常用的区块链水龙头，以防忘记</p><h2 id="Goerli"><a href="#Goerli" class="headerlink" title="Goerli"></a>Goerli</h2><p><a href="https://goerli-faucet.slock.it/">Goerli Testnet Faucet</a>: 不太记得当初是怎么知道了，但是似乎永远失败…</p><p><a href="https://goerlifaucet.com/">GOERLI FAUCET</a>, 每天可以获取0.1 ETH(以前是可以每天领取0.25ETH), 需要使用<a href="https://www.alchemy.com/">Alchemy</a>账号.</p><p><a href="https://goerli-faucet.pk910.de/">Mining Faucet</a>, 使用cpu的算力去挖矿，问题不大，可以使用。</p><h2 id="polygon"><a href="#polygon" class="headerlink" title="polygon"></a>polygon</h2><p><a href="https://faucet.polygon.technology/">polygon faucet</a>, 支持多个测试网络，但是Goerli的ETH没拿到</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://hackmd.io/@m061i6/HJQQ4G5-j">免費取得Goerli測試幣</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3 </tag>
            
            <tag> Goerli </tag>
            
            <tag> polygon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s使用Let‘s Encrypt配置https入口部署</title>
      <link href="/2022/09/03/back-end/k3s-uses-letsencrypt-and-traefik-to-deploy-the-https/"/>
      <url>/2022/09/03/back-end/k3s-uses-letsencrypt-and-traefik-to-deploy-the-https/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录k3s使用letsencrypt配置ssl证书和续签。</p><p>本文使用的k3s版本为： v1.23.6+k3s1。</p><h2 id="安装-cert-manager"><a href="#安装-cert-manager" class="headerlink" title="安装 cert-manager"></a>安装 cert-manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官网提供的配置文件一键安装</span></span><br><span class="line"><span class="comment"># 如果拉取 github 资源有困难，可以从网络通畅的位置下载好粘贴过去</span></span><br><span class="line">$ kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml</span><br></pre></td></tr></table></figure><p>如果一切正常，k3s</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n cert-manager</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-6544c44c6b-tlhw8              1/1     Running   0          51s</span><br><span class="line">cert-manager-cainjector-5687864d5f-rldsg   1/1     Running   0          51s</span><br><span class="line">cert-manager-webhook-785bb86798-g4g7g      1/1     Running   0          51s</span><br></pre></td></tr></table></figure><h2 id="部署-Issuing-Certificates"><a href="#部署-Issuing-Certificates" class="headerlink" title="部署 Issuing Certificates"></a>部署 Issuing Certificates</h2><p>创建letsencrypt.yaml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">cert-manager</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&lt;YOUR</span> <span class="string">EMAIL&gt;</span> <span class="comment"># replace this</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">prod-issuer-account-key</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">http01:</span></span><br><span class="line">          <span class="attr">ingress:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">traefik</span></span><br><span class="line">        <span class="attr">selector:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请自行替换<YOUR email>为个人的邮件地址</YOUR></p></blockquote><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f letsencrypt.yaml</span><br></pre></td></tr></table></figure><p>如果一切正常:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe clusterissuer letsencrypt</span><br><span class="line">Name:         letsencrypt</span><br><span class="line">Namespace:    </span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">API Version:  cert-manager.io/v1</span><br><span class="line">Kind:         ClusterIssuer</span><br><span class="line">...</span><br><span class="line">Spec:</span><br><span class="line">  Acme:</span><br><span class="line">    Email:            user@example.com</span><br><span class="line">    Preferred Chain:  </span><br><span class="line">    Private Key Secret Ref:</span><br><span class="line">      Name:  prod-issuer-account-key</span><br><span class="line">    Server:  https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">    Solvers:</span><br><span class="line">      http01:</span><br><span class="line">        Ingress:</span><br><span class="line">          Class:  traefik</span><br><span class="line">      Selector:</span><br><span class="line">Status:</span><br><span class="line">  Acme:</span><br><span class="line">    Last Registered Email:  mingguobin@live.com</span><br><span class="line">    Uri:                    https://acme-v02.api.letsencrypt.org/acme/acct/715199687</span><br><span class="line">  Conditions:</span><br><span class="line">    Last Transition Time:  2022-09-03T12:20:23Z</span><br><span class="line">    Message:               The ACME account was registered with the ACME server</span><br><span class="line">    Observed Generation:   1</span><br><span class="line">    Reason:                ACMEAccountRegistered</span><br><span class="line">    Status:                True</span><br><span class="line">    Type:                  Ready</span><br><span class="line">Events:                    &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="给Ingress配置ssl"><a href="#给Ingress配置ssl" class="headerlink" title="给Ingress配置ssl"></a>给Ingress配置ssl</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">hoteler-namespace</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hoteler-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">secretName:</span> <span class="string">hoteler-web-tls</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hoteler.damingerdai.com</span></span><br><span class="line">  <span class="comment"># ingressClassName: traefik</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hoteler.damingerdai.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hoteler-web</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>改动如下：</p><ol><li>添加annotations的metadata</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加tls</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tls:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">secretName:</span> <span class="string">hoteler-web-tls</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hoteler.damingerdai.com</span></span><br></pre></td></tr></table></figure><p>secretName可以按照自己的习惯来取，cert-manager会自动创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ingress.yaml -n hoteler-namespace</span><br><span class="line">$ kubectl get ingress -n hoteler-namespace</span><br><span class="line">hoteler-web                 &lt;none&gt;   hoteler.damingerdai.com         204.44.75.77   80, 443   115d</span><br></pre></td></tr></table></figure><p>可以看到hoteler-web除了80端口，还新加了443端口</p><h2 id="查看证书状态"><a href="#查看证书状态" class="headerlink" title="查看证书状态"></a>查看证书状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe certificate -n hoteler-namespace</span></span><br><span class="line">...</span><br><span class="line">Status:</span><br><span class="line">  Conditions:</span><br><span class="line">    Last Transition Time:  2022-09-03T12:27:15Z</span><br><span class="line">    Message:               Certificate is up to date and has not expired</span><br><span class="line">    Observed Generation:   1</span><br><span class="line">    Reason:                Ready</span><br><span class="line">    Status:                True</span><br><span class="line">    Type:                  Ready</span><br><span class="line">  Not After:               2022-12-02T11:27:13Z</span><br><span class="line">  Not Before:              2022-09-03T11:27:14Z</span><br><span class="line">  Renewal Time:            2022-11-02T11:27:13Z</span><br><span class="line">  Revision:                1</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                                       Message</span><br><span class="line">  ----    ------     ----  ----                                       -------</span><br><span class="line">  Normal  Issuing    30m   cert-manager-certificates-trigger          Issuing certificate as Secret does not exist</span><br><span class="line">  Normal  Generated  30m   cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource &quot;hoteler-web-tls-pfxrp&quot;</span><br><span class="line">  Normal  Requested  30m   cert-manager-certificates-request-manager  Created new CertificateRequest resource &quot;hoteler-web-tls-v24f6&quot;</span><br><span class="line">  Normal  Issuing    29m   cert-manager-certificates-issuing          The certificate has been successfully issued</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/back-end/hoteler-web-certificate.png" alt="Hoteler Web"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.frytea.com/technology/k8s/k3s-uses-letsencrypt-and-traefik-to-deploy-the-https/">k3s 使用 Letsencrypt 和 Traefik 完成 https 入口部署</a></li><li><a href="http://t.zoukankan.com/dream2true-p-13064701.html">K3S与Docker常用命令</a></li><li><a href="https://cert-manager.io/docs/tutorials/acme/nginx-ingress/">Securing NGINX-ingress</a></li><li><a href="https://github.com/cert-manager/cert-manager/issues/2319">Documenting “context deadline exceeded” errors relating to the webhook</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ssl </tag>
            
            <tag> k3s </tag>
            
            <tag> letsencrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Ingress上配置ssl证书</title>
      <link href="/2022/06/18/back-end/add-ssl-for-ingress/"/>
      <url>/2022/06/18/back-end/add-ssl-for-ingress/</url>
      
        <content type="html"><![CDATA[<h1 id="给Ingress上配置ssl证书"><a href="#给Ingress上配置ssl证书" class="headerlink" title="给Ingress上配置ssl证书"></a>给Ingress上配置ssl证书</h1><h2 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls [secretName]  --cert=[pem文件路径] --key=[key文件路径] --namespace [namespace] -o yaml --dry-run=client &gt; ingress-default-cert.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl apply -f ingress-default-cert.yaml</span><br></pre></td></tr></table></figure><h2 id="Ingress添加证书"><a href="#Ingress添加证书" class="headerlink" title="Ingress添加证书"></a>Ingress添加证书</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>  </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">    <span class="attr">name:</span> [<span class="string">ingress-name</span>] </span><br><span class="line">    <span class="attr">namespace:</span> [<span class="string">namespace</span>] <span class="comment"># ingress要和secret在同一个名称空间下 </span></span><br><span class="line">    <span class="attr">annotations:</span> </span><br><span class="line">        <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span> </span><br><span class="line">        <span class="attr">traefik.frontend.rule.type:</span> <span class="string">PathPrefixStrip</span> </span><br><span class="line">        <span class="comment"># http 重定向到 https </span></span><br><span class="line">        <span class="attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;True&quot;</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">    <span class="attr">tls:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">hosts:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">xxxx.xxxx</span> <span class="comment"># 这里是下面要配置https的域名 </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">xxxx.xxxx</span> <span class="comment"># 这里是下面要配置https的域名 </span></span><br><span class="line">        <span class="attr">secretName:</span> </span><br><span class="line">            [<span class="string">secret-name</span>]<span class="string">:</span> </span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">xxx.xxx.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> [<span class="string">service-name</span>]</span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mars-tian.github.io/2022/01/10/%E4%B8%BAk8s%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/">为k8s集群配置SSL证书</a></li><li><a href="https://ubisoft-potato.github.io/2019/11/03/k3s-pei-zhi-ingress-shi-yong-ssl-zheng-shu/">k3s配置ingress使用ssl证书</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular独立组件简单体验</title>
      <link href="/2022/06/09/front-end/angular-standalone-components-app/"/>
      <url>/2022/06/09/front-end/angular-standalone-components-app/</url>
      
        <content type="html"><![CDATA[<h1 id="Angular独立组件简单体验"><a href="#Angular独立组件简单体验" class="headerlink" title="Angular独立组件简单体验"></a>Angular独立组件简单体验</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Angular 14一项令人兴奋的特性就是Angular的独立组件终于来了。</p><p>在Angular 14中， 开发者可以尝试使用独立组件开发各种组件，但是值得注意的是Angular独立组件的API仍然没有稳定下，将来可能存在一些破坏性更新，所以不推荐在生产环境中使用。</p><h2 id="如何创建一个独立组件"><a href="#如何创建一个独立组件" class="headerlink" title="如何创建一个独立组件"></a>如何创建一个独立组件</h2><p>对于已有的组件，我们可以在<code>@Component()</code>中添加<em>standalone: true</em>的标识，然后我们可以在没有<code>@NgModule()</code>的情况下直接使用<code>imports</code>导入其他模块了。<br>如果是新建组件，可以使用<code>ng generate component &lt;name&gt; --standalone</code>的命令，直接创建一个独立组件, 例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component button-list --standalone</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-button-list&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./button-list.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./button-list.component.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ButtonListComponent</span> implements <span class="title class_">OnInit</span></span><br></pre></td></tr></table></figure><h2 id="在独立组件中导入已有的模块"><a href="#在独立组件中导入已有的模块" class="headerlink" title="在独立组件中导入已有的模块"></a>在独立组件中导入已有的模块</h2><p>我们可以在<code>imports</code>中添加已有的模块，以<code>MatButtonModule</code>为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    MatButtonModule,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>这样子我们就可以在<code>ButtonListComponent</code>中使用<code>MatButtonModule</code>的<code>mat-button</code>组件了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span>&gt;</span>Basic<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span> <span class="attr">color</span>=<span class="string">&quot;accent&quot;</span>&gt;</span>Accent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span> <span class="attr">color</span>=<span class="string">&quot;warn&quot;</span>&gt;</span>Warn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span> <span class="attr">disabled</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">mat-button</span> <span class="attr">href</span>=<span class="string">&quot;https://damingerdai.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/images/angular-standalone-components-app/angular-standalone-components-app-button-list.png" alt="angular-standalone-components-app-button-list"></p><h2 id="使用独立组件启动Angular应用"><a href="#使用独立组件启动Angular应用" class="headerlink" title="使用独立组件启动Angular应用"></a>使用独立组件启动Angular应用</h2><p>第一步， 将<code>AppComponent</code>设置为独立组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.scss&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步，将<code>AppModule</code>的imports中的导入的模块加入到<code>AppComponent</code>的imports中,但是有两个模块例外： <code>BrowserModule</code>和<code>BrowserAnimationsModule</code>。</p><p>如果导入的话，可能会导致** <code>BrowserModule</code> have already been loaded. If you need access to common directives such as NgIf and NgFor, import the <code>CommonModule</code> instead.**的问题：</p><p><img src="/images/angular-standalone-components-app/angular-app-commonent-browser-module-error.png" alt="angular-app-commonent-browser-module-error"></p><p>第三步，删除<code>app.module.ts</code>文件</p><p>最后一步， 将<code>main.ts</code>中的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure><p>这样子我们就实现了使用独立组件启动Angular组件了。</p><h2 id="为独立组件配置路由"><a href="#为独立组件配置路由" class="headerlink" title="为独立组件配置路由"></a>为独立组件配置路由</h2><p>我这里分别有三个独立组件： <code>HomeComponent</code>, <code>ButtonListComponent</code> 和 <code>ChipListComponent</code>，</p><p>然后在<code>main.ts</code>中创建<strong>ROUTES</strong>对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./app/button-list/button-list.component&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">mod</span>) =&gt;</span> mod.<span class="property">ButtonListComponent</span></span><br><span class="line">      ),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;chip&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./app/chip-list/chip-list.component&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">mod</span>) =&gt;</span> mod.<span class="property">ChipListComponent</span></span><br><span class="line">      ),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>其中<code>ButtonListComponent</code>和<code>ChipListComponent</code>使用<code>loadComponent</code>去实现路由懒加载。</p><p>最后在<code>bootstrapApplication</code>的第二个参数中使用<code>providers</code>注册<code>RouterModule</code>好了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    importProvidersFrom(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([...<span class="variable constant_">ROUTES</span>])),</span><br><span class="line">  ],</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/images/angular-standalone-components-app/angular-standalone-components-app-button-list.gif" alt="angular-standalone-components-app-button-list"></p><h2 id="配置依赖注入"><a href="#配置依赖注入" class="headerlink" title="配置依赖注入"></a>配置依赖注入</h2><p>当我们想要启动Angular应用的时候，可能需要注入一些值或者服务。 在<code>bootstrapApplication</code>, 我们可以通过<code>providers</code>来注册值或者服务。</p><p>比如，我有一个获取图片的url，需要注入到<code>PhotoService</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="string">&#x27;photoUrl&#x27;</span>,</span><br><span class="line">      <span class="attr">useValue</span>: <span class="string">&#x27;https://picsum.photos&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">provide</span>: <span class="title class_">PhotosService</span>, <span class="attr">useClass</span>: <span class="title class_">PhotosService</span> &#125;,</span><br><span class="line">    importProvidersFrom(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([...<span class="variable constant_">ROUTES</span>])),</span><br><span class="line">    importProvidersFrom(<span class="title class_">HttpClientModule</span>)</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>PhotoService</code>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PhotosService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    @Inject(<span class="string">&#x27;photoUrl&#x27;</span>) private photoUrl: string,</span></span><br><span class="line"><span class="params">    private http: HttpClient</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  public <span class="title function_">getPhotoUrl</span>(<span class="attr">i</span>: number): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.photoUrl&#125;</span>/200/300?random=<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文所使用的<a href="https://github.com/damingerdai/angular-standalone-components-app">源代码</a></p><p>线上<a href="https://damingerdai.github.io/angular-standalone-components-app/">demo</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.angular.io/angular-v14-is-now-available-391a6db736af">Angular v14 is now available!</a></li><li><a href="https://angular.io/guide/standalone-components">Getting started with standalone components</a></li><li><a href="https://material.angular.io/">Angular Material</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drone + gogs + docker实现持续自动化部署</title>
      <link href="/2022/05/15/software/install/drone-gogs-docker-devops/"/>
      <url>/2022/05/15/software/install/drone-gogs-docker-devops/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们使用docker-compose来安装gogs和drone。</p><p>首先我们准备数据库，gogs支持mysql，postgres, sqlite, sql server和TiDB。<br>这里我们选择使用postgre:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./postgres:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ci-network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>创建docker网络并启动数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create ci-network (仅第一次运行)</span><br><span class="line"></span><br><span class="line">docker-compose up postgres</span><br></pre></td></tr></table></figure><h2 id="Gogs"><a href="#Gogs" class="headerlink" title="Gogs"></a>Gogs</h2><p><code>Gogs</code>是一款极易搭建的自助 Git 服务, 使用go开发，可以很方便的在任何go支持的平台上部署</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在docker-compose.yaml上添加gogs</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gogs:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">gogs/gogs:0.12.6</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">&#x27;gogs&#x27;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;10022:22&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;13000:3000&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./gogs:/data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gogs/gogs</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ci-network</span></span><br></pre></td></tr></table></figure><p>gogs使用22端口提供ssh， 使用3000提供web页面服务，这里我们分别映射到本地的10022和13000端口</p><p>启动gogs服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up gogs</span><br></pre></td></tr></table></figure><p>使用浏览器打开<a href="http://127.0.0.1:13000/install">http://127.0.0.1:13000/install</a></p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-install-ui.png" alt="gogs的install页面"></p><p>设置postgresql数据库，</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-install-ui-postgreq-settings.png" alt="gogs的install的postgreql设置"></p><p>设置应用基本设置</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-install-ui-application-settings.png" alt="gogs的install的应用设置"></p><p>跳过邮件服务设置， 关闭·启用验证码服务,</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-install-ui-email-settings.png" alt="gogs的install的邮件设置"></p><p>设置管理员账号,</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-install-ui-admin-settings.png" alt="gogs的install的管理员设置"></p><p>最后我们可以点击安装按钮了，浏览器将会跳转到<code>http://host.docker.internal:3000</code>, 但是我们其实不能访问这个链接，不过不用担心，可以使用<a href="http://127.0.0.1:13000/">http://127.0.0.1:13000</a></p><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><p>在<a href="http://127.0.0.1:13000/user/settings/ssh">http://127.0.0.1:13000/user/settings/ssh</a>页面上设置你的SSH 密钥：</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-ssh-settings.png" alt="gogs的SSH密钥配置"><br><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-ssh-settings-result.png" alt="gogs的SSH密钥配置"></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-create-new-repo-1.png" alt="gogs的创建仓库"><br><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-create-new-repo-2.png" alt="gogs的创建仓库"><br><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-create-new-repo-3.png" alt="gogs的创建仓库"></p><p>这里我使用我的<a href="https://github.com/damingerdai/hoteler-web">hoteler-web</a>作为demo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/damingerdai/hoteler-web.git</span><br><span class="line">git remote add gogs ssh://git@localhost:10022/daming/hoteler-web.git</span><br><span class="line">git push gogs master</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-create-new-repo-4.png" alt="gogs的创建仓库"></p><p>换一个目录, 把hoteler-web拉到本地，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@localhost:10022/daming/hoteler-web.git</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-ui-hoteler-web-clone-termial.png" alt="gogs的hoteler-web仓库"></p><h2 id="Drone"><a href="#Drone" class="headerlink" title="Drone"></a>Drone</h2><p><code>Drone</code>是一个持续集成和持续交付的平台，可以与Docker完美集成。相对于<code>Jenkins</code>来说更加轻量，可以配合轻量的Gogs来实现持续集成</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">drone-server:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">drone/drone:2.11</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">drone</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10081</span><span class="string">:80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./drone:/var/lib/drone/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_OPEN=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=drone-server</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_LOGS_TRACE=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_GOGS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_GOGS_SKIP_VERIFY=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_GOGS_SERVER=http://host.docker.internal:13000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_PROVIDER=gogs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=sqlite3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=MWckgvhjqg4E3eQ0psgZX4iNCxoQiyU4LLvO4eXFFuHtrTkIy8vwcAc3erB5f9reM</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_SECRET=ALQU2M0KdptXUdTPKcEw</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:daming,admin:true</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line"><span class="attr">drone-runner-docker:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:1.8.1</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./pipe/docker_engine://./pipe/docker_engine</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">13001</span><span class="string">:3000</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=drone-server</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=MWckgvhjqg4E3eQ0psgZX4iNCxoQiyU4LLvO4eXFFuHtrTkIy8vwcAc3erB5f9reM</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_LOGS_TRACE=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPCAITY=2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=docker-runner</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DRONE_SECRET=ALQU2M0KdptXUdTPKcEw</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up drone-server drone-runner-docker</span><br></pre></td></tr></table></figure><p>在浏览器中打开<a href="http://127.0.0.1:10081/">http://127.0.0.1:10081</a>。</p><p>drone没有自己的账号信息, 直接使用gogs的账号信息就好了</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ui-login.png" alt="drone登录页面"><br><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ui-register.png" alt="drone注册页面"></p><p>激活<code>hoteler-web</code>仓库</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ui-hoteler-web-dashboard.png" alt="drone的hoteler-web"><br><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ui-hoteler-web-active-repository.png" alt="drone的hoteler-web"></p><p>我们需要设置<code>Project Settings</code>中开启<em>Truste</em>配置：</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ui-hoteler-web-active-repository-trusted.png" alt="drone的hoteler-web"></p><h3 id="配置drone-yml"><a href="#配置drone-yml" class="headerlink" title="配置drone.yml"></a>配置drone.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">hoteler-web</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:16</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="attr">branch:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>并提交到gogs仓库里。</p><h3 id="配置gogs的wehook"><a href="#配置gogs的wehook" class="headerlink" title="配置gogs的wehook"></a>配置gogs的wehook</h3><p>在浏览器中进入<a href="http://127.0.0.1:13000/daming/hoteler-web/settings/hooks/1">http://127.0.0.1:13000/daming/hoteler-web/settings/hooks/1</a></p><p>我们把<code>http://drone-server/hook</code>改成<code>http://host.docker.internal:10081/hook</code>, 点击更新web钩子的按钮。</p><p>最后我们可以点击测试推送的按钮：</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/gogs-web-hook-test.png" alt="drone的webhook测试"></p><p>在drone我们可以看到：</p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/software/drone-ci-cd-result.png" alt="drone的webhook结果"></p><blockquote><p>第一次ci&#x2F;cd可能是网络问题，导致开启<code>node:16</code>镜像太慢了，上面的截图其实是第二次的结果</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>drone无法clone的gogs的地址问题<br>在<code>gogs/gogs/conf/app.ini</code>中将<em>EXTERNAL_URL</em>修改为*<a href="http://host.docker.internal:13000/*%EF%BC%88%E4%BB%85%E4%BB%85%E4%BD%9C%E4%B8%BA%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%EF%BC%89">http://host.docker.internal:13000/*（仅仅作为本地使用）</a></p></li><li><p>容器无法访问localhost<br>windows或者mac用户可以使用host.docker.internal，其他系统尚未测试过。</p></li></ol><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./postgres:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line">  <span class="attr">gogs:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gogs/gogs:0.12.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&#x27;gogs&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;10022:22&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;13000:3000&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gogs:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gogs/gogs</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:2.11</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10081</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./drone:/var/lib/drone/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_OPEN=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=drone-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_TRACE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS_SKIP_VERIFY=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS_SERVER=http://host.docker.internal:13000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_PROVIDER=gogs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=sqlite3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=MWckgvhjqg4E3eQ0psgZX4iNCxoQiyU4LLvO4eXFFuHtrTkIy8vwcAc3erB5f9reM</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SECRET=ALQU2M0KdptXUdTPKcEw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:daming,admin:true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line">  <span class="attr">drone-runner-docker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:1.8.1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./pipe/docker_engine://./pipe/docker_engine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13001</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=drone-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=MWckgvhjqg4E3eQ0psgZX4iNCxoQiyU4LLvO4eXFFuHtrTkIy8vwcAc3erB5f9reM</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_TRACE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_LOGS_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPCAITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=docker-runner</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SECRET=ALQU2M0KdptXUdTPKcEw</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ci-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ci-network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://gogs.io/">gogs官网</a></li><li><a href="https://www.cnblogs.com/shanfeng1000/p/14622319.html">gogs安装与说明(docker)</a></li><li><a href="https://zhuanlan.zhihu.com/p/108842332">Drone+Gogs+docker实现持续自动化部署</a></li><li><a href="https://kanda.me/2019/03/06/building-ci-cd-system-by-drone/">使用drone和gogs搭建自己的CI&#x2F;CD系统</a></li><li><a href="https://zhuanlan.zhihu.com/p/81904099">Setup CI&#x2F;CD service with gogs &amp; registry &amp; drone</a></li><li><a href="https://www.cnblogs.com/manastudent/p/15938616.html">Drone 教程</a></li><li><a href="https://my.oschina.net/keking/blog/3053769">轻量快速的CI工具Drone快速入门</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> drone </tag>
            
            <tag> gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K3S安装的时候默认使用docker</title>
      <link href="/2022/05/15/software/k8s/k3s-install-with-docker/"/>
      <url>/2022/05/15/software/k8s/k3s-install-with-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="K3S安装的时候默认使用docker"><a href="#K3S安装的时候默认使用docker" class="headerlink" title="K3S安装的时候默认使用docker"></a>K3S安装的时候默认使用docker</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>k8s在1.20之后就弃用docker的运行时了，所以k3s也开始默认使用<a href="https://containerd.io/">containerd</a>作为默认的运行时。<br>这导致一个问题。那就是k3s无法访问本地docker镜像。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一种解决方案就是使用containerd的镜像，而不是docker。还有一种方式是在安装时就指定k3s使用docker作为运行环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/k3s-uninstall.sh</span><br><span class="line">curl -sfL https://get.k3s.io | sh -s - server --docker</span><br></pre></td></tr></table></figure><p>国内用户，可以使用以下方法加速安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -s - server --docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> k3s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用github action推送到docker的镜像仓库</title>
      <link href="/2022/04/16/back-end/github-action-push-docker-image-to-github-packages/"/>
      <url>/2022/04/16/back-end/github-action-push-docker-image-to-github-packages/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>请在github的<a href="https://github.com/settings/tokens">设置页面</a>上创建一个token，并确保有以下的权限：</p><ul><li>repo</li><li>read:packages</li><li>write:packages</li></ul><blockquote><p>请保存好该token，因为github将隐藏该值</p></blockquote><p>在github的仓库的secrets设置页面(例：<a href="https://github.com/%7Byour_username%7D/%7Byour_repository_name%7D/settings/secrets/actions)%E9%87%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BAGHCR_PAT%E7%9A%84secrets">https://github.com/{your_username}/{your_repository_name}/settings/secrets/actions)里创建一个名为GHCR_PAT的secrets</a></p><p><img src="https://raw.githubusercontent.com/damingerdai/damingerdai.github.io/master/assets/back-end/github-action-push-docker-image-to-github-packages-1.png" alt="secrets设置页面"></p><h1 id="创建GitHub-Action文件"><a href="#创建GitHub-Action文件" class="headerlink" title="创建GitHub Action文件"></a>创建GitHub Action文件</h1><p>在<code>.github/workflow</code>中创建一个<code>build-and-publish.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-push-docker-image:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">and</span> <span class="string">push</span> <span class="string">to</span> <span class="string">repositories</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">Github</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">registry:</span> <span class="string">ghcr.io</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.actor</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GHCR_PAT</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">image</span> <span class="string">and</span> <span class="string">push</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Container</span> <span class="string">Registry</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">docker_build</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            # 将usernmae和repository改成你自己的github账号和仓库名</span></span><br><span class="line"><span class="string">            ghcr.io/&#123;usernmae&#125;/&#123;repository&#125;:$&#123;&#123; github.sha &#125;&#125;</span></span><br><span class="line"><span class="string">            # 当且只有运行在master分支时才需要推送到github容器仓库</span></span><br><span class="line"><span class="string"></span>          <span class="attr">push:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Image</span> <span class="string">digest</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.docker_build.outputs.digest</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>默认推送的镜像是私有，想要公开，可以在<br><code>https://github.com/users/&#123;your_username&#125;/packages/container/&#123;your_repository_name&#125;/settings</code>下面的Danger Zone中的Change package visibility设置成<em>public</em>还是<em>private</em>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://event-driven.io/en/how_to_buid_and_push_docker_image_with_github_actions/">How to build and push Docker image with GitHub actions?</a></li><li><a href="https://github.com/damingerdai/hoteler/blob/master/.github/workflows/build-and-publish.yml">Hoteler</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> github action </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种在Minikube中运行本地Docker镜像的简单方式</title>
      <link href="/2022/03/23/back-end/two-easy-ways-to-use-local-docker-images-in-minikube/"/>
      <url>/2022/03/23/back-end/two-easy-ways-to-use-local-docker-images-in-minikube/</url>
      
        <content type="html"><![CDATA[<h1 id="两种在Minikube中运行本地Docker镜像的简单方式"><a href="#两种在Minikube中运行本地Docker镜像的简单方式" class="headerlink" title="两种在Minikube中运行本地Docker镜像的简单方式"></a>两种在Minikube中运行本地Docker镜像的简单方式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将分享两种在Minikube中运行本地Docker镜像的简单方式</p><p><img src="https://miro.medium.com/max/1400/1*Q8RckeLvx7rVFNPTHzx21A.png" alt="Kubernetes"></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>安装并运行<a href="https://www.docker.com/get-started">Docker</a></li><li>安装并运行<a href="https://minikube.sigs.k8s.io/docs/start/">Minikube</a></li><li><a href="https://kubernetes.io/docs/tasks/tools/">安装kubectl</a></li></ul><h2 id="你将学到的知识"><a href="#你将学到的知识" class="headerlink" title="你将学到的知识"></a>你将学到的知识</h2><p>本文将教会大家如何在Minikube中使用本地的Docker镜像。因为Kubernetes默认从注册表中提取镜像，所以Kubernetes一般是不会使用本地镜像，并且在生产环境中也不应该使用本地镜像。但是，如果我们可以很轻松的使用本地镜像，而不是每次都需要将这些镜像推送到远程的注册表、登录远程注册表并在本地电脑中重新拉取，那么使用本地镜像将十分便利。</p><p>和往常一样，我在github中准备了一个<a href="https://github.com/Abszissex/medium-local-docker-image-minikube">仓库</a>, 方便大家查看完成的代码库，并且可以按照本文描述的步骤进行操作。</p><h2 id="Demo介绍"><a href="#Demo介绍" class="headerlink" title="Demo介绍"></a>Demo介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">|- app/</span><br><span class="line">  |- Dockerfile</span><br><span class="line">  |- index.js</span><br><span class="line">  |- package.json</span><br><span class="line">|- deployment.yaml</span><br></pre></td></tr></table></figure><p>在上面的文件夹结构中，我将重点介绍将在本文中使用的重点文件：</p><ul><li><p><strong>app&#x2F;Dockerfile</strong> 用于构建包含一个Node.js Web 服务器的本地Docker镜像的Dockerfile，我们将其部署到Minikube</p></li><li><p><strong>app&#x2F;index.js</strong> Node.js Web 服务器的应用程序代码</p></li><li><p><em><strong>app&#x2F;package.json</strong> 我们Node.js Web 服务器的依赖。在本文中，只使用了</em>*express**，一个用于搭建Web服务器的Nodejs库</p></li><li><p><strong>deployment.yaml</strong> 在Kubernetes中运行Node.js Web 服务器的Deployment配置</p></li></ul><p><strong>app</strong>文件夹中的实际内容和本文无关。 我仅仅是提供一个demo方便接下来的教程讲解，当然使用你自己的demo也是可以的。如果你想要使用<strong>app</strong>这个应用，请注意服务器将在容器内部中监听8080端口。</p><h2 id="Deployment配置"><a href="#Deployment配置" class="headerlink" title="Deployment配置"></a>Deployment配置</h2><p><strong>deployment.yaml</strong>的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp</span><br><span class="line">  labels:</span><br><span class="line">    name: myapp</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: myapp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: myapp</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: myapp</span><br><span class="line">          image: pz/demo</span><br><span class="line">          imagePullPolicy: Never</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8080</span><br></pre></td></tr></table></figure><p>我们需要重点关注的是<strong>imagePullPolicy</strong>和<strong>containerPort</strong>这两个配置</p><p>通过<strong>containerPort</strong>，我们将暴露app正在监听的<em>8080</em>端口，因此我们稍后可以通过浏览器访问<em><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></em>去验证是否满足我们预期那样工作。</p><p>更关键的是<strong>imagePullPolicy</strong>。如果你想使用本地Docker镜像，<strong>imagePullPolicy</strong>需要设置成<strong>Never</strong>, 否则， Kubernetes将在注册表中根据你提供的名字来搜素同名镜像。</p><h2 id="构建Dcoker镜像"><a href="#构建Dcoker镜像" class="headerlink" title="构建Dcoker镜像"></a>构建Dcoker镜像</h2><p>为了验证Docker镜像能够按照我们的预期在Kubernetes中运行，让我们来构建并运行。</p><p>首先，我们导航进入<strong>app</strong>目录，然后我们通过<strong>docker build -t pz&#x2F;demo .<strong>构建Docker镜像，通过</strong>-t</strong>参数将镜像名字设置为<strong>pz&#x2F;demo</strong>。</p><p><img src="https://miro.medium.com/max/1400/1*Q-XZFc-_TRrTfwS_-DtHQw.png" alt="docker images"></p><p>当构建完成之后，我们可以通过<strong>docker run -it –rm -p 8080:8080 pz&#x2F;demo</strong>命令来运行容器，并将Docker的8080端口映射的本地的8080端口。接下来，我们可以在浏览器中访问<a href="http://localhost:8080/">localhost:8080</a>。 如果我们可以在浏览器中看到*”Hello World!”*，那么说明我们的容器运行正常。</p><p><img src="https://miro.medium.com/max/1224/1*BrzMRioHmZEaR1km1C0EWA.png" alt="localhost:8080"></p><h2 id="在Minikube中运行本地Docker镜像"><a href="#在Minikube中运行本地Docker镜像" class="headerlink" title="在Minikube中运行本地Docker镜像"></a>在Minikube中运行本地Docker镜像</h2><p>如果你想通过<strong>kubectl apply -f deployment.yaml</strong>命令部署上面的<strong>deployment.yaml</strong>到你的Minikube中，那启动的Pod将找不到你刚刚构建的Docker镜像。</p><p>你可以通过<strong>kubectl logs deployment.apps&#x2F;myapp</strong>命令来检查日志去来验证这个错误的结果。</p><p><img src="https://miro.medium.com/max/1400/1*qGB6vXA3rpRnubXQ9Qf3oQ.png" alt="kubectl logs deployment.apps/myapp"></p><p>上面的日志显示由于Kubernetes拉取不到镜像Pod一直等待重启。这其实是因为Minikube没有方法获取你本地Docker镜像。</p><p>但是幸运的是，有两个简单的命令可以帮助解决这个问题。</p><p>第一种方式是使用<strong>image load</strong>命令， 你可以使用下面的名利将本地Docker镜像从本地电脑中导入Minikube中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">General</span></span><br><span class="line">minikube image load &lt;IMAGE_NAME&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example</span></span><br><span class="line">minikube image load pz/demo</span><br></pre></td></tr></table></figure><p>在导入完成之后，你可以重启pod。然后你可以发现pod可以正常工作了。</p><p>其实我们还可以变得更简单。以前的方法是你需呀先在本地构建Docker镜像，然后将其移动到Minikube容器中，虽然耗时不多，但是终究还是浪费了不少时间。</p><p>通过使用Minikube的<strong>image build</strong>， 我们可以在Minikube中直接构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">General</span></span><br><span class="line">minikube image build -t &lt;IMAGE_NAME&gt; .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example</span></span><br><span class="line">minikube image build -t pz/demo .</span><br></pre></td></tr></table></figure><p>使用<strong>minikube image build</strong>构建出来的镜像可以在Minikkube中直接访问，同时也不再需要在<strong>minikube image load</strong>中的第二步导入步骤。</p><p>使用以上两种之一的方法，我们可以重新检查一下Deployment的日志：</p><p><img src="https://miro.medium.com/max/1400/1*-yXXk7reYwXm_w3folq6kQ.png" alt="kubectl logs deployment.apps/myapp"></p><p>为了进一步验证一切是否按照我们预期的工作，我们可以使用下面的命令将本地8080端口转发发Deployment的8080端口中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward deployment/myapp 8080:8080</span><br></pre></td></tr></table></figure><p>重新检查浏览器，我们可以发现本地构建的应用在Minikube中运行正常，🎉🎉🎉</p><p><img src="https://miro.medium.com/max/1224/1*BrzMRioHmZEaR1km1C0EWA.png" alt="localhost:8080"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文，你应该能够使用<strong>minikube image load</strong>和<strong>minikube image buildcommand</strong>命令在Minikube中使用本地镜像了.</p><p>更多信息请关注<a href="https://www.linkedin.com/in/pascal-zwikirsch-3a95a1177/">LinkedIn</a></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>原文：<a href="https://medium.com/gitconnected/two-easy-ways-to-use-local-docker-images-in-minikube-cd4dcb1a5379">Two easy ways to use local Docker images in Minikube</a></p><p>译文： <a href="https://damingerdai.github.io/back-end/two-easy-ways-to-use-local-docker-images-in-minikube/">两种在Minikube中运行本地Docker镜像的简单方式</a></p><p>译者：<a href="https://damingerdai.github.io/">大明二代</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac版minikube安装笔记</title>
      <link href="/2022/01/17/software/k8s/how-to-install-minkube-on-mac/"/>
      <url>/2022/01/17/software/k8s/how-to-install-minkube-on-mac/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac版minikube安装笔记"><a href="#Mac版minikube安装笔记" class="headerlink" title="Mac版minikube安装笔记"></a>Mac版minikube安装笔记</h1><p><a href="https://minikube.sigs.k8s.io/docs/start/">minikube</a>是一个专注于让Kubernetes更加容易学习和开发的本地Kubernetes。<br>只需要<a href="https://www.docker.com/">Docker</a>或者虚拟机环境，我们便可以通过<code>minikube start</code>就能快速启动Kubernetes。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>安装minikube需要以下要求：</p><ol><li>至少两个CPU</li><li>至少2GB内容</li><li>至少20GB的硬盘空间</li><li>容器或者虚拟机， 比如<a href="https://www.docker.com/">Docker</a>, <a href="https://github.com/moby/hyperkit">Hyperkit</a>, <a href="https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview">Hyper-V</a>, <a href="https://www.linux-kvm.org/page/Main_Page">KVM</a>, <a href="https://www.parallels.com/">Parallels</a>, <a href="https://podman.io/">Podman</a>, <a href="https://www.virtualbox.org/">VirtualBox</a>, or <a href="https://www.vmware.com/asean/products/fusion.html">VMware Fusion&#x2F;Workstation</a></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>针对macos的x86-64的平台的，可以使用homebrew进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></table></figure><p>如果倾向于二进制文件安装，可以使用下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64</span><br><span class="line">sudo install minikube-darwin-amd64 /usr/local/bin/minikube</span><br></pre></td></tr></table></figure><p>如果是其他平台的操作系统，请看<a href="https://minikube.sigs.k8s.io/docs/start/">minikube的官网教程</a></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>简单来说，可以直接使用<code>minikube start</code>可以直接启动了，但是在国内用于特殊的网络限制，请使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com  --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure><h3 id="驱动（Drivers）"><a href="#驱动（Drivers）" class="headerlink" title="驱动（Drivers）"></a>驱动（Drivers）</h3><p>通过驱动，minikube可以支持不同的容器和虚拟机。</p><p>针对macos来说，推荐使用docker和hyperkit，我们只需要在上面的命令的基础上添加<code>--vm-driver=docker</code>或者<code>--vm-driver=hyperkit</code>。</p><p>其他平台可以访问<a href="https://minikube.sigs.k8s.io/docs/drivers/">Drivers</a>。</p><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><p><a href="https://kubernetes.io/docs/tasks/tools/">kubectl</a>是Kubernetes的命令行工具，方便用户通过一些简单的命令去管理Kubernetes。</p><p>如果事先安装了<a href="https://desktop.docker.com/mac/stable/Docker.dmg">docker desktop</a>, 那么<code>kubectl</code>已经安装好了，<br>如果没有安装，那可以使用homebrew安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl </span><br></pre></td></tr></table></figure><p>其他平台可以访问<a href="https://kubernetes.io/docs/tasks/tools/#kubectl">kubectl</a></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>新建终端，输入<code>kubectl get po -A</code>,显示以下类似命令就算启动成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-7d89d9b6b8-d462h           0/1     Running   0          20s</span><br><span class="line">kube-system   etcd-minikube                      1/1     Running   0          32s</span><br><span class="line">kube-system   kube-apiserver-minikube            1/1     Running   0          35s</span><br><span class="line">kube-system   kube-controller-manager-minikube   1/1     Running   0          32s</span><br><span class="line">kube-system   kube-proxy-gcbpj                   1/1     Running   0          20s</span><br><span class="line">kube-system   kube-scheduler-minikube            1/1     Running   0          31s</span><br><span class="line">kube-system   storage-provisioner                1/1     Running   0          30s</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>以下是本文撰写过程中的参考资料：</p><ol><li><a href="https://minikube.sigs.k8s.io/docs/start/">minikube start</a></li><li><a href="https://kubernetes.io/docs/tasks/tools/#kubectl">kubectl</a></li><li><a href="https://damingerdai.github.io/software/k8s/how-to-install-minkube/">Minkube安装笔记</a></li><li><a href="https://developer.aliyun.com/article/221687">Minikube - Kubernetes本地实验环境</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> minikube </tag>
            
            <tag> kubernetes </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年度总结</title>
      <link href="/2021/12/31/summary/2022/"/>
      <url>/2021/12/31/summary/2022/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年度总结"><a href="#2022年度总结" class="headerlink" title="2022年度总结"></a>2022年度总结</h1><p>2022年真的是一个让人难以忘怀的年份，尤其在先后经历了上海封城、老丈人去世、领证结婚。</p><h2 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h2><p>还记得2020年疫情刚开始的时候，那时侯自己一个人开车回上海，路上的车辆非常少，开车的感觉真的可以说非常爽，完全可以闭着眼开车，反正看不到车，即使进了上海市区。那个时候单纯的想，少则三个月，多则半年，疫情就会自然而然的过去，到时候我们该吃吃该喝喝。虽然这个判断翻车了，但是2021年也是对国内疫情还是比较乐观。但是2022年的上海封城打破了我所有的幻想。我从来没想过上海居然玩砸了“动态清理”，从华亭宾馆开始，上海的疫情持续不断，感染人数死活都下不去。</p><p>3月份我刚搬到南翔就被封控了，但是我刚开始还好，虽然什么吃的都没有，但是只要封控时间到了就能出去买点东西。但遗憾的是，从4月份开始，上海开始静默了，我足足封在家里差不多两个月。我本来是不反对封城的，但是上海市政府真的很让人失望，疫情两年了，市政府似乎没有做好任何相关封城的预案。而且总感觉可能涉及到二十大的高层安排，市政府决策层应该是存在分歧的，并且和医疗系统的人也存在一定的隔阂。由于上层的问题，基层机构出现各种乱七八糟的事儿那也能理解了。</p><p>在经过了白纸运动之后，我们的防疫政策从一个极端走向另外一个极端。我们彻底放开了，让80%以上的人感染了一遍。我不是反对放开，但是我比较反对如此毫无征兆的放开，没有准备好各种的退烧药，没有准备好口罩。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>今年继续做一个<code>web2.5</code>的项目，就是<code>web2.0</code> + <code>区块链</code>，不能算得上正宗的<code>web3.0</code>。其核心就是将部分原来放在数据库的数据放在区块链里。所以我们一般自称为<code>web2.5</code>。</p><p>目前部门想全力押宝·web3·，希望能和审计部门能够做好技术服务，所以未来对区块链的研究大概率是会集中中<code>DeFi(去中心化金融)</code>。对我来说，金融是一个毫无头绪的东西，之前并没有接触过，没有一个良好的业务场景可以让我研究，导致对我来说<code>DeFi</code>可能只是一个比较空泛的名词。</p><p>过去的一年，对以太坊还是比较浅显的，同时将也做了一些简单的demo。总的来说，也算简单的入门学了点皮毛，但是对智能合约的开发还是基本上一窍不通的。希望接下来的一年可以深入研究智能合约，可以独立开发智能合约并部署到一个测试网络。solana也会是一个比较重要的关注方向，但是考虑到solana的东家出点事儿，可能不太会重心在这个方面，不过rust语言还是会尽量深挖一下，这是一个很有挑战性的方向</p><p>今年应该很少写angular了，更多开始写react。从我个人的角度来说，jsx和react hook对写一些组件来说确实是一把利器，但是对于如何做好一个完整的、强大的前端web应用来说，react的生态是不足的，太碎裂了，导致在接手不同的项目的时候总是能看到不同的react写法和工程组织形式。最近在<a href="https://github.com/adcentury/react-mobile-picker">react-mobile-picker</a>做一个<a href="https://github.com/damingerdai/react-mobile-picker">重构</a>。一个方面是想改成通用的monorepo的组织形式，另外一个方面是需要升级核心依赖并使用typescript重写。目前这个工作还在努力中。 angular方面更多的专注于<a href="https://github.com/damingerdai/ngx-dom-confetti">ngx-dom-confetti</a>, 目前仅仅是对<a href="https://www.npmjs.com/package/dom-confetti">dom-confetti</a>的angular封装，将来的计划是参考<a href="https://github.com/angular/components/tree/main/src/material/core/ripple">ripple</a>的代码设计，将来可以好好的重构这个项目。<a href="https://github.com/damingerdai/hoteler-web">hoteler-web</a>是我一直会维护的angular的项目。</p><p>今天在<a href="https://domains.google/">google domains</a>买了个域名，然后尝试使用k3s的ingress部署了[<a href="https://hoteler.damingerdai.com/]%E3%80%82%E6%84%9F%E8%A7%89%E4%BD%BF%E7%94%A8k3s%E9%83%A8%E7%BD%B2%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E5%BA%94%E7%94%A8%E5%9F%BA%E6%9C%AC%E4%B8%8A%E9%97%AE%E9%A2%98%E4%B8%8D%E5%A4%A7%E4%BA%86%E3%80%82[hoteler](https://github.com/damingerdai/hoteler)%E5%B7%B2%E7%BB%8F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E7%A8%B3%E5%AE%9A%E7%9A%84demo%EF%BC%8C%E5%A4%A7%E6%A6%82%E7%8E%87%E6%98%AF%E4%B8%8D%E4%BC%9A%E8%BF%9B%E8%A1%8C%E5%A4%A7%E8%A7%84%E6%A8%A1%E7%9A%84%E9%87%8D%E6%9E%84%E4%BA%86%E3%80%82%E6%89%80%E4%BB%A5%E7%9B%AE%E5%89%8D%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E6%83%B3%E6%B3%95%E9%82%A3%E5%B0%B1%E6%98%AF%E4%BD%BF%E7%94%A8spring">https://hoteler.damingerdai.com/]。感觉使用k3s部署一些简单的应用基本上问题不大了。[hoteler](https://github.com/damingerdai/hoteler)已经是一个很稳定的demo，大概率是不会进行大规模的重构了。所以目前只有一个很简单的想法那就是使用spring</a> cloud进行重写，这个是不太能自己部署到线上环境了，毕竟服务器资源就那么点，跑不起那么多的资源。</p><p>针对golang的话，我目前私下的在做一个关于健康的demo，目前还在开发中，前端使用react，后端使用golang。目前希望在技术上的突破是使用loki做日志管理，Jaeger用于链路追踪，这是1.0的计划。2.0的话（如果有时间的话），希望可以加入区块链的一些元素，至少能做成个·web2.5·。</p><p>今年其实还是探索了很多的技术。比如<a href="https://min.io/">minio</a>, <a href="https://goharbor.io/">harbor</a>, <a href="https://www.drone.io/">drone</a>, <a href="https://gogs.io/">gogs</a>和<a href="https://gitea.io/zh-cn">gitea</a>。</p><h2 id="个人生活"><a href="#个人生活" class="headerlink" title="个人生活"></a>个人生活</h2><p>今天对我最大的事儿就是结婚了，没有比举办婚礼更重要的事儿了。本来由于收到上半年疫情的影响，原来不指望今年结婚的。本来定的日子是明年的正月办酒席，但是丈母娘觉得今年的夏天那么热，冬天一定很会冷，希望我们今年就是把事儿办了。所以婚期提前到11月份举行，本来日子选的好好的，也没啥好纠结的，毕竟妹子是自己谈的。但是明天和意外你永远都不知道哪个先来，我老丈人在婚礼的前两天去世了。在婚礼前的几个礼拜，我老丈人生病了，是便秘导致的肠梗阻。在医院治疗了一段时间本来已经治好了，但是不知道是医院的水平问题还是我老丈人本身的问题，在治疗过程中可能没有控制好糖尿病导致肺部感染， 在icu躺了几天之后终究将抢救无效去世，年仅50岁。在殡仪馆里，我看到同批火化的人中就属我老丈人最年轻。有的时间真的感觉世事无常，国庆节回去的时候，老丈人还好好的，结果才过去一个月不到，人就没了。</p><h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p>对2023年这个经济判断是真的不太好说，谁也不知道明年会怎么想，我也不敢瞎说，我只能我大概率会重点关注·DeFi·。然后希望能够保住就业，保住现金流。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一次迁移Apollo Server V3的过程</title>
      <link href="/2021/12/15/front-end/log-migrate-apollo-server-v3/"/>
      <url>/2021/12/15/front-end/log-migrate-apollo-server-v3/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次迁移Apollo-Server-V3的过程"><a href="#记录一次迁移Apollo-Server-V3的过程" class="headerlink" title="记录一次迁移Apollo Server V3的过程"></a>记录一次迁移Apollo Server V3的过程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.apollographql.com/docs/apollo-server/">Apollo Server V3</a>出来也快半年了，是时候把<a href="https://github.com/damingerdai/express-postgres-ts-starter">express-postgres-ts-starter</a>的graphql部分升级了。</p><h2 id="使用dependabot帮助更新版本"><a href="#使用dependabot帮助更新版本" class="headerlink" title="使用dependabot帮助更新版本"></a>使用dependabot帮助更新版本</h2><p><a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/about-dependabot-version-updates">dependabot</a>是一个github的工具(似乎也支持gitlab,但是我不确定)，用于检测repo依赖安全性，同时也可以帮助我定期更新repo的依赖版本。</p><p>这是我的dependabot的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: 2</span><br><span class="line">updates:</span><br><span class="line"> - package-ecosystem: npm</span><br><span class="line">   directory: &#x27;/&#x27;</span><br><span class="line">   schedule:</span><br><span class="line">    interval: weekly</span><br><span class="line">   open-pull-requests-limit: 10</span><br></pre></td></tr></table></figure><h2 id="升级Apollo-Servier所需要依赖"><a href="#升级Apollo-Servier所需要依赖" class="headerlink" title="升级Apollo Servier所需要依赖"></a>升级Apollo Servier所需要依赖</h2><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p><code>Apollo Servier 3</code>仅仅支持nodejsv12以上版本(<code>Apollo Servier 2</code>则只需要nodejsv6以上的支持)。 因此需要升级到nodejs12，推荐使用node14和node16。</p><blockquote><p>我十分推荐使用Linux&#x2F;MAC用户使用<a href="https://github.com/nvm-sh/nvm">nvm</a>,Windows用户使用<a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a>安装、升级node版本。</p></blockquote><h3 id="graphql"><a href="#graphql" class="headerlink" title="graphql"></a>graphql</h3><p><code>Apollo Servier</code>有一个可选依赖<a href="https://www.npmjs.com/package/graphql">graphql</a>(GraphQL JS的核心实现),<code>Apollo Servier 3</code>需要<code>graphql</code> v15.3.0以上的支持。</p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="GraphQL-Playground"><a href="#GraphQL-Playground" class="headerlink" title="GraphQL Playground"></a>GraphQL Playground</h3><p><code>Apollo Server 2</code>是默认支持<a href="https://github.com/graphql/graphql-playground">GraphQL Playground</a>，我们只需要在构造函数里配置好<em>playground</em>这个字段就好了，但是<code>Apollo Server 3</code>删除了对GraphQL Playgroun的默认支持，转而推荐在非生产环境中使用<a href="https://www.apollographql.com/blog/announcement/platform/apollo-sandbox-an-open-graphql-ide-for-local-development/">Apollo Sandbox</a>。</p><p>不过我们还是可以重新配置<code>GraphQL Playground</code>的。</p><p>如果之前是使用<code>new ApolloServer(&#123;playground: boolean&#125;)</code>的类似方式配置<code>GraphQL Playground</code>，那么可以</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApolloServerPluginLandingPageGraphQLPlayground</span>,</span><br><span class="line">         <span class="title class_">ApolloServerPluginLandingPageDisabled</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-server-core&#x27;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ApolloServer</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">      ? <span class="title class_">ApolloServerPluginLandingPageDisabled</span>()</span><br><span class="line">      : <span class="title class_">ApolloServerPluginLandingPageGraphQLPlayground</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果之前是使用<code>new ApolloServer(&#123;playground: playgroundOptions&#125;)</code>的类似方式配置<code>GraphQL Playground</code>，那么可以使用:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApolloServerPluginLandingPageGraphQLPlayground</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-server-core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> playgroundOptions = &#123;</span><br><span class="line">    <span class="comment">// 仅做参考</span></span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;editor.theme&#x27;</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;editor.cursorShape&#x27;</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ApolloServer</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">ApolloServerPluginLandingPageGraphQLPlayground</span>(playgroundOptions),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tracing"><a href="#tracing" class="headerlink" title="tracing"></a>tracing</h3><p>在<code>Apollo Server 2</code>中，构造函数的参数提供<em>tracing</em>布尔字段，用于开启基于(apollo-tracing)[<a href="https://www.npmjs.com/package/apollo-tracing]%E8%B7%9F%E8%B8%AA%E6%9C%BA%E5%88%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E5%BE%88%E9%81%97%E6%86%BE%EF%BC%8C%E5%9C%A8%60Apollo">https://www.npmjs.com/package/apollo-tracing]跟踪机制，但是很遗憾，在`Apollo</a> Server 3<code>中，*tracing*已经被删除了，，，</code>apollo-tracing&#96;也已经被废弃了，如果一定要使用，可以：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ApolloServer</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;apollo-tracing&#x27;</span>).<span class="title function_">plugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>不过值得注意的是，该解决方案没有经过严格测试，可能存在bug。</p></blockquote><h3 id="You-must-await-server-start-before-calling-server-applyMiddleware"><a href="#You-must-await-server-start-before-calling-server-applyMiddleware" class="headerlink" title="You must await server.start() before calling server.applyMiddleware()"></a>You must <code>await server.start()</code> before calling <code>server.applyMiddleware()</code></h3><p>在<code>Apollo Server v2.22</code>中提供了_server.start()_的方法，其目的是为了方便集成非serverless的框架(Express、Fastify、Hapi、Koa、Micro 和 Cloudflare)。因此这些框架的使用者使用在创建<code>ApolloServer</code>对象之后立刻启动graphql服务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">ApolloServer</span>(&#123;...&#125;);</span><br><span class="line"><span class="keyword">await</span> server.<span class="title function_">start</span>();</span><br><span class="line">server.<span class="title function_">applyMiddleware</span>(&#123; app &#125;);</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>现在可以在浏览器打开<code>GraphQL Playground</code>, 以<a href="https://github.com/damingerdai/express-postgres-ts-starter">express-postgres-ts-starter</a>为例，使用<code>http://127.0.0.1:3000/graphql</code>就可以看到效果了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> apollo </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从springfox迁移到springdoc</title>
      <link href="/2021/11/29/back-end/migrate-springdoc-from-springfox/"/>
      <url>/2021/11/29/back-end/migrate-springdoc-from-springfox/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之所以考虑从springfox迁移到springdoc是因为我的开源项目<a href="https://github.com/damingerdai/hoteler">hoteler</a>在升级到spring boot 2.6之后，UT的<a href="https://github.com/damingerdai/hoteler/runs/4272646614?check_suite_focus=true">CI&#x2F;CD</a>挂了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HotelerApplicationTests &gt; contextLoads() FAILED</span><br><span class="line">    java.lang.IllegalStateException at DefaultCacheAwareContextLoaderDelegate.java:<span class="number">132</span></span><br><span class="line">        Caused by: org.springframework.context.ApplicationContextException at DefaultLifecycleProcessor.java:<span class="number">181</span></span><br><span class="line">            Caused by: java.lang.NullPointerException at WebMvcPatternsRequestConditionWrapper.java:<span class="number">56</span></span><br><span class="line"></span><br><span class="line">ErrorPropTest &gt; setErrors() FAILED</span><br><span class="line">    java.lang.IllegalStateException at DefaultCacheAwareContextLoaderDelegate.java:<span class="number">132</span></span><br><span class="line">        Caused by: org.springframework.context.ApplicationContextException at DefaultLifecycleProcessor.java:<span class="number">181</span></span><br><span class="line">            Caused by: java.lang.NullPointerException at WebMvcPatternsRequestConditionWrapper.java:<span class="number">56</span></span><br><span class="line"></span><br><span class="line">... more</span><br></pre></td></tr></table></figure><p>在一番定位和谷歌之后，在<a href="https://github.com/springfox/springfox/issues/3462">Spring 5.3&#x2F;Spring Boot 2.4 support</a>和<a href="https://github.com/lWoHvYe/eladmin/commit/b879685a4962cb19062adeb0433c73a91c67e978">spring boot升级2.6.0。启动报错 原因详见：springfox&#x2F;springfox#3462</a>中的提示下，猜测是<a href="https://github.com/springfox/springfox">springfox</a>未升级导致的不兼容导致的问题。本来计划等待springfox官方自行升级，结果一看github的提价记录，springfox从2020年10月14号之后就在也没有更新代码了，因此决定，<a href="https://github.com/damingerdai/hoteler/issues/140">从springfox迁移到springdoc</a>。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果仍然想在spring 2.6之后使用springfox，建议在配置文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br></pre></td></tr></table></figure><p>更多信息可以参考<a href="https://github.com/lWoHvYe/eladmin/blob/main/document/springboot/SpringBoot-2.6.0.md">https://github.com/lWoHvYe/eladmin</a>。</p><h1 id="删除springfox依赖和相关代码"><a href="#删除springfox依赖和相关代码" class="headerlink" title="删除springfox依赖和相关代码"></a>删除springfox依赖和相关代码</h1><p>首先删除springfox的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># gradle</span><br><span class="line">io.springfox:springfox-boot-starter:3.0.0`</span><br><span class="line"></span><br><span class="line"># maven</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>删除Controller下的swagger的注解，</p><p>删除自定的swagger的配置类，</p><p>删除<code>@EnableOpenApi</code></p><h1 id="导入springdoc依赖"><a href="#导入springdoc依赖" class="headerlink" title="导入springdoc依赖"></a>导入springdoc依赖</h1><p>对于gradle用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.springdoc:springdoc-openapi-ui:1.5.12&#x27;</span><br></pre></td></tr></table></figure><p>对于maven用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="OpenApi配置"><a href="#OpenApi配置" class="headerlink" title="OpenApi配置"></a>OpenApi配置</h1><p>创建OpenApi配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义License：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> License <span class="title function_">license</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">License</span>()</span><br><span class="line">              .name(<span class="string">&quot;MIT&quot;</span>)</span><br><span class="line">              .url(<span class="string">&quot;https://opensource.org/licenses/MIT&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注： 这里我采用MIT的开源协议，更多协议，请访问<a href="https://opensource.org/licenses">https://opensource.org/licenses</a>。</p></blockquote><p>定义Open Api的基本信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Info <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">              .title(<span class="string">&quot;Hoteler Open API&quot;</span>)</span><br><span class="line">              .description(<span class="string">&quot;大明二代&quot;</span>)</span><br><span class="line">              .version(<span class="string">&quot;v0.0.1&quot;</span>)</span><br><span class="line">              .license(license());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义外部文档信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExternalDocumentation <span class="title function_">externalDocumentation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">            .description(<span class="string">&quot;大明二代的Hoteler&quot;</span>)</span><br><span class="line">            .url(<span class="string">&quot;https://github.com/damingerdai/hoteler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义OpenAPI的spring bean：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public OpenAPI springShopOpenAPI() &#123;</span><br><span class="line">    return new OpenAPI()</span><br><span class="line">            .info(info())</span><br><span class="line">            .externalDocs(externalDocumentation());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中定义openapi的扫描策略:</p><ol><li>基于指定接口包扫描</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">springdoc:</span><br><span class="line">  packagesToScan: org.daming.hoteler.api.web (这是我自己的web包)</span><br></pre></td></tr></table></figure><ol start="2"><li>基于接口路由扫描</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">springdoc:</span><br><span class="line">  pathsToMatch: /api/**, /dev/**</span><br></pre></td></tr></table></figure><p>在controler添加@Tag注解<br>在controler方法上添加@Operation注解<br>在 @Operation 注解上添加@Parameters 和 @Parameter 说明，用于springdoc解析controler方法的参数<br>在的请求体类添加@Schema注解</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">package org.daming.hoteler.api.web;</span><br><span class="line"></span><br><span class="line">import io.swagger.v3.oas.annotations.Operation;</span><br><span class="line">import io.swagger.v3.oas.annotations.Parameter;</span><br><span class="line">import io.swagger.v3.oas.annotations.enums.ParameterIn;</span><br><span class="line">import io.swagger.v3.oas.annotations.security.SecurityRequirement;</span><br><span class="line">import io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line">...more</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * customer constoller</span><br><span class="line"> *</span><br><span class="line"> * @author gming001</span><br><span class="line"> * @create 2020-12-25 22:13</span><br><span class="line"> **/</span><br><span class="line">@Tag(name = &quot;客户&quot;, description = &quot;客户 API&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;api/v1&quot;)</span><br><span class="line">public class CustomerController &#123;</span><br><span class="line"></span><br><span class="line">    private ICustomerService customerService;</span><br><span class="line"></span><br><span class="line">    private IErrorService errorService;</span><br><span class="line"></span><br><span class="line">    @Operation(</span><br><span class="line">            summary = &quot;创建客户信息&quot;&#125;,</span><br><span class="line">            parameters = &#123;</span><br><span class="line">                    @Parameter(name = &quot;body&quot;, description = &quot;创建用户信息的请求体&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    @PostMapping(&quot;customer&quot;)</span><br><span class="line">    public CommonResponse create(@RequestBody CreateCustomerRequest request) &#123;</span><br><span class="line">        var customer = new Customer().setName(request.getName()).setGender(request.getGender()).setCardId(request.getCardId()).setPhone(request.getPhone());</span><br><span class="line">        var id =  this.customerService.create(customer);</span><br><span class="line">        return new DataResponse&lt;&gt;(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Operation(summary = &quot;更新客户信息&quot;)</span><br><span class="line">    @PutMapping(&quot;customer&quot;)</span><br><span class="line">    public CommonResponse update(@RequestBody UpdateCustomerRequest request) &#123;</span><br><span class="line">        var customer = new Customer().setId(request.getId()).setName(request.getName()).setGender(request.getGender()).setCardId(request.getCardId()).setPhone(request.getPhone());</span><br><span class="line">        this.customerService.update(customer);</span><br><span class="line">        return new CommonResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Operation(summary = &quot;获取所有的客户信息&quot;)</span><br><span class="line">    @GetMapping(&quot;customers&quot;)</span><br><span class="line">    public CommonResponse list() &#123;</span><br><span class="line">        var list = this.customerService.list();</span><br><span class="line">        return new ListResponse&lt;&gt;(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Operation(summary = &quot;删除客户信息&quot;)</span><br><span class="line">    @DeleteMapping(&quot;customer/&#123;id&#125;&quot;)</span><br><span class="line">    public CommonResponse delete(@PathVariable(&quot;id&quot;) String customerId) throws HotelerException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            var id = Long.valueOf(customerId);</span><br><span class="line">            this.customerService.delete(id);</span><br><span class="line">        &#125; catch (NumberFormatException nfe) &#123;</span><br><span class="line">            var params = new Object[] &#123; nfe.getMessage() &#125;;</span><br><span class="line">            throw errorService.createHotelerException(ErrorCodeConstants.BAD_REQUEST_ERROR_CODEE, params, nfe);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw errorService.createHotelerException(ErrorCodeConstants.SYSTEM_ERROR_CODEE, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return new CommonResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public CustomerController(</span><br><span class="line">            ICustomerService customerService,</span><br><span class="line">            IErrorService errorService) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.customerService = customerService;</span><br><span class="line">        this.errorService = errorService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * create customer request</span><br><span class="line"> *</span><br><span class="line"> * @author gming001</span><br><span class="line"> * @create 2020-12-25 22:15</span><br><span class="line"> **/</span><br><span class="line">@Schema(name = &quot;创建客户请求&quot;)</span><br><span class="line">public class CreateCustomerRequest implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = -7819607546063963266L;</span><br><span class="line"></span><br><span class="line">    @Schema(name = &quot;名字&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private Gender gender;</span><br><span class="line"></span><br><span class="line">    private String cardId;</span><br><span class="line"></span><br><span class="line">    private long phone：</span><br><span class="line"></span><br><span class="line">    ...more</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="添加对JWT对token的支持-本步骤可选"><a href="#添加对JWT对token的支持-本步骤可选" class="headerlink" title="添加对JWT对token的支持(本步骤可选)"></a>添加对JWT对token的支持(本步骤可选)</h1><p>在添加OpenApiConfig类上添加Components信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private Components components() &#123;</span><br><span class="line">    return new Components()</span><br><span class="line">            .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在OpenApi中注册Components:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  @Bean</span><br><span class="line">  public OpenAPI springShopOpenAPI() &#123;</span><br><span class="line">      return new OpenAPI()</span><br><span class="line">              .info(info())</span><br><span class="line">              .components(components())</span><br><span class="line">              .externalDocs(externalDocumentation());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用Authorization的接口上添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Operation(security = &#123; @SecurityRequirement(name = &quot;bearer-key&quot;) &#125;)</span><br></pre></td></tr></table></figure><h1 id="swagger-ui"><a href="#swagger-ui" class="headerlink" title="swagger-ui"></a>swagger-ui</h1><p>在浏览器中输入<a href="http://127.0.0.1:8443/swagger-ui.html">http://127.0.0.1:8443/swagger-ui.html</a>或者<a href="http://localhost:8443/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config">http://localhost:8443/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config</a></p><blockquote><p>注： 8443是我个人比较喜欢的web开发的端口占用，一般人使用8080比较多。</p></blockquote><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/images/migrate-springdoc-from-springfox/swagger-ui.webp" alt="swagger-ui"></p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p><a href="https://github.com/damingerdai/hoteler/pull/146">feat: 从springfox迁移到springdoc以及修复AuthenticationFilter过滤失败的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> springdoc </tag>
            
            <tag> swagger-ui </tag>
            
            <tag> oepn api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle配置阿里镜像</title>
      <link href="/2021/10/29/back-end/gradle-ali-mirror/"/>
      <url>/2021/10/29/back-end/gradle-ali-mirror/</url>
      
        <content type="html"><![CDATA[<h1 id="Gradle配置阿里镜像"><a href="#Gradle配置阿里镜像" class="headerlink" title="Gradle配置阿里镜像"></a>Gradle配置阿里镜像</h1><p>为了加快gradle的国内下载的速度，我们可以为gradle配置阿里仓库的镜像</p><p>请在gradle的安装目录下的<code>init.d</code>的文件夹下添加<code>init.gradle</code>:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">gradle.projectsLoaded &#123;</span><br><span class="line">    rootProject.allprojects &#123;</span><br><span class="line">        buildscript &#123;</span><br><span class="line">            repositories &#123;</span><br><span class="line">                <span class="keyword">def</span> JCENTER_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">                <span class="keyword">def</span> GOOGLE_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span></span><br><span class="line">                <span class="keyword">def</span> NEXUS_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/central&#x27;</span></span><br><span class="line">                all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                    <span class="keyword">if</span> (repo <span class="keyword">instanceof</span> MavenArtifactRepository) &#123;</span><br><span class="line">                        <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                        <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                            project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span></span><br><span class="line">                            println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span>)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://dl.google.com/dl/android/maven2/&#x27;</span>)) &#123;</span><br><span class="line">                            project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span></span><br><span class="line">                            println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span>)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                            project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span></span><br><span class="line">                            println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span>)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                jcenter &#123;</span><br><span class="line">                    url JCENTER_URL</span><br><span class="line">                &#125;</span><br><span class="line">                google &#123;</span><br><span class="line">                    url GOOGLE_URL</span><br><span class="line">                &#125;</span><br><span class="line">                maven &#123;</span><br><span class="line">                    url NEXUS_URL</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            <span class="keyword">def</span> JCENTER_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> GOOGLE_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> NEXUS_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/central&#x27;</span></span><br><span class="line">            all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                <span class="keyword">if</span> (repo <span class="keyword">instanceof</span> MavenArtifactRepository) &#123;</span><br><span class="line">                    <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                    <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                        project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span></span><br><span class="line">                        println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span>)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://dl.google.com/dl/android/maven2/&#x27;</span>)) &#123;</span><br><span class="line">                        project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span></span><br><span class="line">                        println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span>)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                        project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span></span><br><span class="line">                        println(<span class="string">&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span>)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            jcenter &#123;</span><br><span class="line">                url JCENTER_URL</span><br><span class="line">            &#125;</span><br><span class="line">            google &#123;</span><br><span class="line">                url GOOGLE_URL</span><br><span class="line">            &#125;</span><br><span class="line">            maven &#123;</span><br><span class="line">                url NEXUS_URL</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.zhihu.com/collection/276086251">如何构建 Spring 源码环境？</a></li><li><a href="https://developer.aliyun.com/mvn/guide">阿里云云效 Maven</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs项目的Dockerfile模版</title>
      <link href="/2021/10/20/front-end/node-docker-template/"/>
      <url>/2021/10/20/front-end/node-docker-template/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs项目的Dockerfile模版"><a href="#Nodejs项目的Dockerfile模版" class="headerlink" title="Nodejs项目的Dockerfile模版"></a>Nodejs项目的Dockerfile模版</h1><h2 id="基于Yarn"><a href="#基于Yarn" class="headerlink" title="基于Yarn"></a>基于Yarn</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">6</span>-alpine3.<span class="number">14</span> as build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消对https的证书限制</span></span><br><span class="line"><span class="comment"># ENV SELF_SIGNED_CERT_IN_CHAIN=true</span></span><br><span class="line"><span class="comment"># ENV NODE_TLS_REJECT_UNAUTHORIZED=0</span></span><br><span class="line"><span class="comment"># RUN npm config set strict-ssl false</span></span><br><span class="line"><span class="comment"># RUN yarn config set strict-ssl false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update &amp;&amp; apk add bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json yarn.lock .npmrc /tmp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /tmp &amp;&amp; yarn install --frozen-lockfile --non-interactive</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app &amp;&amp; <span class="built_in">cp</span> -a /tmp/node_modules /app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> build AS ci</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn run <span class="built_in">test</span>:ci &amp;&amp; yarn install --frozen-lockfile --non-interactive --production</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">6</span>-alpine3.<span class="number">14</span> as release</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">addgroup -S daminggroup &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">adduser -S -h /app -G daminggroup daminguser &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">chown</span> -R daminguser:daminggroup /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/dist ./dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/package.json .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=30s CMD curl -f http://localhost:3978/ping || <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3978</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;node dist/index.js&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="基于NPM"><a href="#基于NPM" class="headerlink" title="基于NPM"></a>基于NPM</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">6</span>-alpine3.<span class="number">14</span> as build</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwc network limit</span></span><br><span class="line"><span class="comment"># ENV SELF_SIGNED_CERT_IN_CHAIN=true</span></span><br><span class="line"><span class="comment"># ENV NODE_TLS_REJECT_UNAUTHORIZED=0</span></span><br><span class="line"><span class="comment"># RUN npm config set strict-ssl false</span></span><br><span class="line"><span class="comment"># RUN yarn config set strict-ssl false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update &amp;&amp; apk add bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json package-lock.json .npmrc /tmp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /tmp &amp;&amp; npm install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app &amp;&amp; <span class="built_in">cp</span> -a /tmp/node_modules /app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> build AS ci</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run <span class="built_in">test</span>:ci &amp;&amp; npm install --production --ignore-scripts <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">6</span>-alpine3.<span class="number">14</span> as release</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">addgroup -S daminggroup &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">adduser -S -h /app -G daminggroup daminguser &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">chown</span> -R daminguser:daminggroup /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/dist ./dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ci --<span class="built_in">chown</span>=daminguser:daminggroup /app/package.json .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=30s CMD curl -f http://localhost:3978/ping || <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3978</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;node dist/index.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Bazel编译TypeScript</title>
      <link href="/2021/08/22/front-end/build-typescript-with-bazel/"/>
      <url>/2021/08/22/front-end/build-typescript-with-bazel/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Bazel编译TypeScript"><a href="#使用Bazel编译TypeScript" class="headerlink" title="使用Bazel编译TypeScript"></a>使用Bazel编译TypeScript</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>请事先安装<a href="https://nodejs.org/dist/v14.17.3/">Nodejs</a>,<a href="https://classic.yarnpkg.com/en/docs/install">Yarn 1.x</a>和<a href="https://docs.bazel.build/versions/4.2.0/install.html">Bazel</a></p><p>我使用的版本为:</p><ol><li>Nodejs: v14.17.3</li><li>Yarn:    1.22.5</li><li>Bzel:    4.1.0</li></ol><h2 id="创建一个Typescript项目"><a href="#创建一个Typescript项目" class="headerlink" title="创建一个Typescript项目"></a>创建一个Typescript项目</h2><p>选择指定目录，创建一个名为<code>ts-bazel</code>(其他名字也可以)的文件夹，使用终端进入该文件夹，然后执行<code>npm init</code>，一路选择默认。</p><p>安装Typescipt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescipt -D</span><br></pre></td></tr></table></figure><p>创建Typescript配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>创建<code>src</code>文件夹，在该文件夹里新建<code>index.ts</code>文件，并写入一下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`helle <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;daming&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="配置Bazel"><a href="#配置Bazel" class="headerlink" title="配置Bazel"></a>配置Bazel</h2><p>安装bazel等相关依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @bazel/bazelisk @bazel/ibazel @bazel/typescript -D </span><br></pre></td></tr></table></figure><p>在根目录里创建<code>WORKSPACE</code>, 并写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">workspace(</span><br><span class="line">    name = &quot;ts-bazel&quot;,</span><br><span class="line">    managed_directories = &#123;&quot;@npm&quot;: [&quot;node_modules&quot;]&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)</span><br><span class="line"></span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;build_bazel_rules_nodejs&quot;,</span><br><span class="line">    sha256 = &quot;275744d287af4c3a78d7c9891f2d970b7bc7eca8cfc0e9a671fe6258d09ff217&quot;,</span><br><span class="line">    urls = [&quot;https://github.com/bazelbuild/rules_nodejs/releases/download/4.0.0-rc.1/rules_nodejs-4.0.0-rc.1.tar.gz&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load(&quot;@build_bazel_rules_nodejs//:index.bzl&quot;, &quot;check_rules_nodejs_version&quot;, &quot;node_repositories&quot;, &quot;yarn_install&quot;)</span><br><span class="line"></span><br><span class="line">check_rules_nodejs_version(minimum_version_string = &quot;2.2.0&quot;)</span><br><span class="line"></span><br><span class="line"># Setup the Node.js toolchain</span><br><span class="line">node_repositories(</span><br><span class="line">    node_version = &quot;14.17.3&quot;,</span><br><span class="line">    package_json = [&quot;//:package.json&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">yarn_install(</span><br><span class="line">    name = &quot;npm&quot;,</span><br><span class="line">    package_json = &quot;//:package.json&quot;,</span><br><span class="line">    yarn_lock = &quot;//:yarn.lock&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在根目录中创建<code>BUILD.bazel</code>文件，并写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package(default_visibility = [&quot;//visibility:public&quot;])</span><br><span class="line"></span><br><span class="line">exports_files([&quot;tsconfig.json&quot;])</span><br></pre></td></tr></table></figure><p>在<code>src</code>文件夹中创建<code>BUILD.bazel</code>文件，并写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package(default_visibility = [&quot;//visibility:public&quot;])</span><br><span class="line"></span><br><span class="line">load(&quot;@npm//@bazel/typescript:index.bzl&quot;, &quot;ts_project&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ts_project(</span><br><span class="line">  name = &quot;index&quot;,</span><br><span class="line">  srcs = [&quot;index.ts&quot;],</span><br><span class="line">  tsconfig = &quot;//:tsconfig.json&quot;,</span><br><span class="line">  visibility = [&quot;//visibility:public&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>现在可以使用<code>bazel</code>编译项目了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build //src:index</span><br></pre></td></tr></table></figure><p>检查一下结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node  bazel-bin/src/index.js</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helle daming</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bazel </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew安装笔记</title>
      <link href="/2021/07/31/software/install/how-to-install-homebrew/"/>
      <url>/2021/07/31/software/install/how-to-install-homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew安装笔记"><a href="#Homebrew安装笔记" class="headerlink" title="Homebrew安装笔记"></a>Homebrew安装笔记</h1><p>简单记录一下Homebrew安装</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>新建终端，以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p>替换 brew.git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><p>替换 homebrew-core.git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><p>Homebrew Bottles 配置镜像</p><p>以zsh为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="恢复默认官方源"><a href="#恢复默认官方源" class="headerlink" title="恢复默认官方源"></a>恢复默认官方源</h2><p>重置brew.git:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure><p>重置homebrew-core.git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><p>注释掉 zsh 配置文件里的有关 Homebrew Bottles 即可恢复官方源。 重启 zsh 或让 zsh 重读配置文件。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/137464385">教你一招搞定 Homebrew 下载加速</a><br><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew/">替换及重置 Homebrew 默认源</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> homebew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript中可选链</title>
      <link href="/2021/07/03/front-end/ts-optional-chaining/"/>
      <url>/2021/07/03/front-end/ts-optional-chaining/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript中可选链"><a href="#TypeScript中可选链" class="headerlink" title="TypeScript中可选链"></a>TypeScript中可选链</h1><h2 id="什么是可选链"><a href="#什么是可选链" class="headerlink" title="什么是可选链"></a>什么是可选链</h2><p>TypeScript 3.7中一个最引人关注的特性便是可选链(Optional Chaining)。</p><p>所谓可选链，就是当我们试图使用访问对象的字段或者方法时，如果对象为<code>null</code>或者<code>undefined</code>，TypeScript将会自动停止运行的代码，以防止空指针异常。</p><h2 id="可选链的使用"><a href="#可选链的使用" class="headerlink" title="可选链的使用"></a>可选链的使用</h2><p>首先定义一个接口 A, 有一个字段b，b可能是字符串，也可能是null:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span> | <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个变量a:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>?.</code>来访问字段:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a?.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><p>如果a为<code>null</code>或者<code>undefined</code>, 将输出<code>undefined</code></p><h2 id="TypeScript做了什么"><a href="#TypeScript做了什么" class="headerlink" title="TypeScript做了什么"></a>TypeScript做了什么</h2><p>可选链并不是ts的专利，在js就已经存在了，除了ie,其他现代浏览器最新版本都是支持了，但是一些老版本就不支持，因此ts没有使用js的语法，而是通过三元表达式<code>? :</code>转译。因此上面的代码将会转译成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === <span class="literal">null</span> || a === <span class="keyword">void</span> <span class="number">0</span> ? <span class="keyword">void</span> <span class="number">0</span> : a.<span class="property">b</span>);</span><br></pre></td></tr></table></figure><p>但是ts没有判断a是否是<code>undefined</code>, 而是因为在js中， <code>undefined</code>不仅是值，也可能是一个全局变量。直到es5之前，<code>undefined</code>是可以被修改的。我们可以通过下面的代码来修改:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>) <span class="comment">// 1</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://jkchao.github.io/typescript-book-chinese/new/typescript-3.7.html#%E5%8F%AF%E9%80%89%E9%93%BE%EF%BC%88optional-chaining%EF%BC%89">深入理解 TypeScript(可选链（Optional Chaining）)</a></li><li><a href="https://fodor.org/blog/js-undefined-null-void/">JS: The difference between “undefined”, “null” and “void 0”</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">可选链操作符</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows上构建angular项目(上)</title>
      <link href="/2021/05/17/front-end/build-angular-on-windows-02/"/>
      <url>/2021/05/17/front-end/build-angular-on-windows-02/</url>
      
        <content type="html"><![CDATA[<h1 id="在windows上构建angular项目-下"><a href="#在windows上构建angular项目-下" class="headerlink" title="在windows上构建angular项目 (下)"></a>在windows上构建angular项目 (下)</h1><p>当完成bazel的安装之后，我们还需要安装nodejs就可以开始编译angular了。</p><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><p>目前angular仅支持nodejs12和nodejs14这两个版本，推荐使用node14这个版本。</p><p>对于windows平台而言，nodejs可以直接从<a href="https://nodejs.org/en/">官网</a>选择windows平台的二进制包下载，然后进行点击安装就可以了，但是我个人更推荐使用<a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a>。</p><h3 id="nvm-windows"><a href="#nvm-windows" class="headerlink" title="nvm-windows"></a>nvm-windows</h3><p>nvm-windows是windows平台上常用的node版本管理工具，可以方便我们针对不同项目的要求切换不同的node版本。点击<a href="https://github.com/coreybutler/nvm/releases">该链接</a>，下载最新安装包，然后点击安装。</p><h4 id="使用国内镜像"><a href="#使用国内镜像" class="headerlink" title="使用国内镜像"></a>使用国内镜像</h4><p>由于国家特殊的网络政策，我们需要使用淘宝镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/ // 注意结尾有斜杠</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h4 id="安装nodejs14"><a href="#安装nodejs14" class="headerlink" title="安装nodejs14"></a>安装nodejs14</h4><p>目前node14的最新版是14.17.0，现在我们可以使用nvm来进行安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install v14.17.0</span><br><span class="line">nvm use v14.17.0</span><br></pre></td></tr></table></figure><p>现在我们可以验证一下node是否正确安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line"></span><br><span class="line">// 结果</span><br><span class="line">v14.17.0</span><br></pre></td></tr></table></figure><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><p><a href="https://classic.yarnpkg.com/lang/en/">Yarn</a>是Facebook开发的nodejs包管理工具，与早期npm相比，具有下载速度快，命令更加友好，提供本版本锁等优势。当然，虽然npm不断的更新迭代，yarn的优势也不再明显，但是angular开发团队更加推荐使用yarn。</p><p>在这里需要注意的是，<a href="https://classic.yarnpkg.com/lang/en/">Yarn1.x</a>和<a href="https://yarnpkg.com/">Yarn2.x</a>是两个不兼容的版本，而angular只支持yarnv1.22.4以上且不包括2的版本(即&gt;&#x3D;1.22.4 &lt;2)。因此在下载的时候请选择正确的版本。</p><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><p>当bazel、nodejs、yarn都安装完毕之后，我们终于可以在本地开始编译angular了。</p><h3 id="下载angular仓库"><a href="#下载angular仓库" class="headerlink" title="下载angular仓库"></a>下载angular仓库</h3><p>在终端执行clone命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=16 https://github.com/angular/angular.git</span><br></pre></td></tr></table></figure><blockquote><p><code>--depth=16</code>表示仅仅git只会拉去最新16个commit。</p></blockquote><h3 id="安装angular依赖"><a href="#安装angular依赖" class="headerlink" title="安装angular依赖"></a>安装angular依赖</h3><p>在安装依赖之前，我们需要先删除<code>sauce-connect</code>依赖，因为该依赖不支持windows，且也不影响我们的编译。</p><p>在终端执行yarn命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><h3 id="编译angular"><a href="#编译angular" class="headerlink" title="编译angular"></a>编译angular</h3><p>在终端执行编译脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node scripts/build/build-packages-dist.js</span><br></pre></td></tr></table></figure><p>该命令将会先后编译angular,angular-in-memory-web-api和zone.js三大模块。</p><blockquote><p>如果编译过程中发生错误，可以在重新执行编译脚本之前，执行clean命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel clean</span><br></pre></td></tr></table></figure></blockquote><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>当上面的命令正确执行完成之后，检查一下dist目录下的编译后的angular代码了：</p><ol><li><code>dist\angular-in-memory-web-api-dist\angular-in-memory-web-api</code>目录下是<a href="https://www.npmjs.com/package/angular-in-memory-web-api">angular-in-memory-web-api</a>；</li><li><code>dist\packages-dist</code>目录下便是angular各个模块的代码了；</li><li><code>dist\zone.js-dist</code>目录下的是<a href="https://www.npmjs.com/package/zone.js">zone.js</a>。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，windows上编译angular就算是完成了。angular使用bazel作为编译工具，确实导致编译的成本高了很多，尤其是在windows平台，但是不停探索的过程，是一个不断学习的过程。这个过程，不挣钱，就是交个朋友。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bazel </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows上构建angular项目(上)</title>
      <link href="/2021/05/13/front-end/build-angular-on-windows-01/"/>
      <url>/2021/05/13/front-end/build-angular-on-windows-01/</url>
      
        <content type="html"><![CDATA[<h1 id="在windows上构建angular项目-上"><a href="#在windows上构建angular项目-上" class="headerlink" title="在windows上构建angular项目 (上)"></a>在windows上构建angular项目 (上)</h1><p>前端三大框架( <a href="https://angular.io/">angular</a>, <a href="https://reactjs.org/">reac</a>, <a href="https://vuejs.org/">vue</a> )中，angular一直都是一个很独特的存在。首先，angular的概念很多，服务、依赖注入、模块，指令等，都是在前端圈不是很常用的，此外，angular使用了<a href="https://www.bazel.build/">bazel</a>作为构建工具，而react和vue都是使用了<a href="https://rollupjs.org/guide/en/">rollup</a>，因此在本地编译构建angular将会远远超过react和vue，如果你是用的windows平台，那么一个个坑需要自己慢慢来填。。。</p><h1 id="Bazel是什么？"><a href="#Bazel是什么？" class="headerlink" title="Bazel是什么？"></a>Bazel是什么？</h1><p>根据官网的定义，Bazel是类似于Make，Maven和Gradle的开源构建和测试工具。它使用人类可读的高级构建语言<a href="https://github.com/bazelbuild/starlark">Starlark</a>(一种基于python的方言)。 Bazel支持多种语言的项目，并为多种平台构建输出。 </p><p>从我个人角度来看，bazel是一个强大且复杂的构建系统，通过<code>build rule</code>的概念，支持多种语言、不同平台，支持构建C&#x2F;C++,Java,Android,IOS,Golang,Nodejs,Docker项目</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Bazel官方支持Windows，macOS, Ubuntu Linux三大平台，这也是开发人员比较常用的本地开发平台。</p><p>在社区的支持下，bazel还支持其他平台，具体信息可以看一下<a href="https://docs.bazel.build/versions/4.0.0/install.html">官网</a>。这里我仅仅介绍如何在windows上安装。</p><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>在安装前，请确保你windows系统符合要求：</p><ol><li>推荐使用64位的windows10，版本号不能低于1703</li><li>64位的Windows 7以上</li><li>64位的Windows Server 2008 R2以上</li></ol><p>此外，请事先安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">Visual C++ Redistributable for Visual Studio 2015</a></p><h3 id="下载安装Bazel"><a href="#下载安装Bazel" class="headerlink" title="下载安装Bazel"></a>下载安装Bazel</h3><p>我们需要在<a href="https://github.com/bazelbuild/bazel/releases">github</a>选择下载<code>bazel-&lt;version&gt;-windows-x86_64.exe</code>，然后将该文件路径放在path环境变量中。</p><p>在终端中执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bazel version</span><br></pre></td></tr></table></figure><p>显示类似效果就是可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Build label: 4.0.0</span><br><span class="line">Build target: bazel-out/x64_windows-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar</span><br><span class="line">Build time: Thu Jan 21 07:39:16 2021 (1611214756)</span><br><span class="line">Build timestamp: 1611214756</span><br><span class="line">Build timestamp as int: 1611214756</span><br></pre></td></tr></table></figure><h2 id="安装编译和语言运行时"><a href="#安装编译和语言运行时" class="headerlink" title="安装编译和语言运行时"></a>安装编译和语言运行时</h2><p>根据不同语言的编译需要，我们可能需要以下的工具：</p><ol><li><a href="https://www.msys2.org/">MSYS2 x86_64</a></li><li><a href="https://aka.ms/buildtools">Build Tools for Visual Studio 2019</a></li><li><a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html">Java SE Development Kit 11 (JDK) for Windows x64</a></li><li><a href="https://www.python.org/downloads/windows/">Python 3.6 for Windows x86-64</a></li></ol><p>如果你想在window平台编译构建angular，后三者必须的，JDK16和Python 3.9.5也能满足自己的需求。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当完成以上步骤的时候，我们基本上就可以开始尝试在windows本地进行编译angular。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bazel </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular和React构建体积简单对比</title>
      <link href="/2021/02/03/front-end/simple-comparison-of-angular-and-react-build-size/"/>
      <url>/2021/02/03/front-end/simple-comparison-of-angular-and-react-build-size/</url>
      
        <content type="html"><![CDATA[<h1 id="Angular和React构建体积简单对比"><a href="#Angular和React构建体积简单对比" class="headerlink" title="Angular和React构建体积简单对比"></a>Angular和React构建体积简单对比</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://angular.io/">Angular</a>是我主要使用的前端框架， 和<a href="https://reactjs.org/">React</a>是我最近正在学习的前端框架。今天我想对比一下在各自默认的情况下，两者打包体积的对比。</p><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>我们使用<a href="https://www.npmjs.com/package/@angular/cli/v/11.1.2">Angular CLI: 11.1.2</a>简单创建一个angular项目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ng new daming-angular-app</span><br><span class="line"></span><br><span class="line"># ? Do you want to enforce stricter type checking and stricter bundle budgets in the workspace? Y</span><br><span class="line"># ? Would you like to add Angular routing? Y</span><br><span class="line"># ? Which stylesheet format would you like to use? CSS</span><br></pre></td></tr></table></figure><p>然后终端会提示我们输入一些必要的参数。对于Y或N的选择，我们统一选择Y，对拥有多个选择项的，我们统一选择第一个值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ? Do you want to enforce stricter type checking and stricter bundle budgets in the workspace? Y</span><br><span class="line"># ? Would you like to add Angular routing? Y</span><br><span class="line"># ? Which stylesheet format would you like to use? CSS</span><br></pre></td></tr></table></figure><p>这样子我们就创建好了一个angular项目。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在angular.json文件里，我们对<em>outputHashing</em>值从<code>all</code>改成<code>none</code>，目的在打包的时候生成js和css文件不是加上hash值，方便统计。</p><p>在终端执行构建脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>终端输出打包结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Initial Chunk Files | Names         |      Size</span><br><span class="line">main.js             | main          | 212.27 kB</span><br><span class="line">polyfills.js        | polyfills     |  35.73 kB</span><br><span class="line">runtime.js          | runtime       |   1.45 kB</span><br><span class="line">styles.css          | styles        |   0 bytes</span><br><span class="line"></span><br><span class="line">                    | Initial Total | 249.45 kB</span><br></pre></td></tr></table></figure><p>通过Finder查看js和css文件的大小发现:</p><ol><li>main.js大小为217kB;</li><li>polyfills.js大小为37kB;</li><li>runtime.js为1kB;</li><li>styles.css为0b。</li></ol><p>因此从finder角度来说，打包的总体积为255kB。</p><p>此外，我们使用<a href="https://www.npmjs.com/package/gzip-size-cli">gzip-size-cli</a>获取gzip的大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx gzip-size-cli main.js       // 输出 64.0kB</span><br><span class="line">npx gzip-size-cli polyfills.js  // 输出 12.4kB</span><br><span class="line">npx gzip-size-cli runtime.js    // 输出 719B</span><br><span class="line">npx gzip-size-cli styles.css    // 输出 20B</span><br></pre></td></tr></table></figure><p>通过gzip压缩之后，打包的总体积为77.14kB.</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p>我们使用<a href="https://create-react-app.dev/">Create React App</a>创建一个react项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app daming-react-app</span><br></pre></td></tr></table></figure><p>与angular不同，创建react项目的时候终端不会提示我们输入必要的参数。</p><h3 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h3><p>在终端执行构建脚本:</p><p>如果你使用npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build </span><br></pre></td></tr></table></figure><p>如果你使用yarn</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build </span><br></pre></td></tr></table></figure><h3 id="统计-1"><a href="#统计-1" class="headerlink" title="统计"></a>统计</h3><p>终端输出打包结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File sizes after gzip:</span><br><span class="line"></span><br><span class="line">  41.21 KB  build/static/js/2.6a046b6b.chunk.js</span><br><span class="line">  1.4 KB    build/static/js/3.743bc3fe.chunk.js</span><br><span class="line">  1.17 KB   build/static/js/runtime-main.073f5272.js</span><br><span class="line">  597 B     build/static/js/main.2c9755c1.chunk.js</span><br><span class="line">  531 B     build/static/css/main.8c8b27cf.chunk.css</span><br></pre></td></tr></table></figure><p>经过统计， gzip总体积为44.91kB。</p><p>通过Finder查看js和css文件的大小发现:</p><ol><li>main.2c9755c1.chunk.js大小为1kB;</li><li>runtime-main.073f5272.js大小为2kB;</li><li>2.6a046b6b.chunk.js大小为131kB;</li><li>3.743bc3fe.chunk.js大小为4kB;</li><li>main.8c8b27cf.chunk大小为804B。</li></ol><p>由此可知，从finder角度来说，打包的总体积为138.80kB。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面简单的对比，在各自默认的创建、构建方式下，react在打包体积大小方面比angular更具优势。但是在实际开发中，我们都会使用大量的第三方的依赖，实际项目的打包体积大小还是需要因人而异的。</p><p>源代码已经上传到<a href="https://github.com/damingerdai/imple-comparison-of-angular-and-react-build-size-code">github</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop自带k8s安装笔记</title>
      <link href="/2021/01/14/software/k8s/how-to-install-docker-desktop-k8s/"/>
      <url>/2021/01/14/software/k8s/how-to-install-docker-desktop-k8s/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Desktop自带k8s安装笔记"><a href="#Docker-Desktop自带k8s安装笔记" class="headerlink" title="Docker Desktop自带k8s安装笔记"></a>Docker Desktop自带k8s安装笔记</h1><p>安装一个k8s还是一个比较复杂的事情，但是Docker Desktop已经自带了一个简易版的k8s，可以基本满足正常的学习使用</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>对于Mac用户，请点击<a href="https://desktop.docker.com/mac/stable/Docker.dmg">Docker Desktop</a><br>对于Windows10用户，请点击<a href="https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe">Docker Desktop</a></p><h3 id="配置docker的国内镜像"><a href="#配置docker的国内镜像" class="headerlink" title="配置docker的国内镜像"></a>配置docker的国内镜像</h3><p>国内的网络下载可能比较慢，建议使用下面的镜像</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://dockerproxy.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://uyah70su.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://dockerhub.mirrors.nwafu.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://7bafc985f90c43b887a96c2b846cf984.mirror.swr.myhuaweicloud.com&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="安装k8s所需的镜像"><a href="#安装k8s所需的镜像" class="headerlink" title="安装k8s所需的镜像"></a>安装k8s所需的镜像</h2><p>为了更快的完成一些安装，我们先通过一个阿里云的批处理，提前把Kubernetes需要的Images拉取下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AliyunContainerService/k8s-for-docker-desktop.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> k8s-for-docker-desktop</span><br><span class="line"></span><br><span class="line">.\load_images.ps1 or load_images.sh</span><br></pre></td></tr></table></figure><h2 id="启动Kubernetes"><a href="#启动Kubernetes" class="headerlink" title="启动Kubernetes"></a>启动Kubernetes</h2><p>在Docker仪表盘上在Settings切到Kubernetes上启动Enabled Kubernetes</p><h2 id="安装Dashboard（可选）"><a href="#安装Dashboard（可选）" class="headerlink" title="安装Dashboard（可选）"></a>安装Dashboard（可选）</h2><p>使用<a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml">recommended.yaml</a>进行安装</p><blockquote><p>如果不能访问<em>recommended.yaml</em>， 可以使用<a href="#%E9%99%84%E5%BD%95">附录</a>的副本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f recommended.yaml </span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>前台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl proxy</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup kubectl proxy &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure><p>现在可以访问： <a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录需要获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret default| awk &#x27;$1==&quot;token:&quot;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这是我的返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Imk0TWpNeGM3SWVrMHllMVphM0FPVFZIZ2RIaXZIbll2UzZObkJSZTZ5MUEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLXR2bWJ0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiZDI3YzljZS0wZWY2LTQ0YTAtYThmNC0xYTg2ZWMxN2JmNTQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.UjlNOPi95jsxtbGXVu6t3LK-1kOjlcLk7_qVPhDEmYD9so5BLnosS6Z_nBfpO2aU5xxMZMMvkTIydMKVTgftzeFpUZ7_ANsqjZ17Z2EnzUxhzkBU9USU3294APU4Gxep1yb4uyetRtIozdsd39-TlMwoCkHb4aGbluZiT64AkbDS6v7PhONaaCIKTT6hxvo4PEiyau_fEKCfI6rsWdcoOWlKLeXOwqGW1tHgIZEPR7Eln8NA52fAOvHyPp5DSKgD3L2qGDAlQNXCFCrB2bc7-xBEEBjeDXOhTIl1sUX6gmhEzp0XFH20JZaSJysvW1ZQGsv_AXj-4PX8Egv1kq1txA</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/kubernetes/dashboard#getting-started">Kubernetes Dashboard</a></li><li><a href="https://gist.github.com/qwfys/aec4d2ab79281aeafebdb40b22d0b748">常用镜像仓库</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>recommended.yaml的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2017 The Kubernetes Authors.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-csrf</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  csrf: &quot;&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-key-holder</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-settings</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">rules:</span><br><span class="line">  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;secrets&quot;]</span><br><span class="line">    resourceNames: [&quot;kubernetes-dashboard-key-holder&quot;, &quot;kubernetes-dashboard-certs&quot;, &quot;kubernetes-dashboard-csrf&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;update&quot;, &quot;delete&quot;]</span><br><span class="line">    # Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;configmaps&quot;]</span><br><span class="line">    resourceNames: [&quot;kubernetes-dashboard-settings&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;update&quot;]</span><br><span class="line">    # Allow Dashboard to get metrics.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;services&quot;]</span><br><span class="line">    resourceNames: [&quot;heapster&quot;, &quot;dashboard-metrics-scraper&quot;]</span><br><span class="line">    verbs: [&quot;proxy&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;services/proxy&quot;]</span><br><span class="line">    resourceNames: [&quot;heapster&quot;, &quot;http:heapster:&quot;, &quot;https:heapster:&quot;, &quot;dashboard-metrics-scraper&quot;, &quot;http:dashboard-metrics-scraper&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">rules:</span><br><span class="line">  # Allow Metrics Scraper to get metrics from the Metrics server</span><br><span class="line">  - apiGroups: [&quot;metrics.k8s.io&quot;]</span><br><span class="line">    resources: [&quot;pods&quot;, &quot;nodes&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kubernetes-dashboard</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kubernetes-dashboard</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: kubernetes-dashboard</span><br><span class="line">          image: kubernetesui/dashboard:v2.0.3</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8443</span><br><span class="line">              protocol: TCP</span><br><span class="line">          args:</span><br><span class="line">            - --auto-generate-certificates</span><br><span class="line">            - --namespace=kubernetes-dashboard</span><br><span class="line">            # Uncomment the following line to manually specify Kubernetes API server Host</span><br><span class="line">            # If not specified, Dashboard will attempt to auto discover the API server and connect</span><br><span class="line">            # to it. Uncomment only if the default does not work.</span><br><span class="line">            # - --apiserver-host=http://my-address:port</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: kubernetes-dashboard-certs</span><br><span class="line">              mountPath: /certs</span><br><span class="line">              # Create on-disk volume to store exec logs</span><br><span class="line">            - mountPath: /tmp</span><br><span class="line">              name: tmp-volume</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              scheme: HTTPS</span><br><span class="line">              path: /</span><br><span class="line">              port: 8443</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            timeoutSeconds: 30</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: false</span><br><span class="line">            readOnlyRootFilesystem: true</span><br><span class="line">            runAsUser: 1001</span><br><span class="line">            runAsGroup: 2001</span><br><span class="line">      volumes:</span><br><span class="line">        - name: kubernetes-dashboard-certs</span><br><span class="line">          secret:</span><br><span class="line">            secretName: kubernetes-dashboard-certs</span><br><span class="line">        - name: tmp-volume</span><br><span class="line">          emptyDir: &#123;&#125;</span><br><span class="line">      serviceAccountName: kubernetes-dashboard</span><br><span class="line">      nodeSelector:</span><br><span class="line">        &quot;kubernetes.io/os&quot;: linux</span><br><span class="line">      # Comment the following tolerations if Dashboard must not be deployed on master</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: node-role.kubernetes.io/master</span><br><span class="line">          effect: NoSchedule</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line">  name: dashboard-metrics-scraper</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 8000</span><br><span class="line">      targetPort: 8000</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line">  name: dashboard-metrics-scraper</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: dashboard-metrics-scraper</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: dashboard-metrics-scraper</span><br><span class="line">      annotations:</span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: &#x27;runtime/default&#x27;</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: dashboard-metrics-scraper</span><br><span class="line">          image: kubernetesui/metrics-scraper:v1.0.4</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8000</span><br><span class="line">              protocol: TCP</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              scheme: HTTP</span><br><span class="line">              path: /</span><br><span class="line">              port: 8000</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            timeoutSeconds: 30</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - mountPath: /tmp</span><br><span class="line">            name: tmp-volume</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: false</span><br><span class="line">            readOnlyRootFilesystem: true</span><br><span class="line">            runAsUser: 1001</span><br><span class="line">            runAsGroup: 2001</span><br><span class="line">      serviceAccountName: kubernetes-dashboard</span><br><span class="line">      nodeSelector:</span><br><span class="line">        &quot;kubernetes.io/os&quot;: linux</span><br><span class="line">      # Comment the following tolerations if Dashboard must not be deployed on master</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: node-role.kubernetes.io/master</span><br><span class="line">          effect: NoSchedule</span><br><span class="line">      volumes:</span><br><span class="line">        - name: tmp-volume</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> Docker Desktop </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio安装笔记</title>
      <link href="/2021/01/01/software/install/how-to-install-android-studio/"/>
      <url>/2021/01/01/software/install/how-to-install-android-studio/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Studio安装笔记"><a href="#Android-Studio安装笔记" class="headerlink" title="Android Studio安装笔记"></a>Android Studio安装笔记</h1><p>简单记录一下Android Studio安装</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>从<a href="https://developer.android.google.cn/studio">官网</a>安装Android Studio,</p><p>然后点击安装。</p><h3 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h3><p>使用<a href="http://ping.chinaz.com/">http://ping.chinaz.com</a>获取<em>dl.google.com</em>的大陆响应时间最短的IP地址。</p><p>以我为例：180.163.151.161</p><p>将其写入hosts文件(C:\WINDOWS\System32\drivers\etc\hosts)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">180.163.151.161 dl.google.com</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/senior-engineer/p/11130757.html">在Android Studio中下载Android SDK的两种方式（Android Studio3.0、windows</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu 18.04.5 LTS上安装minkube</title>
      <link href="/2021/01/01/software/k8s/how-to-install-minkube/"/>
      <url>/2021/01/01/software/k8s/how-to-install-minkube/</url>
      
        <content type="html"><![CDATA[<h2 id="在Ubuntu-18-04-5-LTS上安装minkube"><a href="#在Ubuntu-18-04-5-LTS上安装minkube" class="headerlink" title="在Ubuntu 18.04.5 LTS上安装minkube"></a>在Ubuntu 18.04.5 LTS上安装minkube</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol><li>2 CPUs or more</li><li>2GB内存</li><li>20G空间</li><li>无线网络连接</li><li>容器或者虚拟机， 比如: Docker, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMWare</li></ol><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo minikube start --registry-mirror=https://registry.docker-cn.com --vm-driver=none --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="none-driver-integration-tests-k8s-1-18-needs-conntrack-installed"><a href="#none-driver-integration-tests-k8s-1-18-needs-conntrack-installed" class="headerlink" title="none driver integration tests: k8s 1.18 needs conntrack installed"></a>none driver integration tests: k8s 1.18 needs conntrack installed</h4><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install conntrack</span><br><span class="line">## https://github.com/kubernetes/minikube/issues/7179</span><br></pre></td></tr></table></figure><h2 id="在Windows上安装k8s"><a href="#在Windows上安装k8s" class="headerlink" title="在Windows上安装k8s"></a>在Windows上安装k8s</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>安装<a href="https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe">Docker Desktop</a></p><h3 id="配置docker的国内镜像"><a href="#配置docker的国内镜像" class="headerlink" title="配置docker的国内镜像"></a>配置docker的国内镜像</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用阿里云的镜像"><a href="#使用阿里云的镜像" class="headerlink" title="使用阿里云的镜像"></a>使用阿里云的镜像</h3><p>为了更快的完成一些安装，我们先通过一个阿里云的批处理，提前把Kubernetes需要的Images拉取下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AliyunContainerService/k8s-for-docker-desktop.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> k8s-for-docker-desktop</span><br><span class="line"></span><br><span class="line">.\load_images.ps1</span><br></pre></td></tr></table></figure><h3 id="启动Kubernetes"><a href="#启动Kubernetes" class="headerlink" title="启动Kubernetes"></a>启动Kubernetes</h3><p>在Docker仪表盘上在Settings切到Kubernetes上启动Enabled Kubernetes</p><h3 id="安装Dashboard（可选）"><a href="#安装Dashboard（可选）" class="headerlink" title="安装Dashboard（可选）"></a>安装Dashboard（可选）</h3><p>使用<a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml">recommended.yaml</a>进行安装</p><blockquote><p>如果不能访问<em>recommended.yaml</em>， 可以使用<a href="#%E9%99%84%E5%BD%95">附录</a>的副本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f recommended.yaml </span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br></pre></td></tr></table></figure><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><p>前台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl proxy</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup kubectl proxy &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>登录需要获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret default| awk &#x27;$1==&quot;token:&quot;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这是我的返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Imk0TWpNeGM3SWVrMHllMVphM0FPVFZIZ2RIaXZIbll2UzZObkJSZTZ5MUEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLXR2bWJ0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiZDI3YzljZS0wZWY2LTQ0YTAtYThmNC0xYTg2ZWMxN2JmNTQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.UjlNOPi95jsxtbGXVu6t3LK-1kOjlcLk7_qVPhDEmYD9so5BLnosS6Z_nBfpO2aU5xxMZMMvkTIydMKVTgftzeFpUZ7_ANsqjZ17Z2EnzUxhzkBU9USU3294APU4Gxep1yb4uyetRtIozdsd39-TlMwoCkHb4aGbluZiT64AkbDS6v7PhONaaCIKTT6hxvo4PEiyau_fEKCfI6rsWdcoOWlKLeXOwqGW1tHgIZEPR7Eln8NA52fAOvHyPp5DSKgD3L2qGDAlQNXCFCrB2bc7-xBEEBjeDXOhTIl1sUX6gmhEzp0XFH20JZaSJysvW1ZQGsv_AXj-4PX8Egv1kq1txA</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>recommended.yaml的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2017 The Kubernetes Authors.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-csrf</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  csrf: &quot;&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-key-holder</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-settings</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">rules:</span><br><span class="line">  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;secrets&quot;]</span><br><span class="line">    resourceNames: [&quot;kubernetes-dashboard-key-holder&quot;, &quot;kubernetes-dashboard-certs&quot;, &quot;kubernetes-dashboard-csrf&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;update&quot;, &quot;delete&quot;]</span><br><span class="line">    # Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;configmaps&quot;]</span><br><span class="line">    resourceNames: [&quot;kubernetes-dashboard-settings&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;update&quot;]</span><br><span class="line">    # Allow Dashboard to get metrics.</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;services&quot;]</span><br><span class="line">    resourceNames: [&quot;heapster&quot;, &quot;dashboard-metrics-scraper&quot;]</span><br><span class="line">    verbs: [&quot;proxy&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;services/proxy&quot;]</span><br><span class="line">    resourceNames: [&quot;heapster&quot;, &quot;http:heapster:&quot;, &quot;https:heapster:&quot;, &quot;dashboard-metrics-scraper&quot;, &quot;http:dashboard-metrics-scraper&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">rules:</span><br><span class="line">  # Allow Metrics Scraper to get metrics from the Metrics server</span><br><span class="line">  - apiGroups: [&quot;metrics.k8s.io&quot;]</span><br><span class="line">    resources: [&quot;pods&quot;, &quot;nodes&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kubernetes-dashboard</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kubernetes-dashboard</span><br><span class="line">    namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: kubernetes-dashboard</span><br><span class="line">          image: kubernetesui/dashboard:v2.0.3</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8443</span><br><span class="line">              protocol: TCP</span><br><span class="line">          args:</span><br><span class="line">            - --auto-generate-certificates</span><br><span class="line">            - --namespace=kubernetes-dashboard</span><br><span class="line">            # Uncomment the following line to manually specify Kubernetes API server Host</span><br><span class="line">            # If not specified, Dashboard will attempt to auto discover the API server and connect</span><br><span class="line">            # to it. Uncomment only if the default does not work.</span><br><span class="line">            # - --apiserver-host=http://my-address:port</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: kubernetes-dashboard-certs</span><br><span class="line">              mountPath: /certs</span><br><span class="line">              # Create on-disk volume to store exec logs</span><br><span class="line">            - mountPath: /tmp</span><br><span class="line">              name: tmp-volume</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              scheme: HTTPS</span><br><span class="line">              path: /</span><br><span class="line">              port: 8443</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            timeoutSeconds: 30</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: false</span><br><span class="line">            readOnlyRootFilesystem: true</span><br><span class="line">            runAsUser: 1001</span><br><span class="line">            runAsGroup: 2001</span><br><span class="line">      volumes:</span><br><span class="line">        - name: kubernetes-dashboard-certs</span><br><span class="line">          secret:</span><br><span class="line">            secretName: kubernetes-dashboard-certs</span><br><span class="line">        - name: tmp-volume</span><br><span class="line">          emptyDir: &#123;&#125;</span><br><span class="line">      serviceAccountName: kubernetes-dashboard</span><br><span class="line">      nodeSelector:</span><br><span class="line">        &quot;kubernetes.io/os&quot;: linux</span><br><span class="line">      # Comment the following tolerations if Dashboard must not be deployed on master</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: node-role.kubernetes.io/master</span><br><span class="line">          effect: NoSchedule</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line">  name: dashboard-metrics-scraper</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 8000</span><br><span class="line">      targetPort: 8000</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: dashboard-metrics-scraper</span><br><span class="line">  name: dashboard-metrics-scraper</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: dashboard-metrics-scraper</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: dashboard-metrics-scraper</span><br><span class="line">      annotations:</span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: &#x27;runtime/default&#x27;</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: dashboard-metrics-scraper</span><br><span class="line">          image: kubernetesui/metrics-scraper:v1.0.4</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8000</span><br><span class="line">              protocol: TCP</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              scheme: HTTP</span><br><span class="line">              path: /</span><br><span class="line">              port: 8000</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            timeoutSeconds: 30</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - mountPath: /tmp</span><br><span class="line">            name: tmp-volume</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: false</span><br><span class="line">            readOnlyRootFilesystem: true</span><br><span class="line">            runAsUser: 1001</span><br><span class="line">            runAsGroup: 2001</span><br><span class="line">      serviceAccountName: kubernetes-dashboard</span><br><span class="line">      nodeSelector:</span><br><span class="line">        &quot;kubernetes.io/os&quot;: linux</span><br><span class="line">      # Comment the following tolerations if Dashboard must not be deployed on master</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: node-role.kubernetes.io/master</span><br><span class="line">          effect: NoSchedule</span><br><span class="line">      volumes:</span><br><span class="line">        - name: tmp-volume</span><br><span class="line">          emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> minikube </tag>
            
            <tag> kubernetes </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
